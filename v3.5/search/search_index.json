{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Data-Lunch documentation!","text":"<p>Data-Lunch is your best friends when it's vital to collect and administer lunch orders  for a group of people (wether they are friends or teammates).</p> <p>It started as a small personal project and it quickly became an unrepleaceable companion for me and my colleagues.</p>"},{"location":"#more-info","title":"More info","text":"<p>Work in Progress</p> <p>This section is a work in progress, more info will be available in the future!</p>"},{"location":"developers/","title":"Developers Instructions","text":""},{"location":"developers/#development-environment-setup","title":"Development environment setup","text":"<p>The following steps will guide you through the installation procedure.</p>"},{"location":"developers/#miniconda","title":"Miniconda","text":"<p>Conda is required for creating the development environment (it is suggested to install Miniconda).</p>"},{"location":"developers/#setup-the-development-environment","title":"Setup the development environment","text":"<p>Use the setup script (<code>setup_dev_env.sh</code>) to install all the required development tools.</p> <p>Use <code>source</code> to properly launch the script.</p> <pre><code>source setup_dev_env.sh\n</code></pre> <p>Important</p> <p>The setup script will take care of setting up the development environment for you.  The script installs:</p> <ul> <li>3 environments (<code>data-lunch</code> for development, <code>ci-cd</code> for pre-commit and other utilities, <code>gc-sdk</code> for interacting with Google Cloud Platform)</li> <li>pre-commit hooks</li> <li><code>data-lunch</code> command line</li> </ul>"},{"location":"developers/#environment-variables","title":"Environment variables","text":"<p>The following environment variables are required for running the web app, the makefile or utility scripts.</p>"},{"location":"developers/#general","title":"General","text":"Variable Type Required Description <code>PANEL_APP</code> str \u2714\ufe0f app name, data-lunch-app by default (used by <code>makefile</code>) <code>PANEL_ENV</code> str \u2714\ufe0f environment, e.g. development, quality, production, affects app configuration (Hydra) and build processes (makefile) <code>PANEL_ARGS</code> str \u274c additional arguments passed to Hydra (e.g. <code>panel/gui=major_release</code>) in makefile and <code>docker-compose</code> commands <code>PORT</code> int \u274c port used by the web app (or the container), default to 5000; affects app configuration and build process (it is used by makefile, Hydra and Docker)"},{"location":"developers/#docker-and-google-cloud-platform","title":"Docker and Google Cloud Platform","text":"<p>Note</p> <p>The following variables are mainly used during the building process or by external scripts.</p> Variable Type Required Description <code>DOCKER_USERNAME</code> str \u274c your Docker Hub username, used by <code>makefile</code> and stats panel to extract container name <code>IMAGE_VERSION</code> str \u274c Docker image version, typically <code>stable</code> or <code>latest</code> (used by makefile and <code>docker-compose</code> commands) <code>GCLOUD_PROJECT</code> str \u274c Google Cloud Platform <code>project_id</code>, used by <code>makefile</code> for GCP's CLI authentication and for uploading the database to gcp storage, if active in web app configuration files (see panel.scheduled_tasks) <code>GCLOUD_BUCKET</code> str \u274c Google Cloud Platform <code>bucket</code>, used for uploading database to gcp storage, if active in web app configuration files (see panel.scheduled_tasks) <code>MAIL_USER</code> str \u274c email client user, used for sending emails containing the instance IP, e.g.mywebappemail@email.com (used only for Google Cloud Platform) <code>MAIL_APP_PASSWORD</code> str \u274c email client password used for sending emails containing the instance IP (used only for Google Cloud Platform) <code>MAIL_RECIPIENTS</code> str \u274c email recipients as string, separated by <code>,</code> (used for sending emails containing the instance IP when hosted on Google Cloud Platform) <code>DUCKDNS_URL</code> str \u274c URL used in <code>compose_init.sh</code> to update dynamic address (see Duck DNS's instructions for details, used when hosted on Google Cloud Platform)"},{"location":"developers/#tlsssl-certificate","title":"TLS/SSL Certificate","text":"<p>Tip</p> <p>Use the command <code>make ssl-gen-certificate</code> to generate local SSL certificates.</p> Variable Type Required Description <code>CERT_EMAIL</code> str \u274c email for registering SSL certificates, shared with the authority Let's Encrypt (via <code>certbot</code>); used by <code>docker-compose</code> commands <code>DOMAIN</code> str \u274c domain name, e.g. mywebapp.com, used by <code>docker-compose</code> commands (<code>certbot</code>), in email generation (<code>scripts</code> folder) and to auto-generate SSL certificates"},{"location":"developers/#encryption-and-authorization","title":"Encryption and Authorization","text":"<p>Note</p> <p>All variables used by Postgresql are not required if <code>db=sqlite</code> (default value).  All variables used by OAuth are not required if <code>server=no_auth</code> (default value).</p> <p>Important</p> <p><code>DATA_LUNCH_COOKIE_SECRET</code> and <code>DATA_LUNCH_OAUTH_ENC_KEY</code> are required even if <code>server=no_auth</code> is set.</p> Variable Type Required Description <code>DATA_LUNCH_COOKIE_SECRET</code> str \u2714\ufe0f Secret used for securing the authentication cookie (use <code>make generate-secrets</code> to generate a valid secret) <code>DATA_LUNCH_OAUTH_ENC_KEY</code> str \u2714\ufe0f Encription key used by the OAuth algorithm for encryption (use <code>make generate-secrets</code> to generate a valid secret) <code>DATA_LUNCH_OAUTH_KEY</code> str \u274c OAuth key used for configuring the OAuth provider (GitHub, Azure) <code>DATA_LUNCH_OAUTH_SECRET</code> str \u274c OAuth secret used for configuring the OAuth provider (GitHub, Azure) <code>DATA_LUNCH_OAUTH_REDIRECT_URI</code> str \u274c OAuth redirect uri used for configuring the OAuth provider (GitHub, Azure), do not set to use default value <code>DATA_LUNCH_OAUTH_TENANT_ID</code> str \u274c OAuth tenant id used for configuring the OAuth provider (Azure), do not set to use default value <code>DATA_LUNCH_DB_USER</code> str \u274c Postgresql user, do not set to use default value <code>DATA_LUNCH_DB_PASSWORD</code> str \u274c Postgresql password <code>DATA_LUNCH_DB_HOST</code> str \u274c Postgresql host, do not set to use default value <code>DATA_LUNCH_DB_PORT</code> str \u274c Postgresql port, do not set to use default value <code>DATA_LUNCH_DB_DATABASE</code> str \u274c Postgresql database, do not set to use default value <code>DATA_LUNCH_DB_SCHEMA</code> str \u274c Postgresql schema, do not set to use default value"},{"location":"developers/#manually-install-the-development-environment","title":"Manually install the development environment","text":"<p>Warning</p> <p>This step is not required if the setup script (<code>setup_dev_env.sh</code>) is used.</p> <p>Use the terminal for navigating to the repository base directory. Use the following command in your terminal to create an environment named <code>data-lunch</code> manually. Otherwise use the setup script to activate the guided installing procedure.</p> <pre><code>conda env create -f environment.yml\n</code></pre> <p>Activate the new Conda environment with the following command.</p> <pre><code>conda activate data-lunch\n</code></pre>"},{"location":"developers/#manually-install-data-lunch-cli","title":"Manually install data-lunch CLI","text":"<p>Warning</p> <p>This step is not required if the setup script (<code>setup_dev_env.sh</code>) is used.</p> <p>The CLI is distributed with setuptools instead of using Unix shebangs. It is a very simple utility to initialize and delete the app database. There are different use cases:</p> <ul> <li>Create/delete the sqlite database used by the app</li> <li>Initialize/drop tables inside the sqlite database</li> </ul> <p>Use the following command for generating the CLI executable from the <code>setup.py</code> file, it will install your package locally.</p> <pre><code>pip install .\n</code></pre> <p>If you want to make some changes to the source code it is suggested to use the following option.</p> <pre><code>pip install --editable .\n</code></pre> <p>It will just link the package to the original location, basically meaning any changes to the original package would reflect directly in your environment.</p> <p>Now you can activate the Conda environment and access the CLI commands directly from the terminal (without using annoying shebangs or prepending <code>python</code> to run your CLI calls).</p> <p>Test that everything is working correctly with the following commands.</p> <pre><code>data-lunch --version\ndata-lunch --help\n</code></pre>"},{"location":"developers/#running-the-docker-compose-system","title":"Running the docker-compose system","text":"<p>Since this app will be deployed with an hosting service a Dockerfile to build a container image is available. The docker compose file (see <code>docker-compose.yaml</code>) deploys the web app container along with a load balancer (the nginx container) to improve the system scalability.</p> <p>Look inside the <code>makefile</code> to see the <code>docker</code> and <code>docker-compose</code> options.</p> <p>To build and run the dockerized system you have to install Docker. Call the following <code>make</code> command to start the build process.</p> <pre><code>make docker-up-init docker-up-build\n</code></pre> <p><code>up-init</code> initialize the ssl certificate based on the selected environment (as set in the environment variable <code>PANEL_ENV</code>, i.e. development or production). Call only <code>make</code> (without arguments) to trigger the same command. A missing or incomplete ssl certificate folder will result in an <code>nginx</code> container failure on start-up.</p> <p>Images are built and the two containers are started.  </p> <p>You can then access your web app at <code>http://localhost:PORT</code> (where <code>PORT</code> will match the value set through the environment variable).</p> <p>Note</p> <p>You can also use <code>make docker-up</code> to spin up the containers if you do not need to re-build any image or initialize ssl certificate folders.</p> <p>Important</p> <p>An additional container named <code>db</code> is started if <code>db=postgresql</code> is set</p>"},{"location":"developers/#running-a-single-container","title":"Running a single container","text":"<p>It is possible to launch a single server by calling the following command.</p> <pre><code>make docker-build\n\nmake docker-run\n</code></pre> <p>You can then access your web app at <code>http://localhost:5000</code> (if the deafult <code>PORT</code> is selected).</p>"},{"location":"developers/#running-locally","title":"Running locally","text":"<p>Launch a local server with default options by calling the following command.</p> <pre><code>python -m dlunch\n</code></pre> <p>Use Hydra arguments to alter the app behaviour.</p> <pre><code>python -m dlunch server=basic_auth\n</code></pre> <p>See Hydra's documentation for additional details.</p>"},{"location":"developers/#additional-installations-before-contributing","title":"Additional installations before contributing","text":"<p>Warning</p> <p>This step is not required if the setup script (<code>setup_dev_env.sh</code>) is used.</p> <p>Before contributing please create the <code>pre-commit</code> and <code>commitizen</code> environments.</p> <pre><code>cd requirements\nconda env create -f pre-commit.yml\nconda env create -f commitizen.yml\n</code></pre>"},{"location":"developers/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>Warning</p> <p>This step is not required if the setup script (<code>setup_dev_env.sh</code>) is used.</p> <p>Then install the precommit hooks.</p> <pre><code>conda activate pre-commit\npre-commit install\npre-commit autoupdate\n</code></pre> <p>Optionally run hooks on all files.</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"developers/#commitizen","title":"Commitizen","text":"<p>Warning</p> <p>This step is not required if the setup script (<code>setup_dev_env.sh</code>) is used.</p> <p>The Commitizen hook checks that rules for conventional commits are respected in commits messages. Use the following command to enjoy Commitizen's interactive prompt.</p> <pre><code>conda activate commitizen\ncz commit\n</code></pre> <p><code>cz c</code> is a shorther alias for <code>cz commit</code>.</p>"},{"location":"developers/#release-strategy-from-development-to-main-branch","title":"Release strategy from <code>development</code> to <code>main</code> branch","text":"<p>Caution</p> <p>This step is required only if the CI-CD pipeline on GitHub does not work.</p> <p>In order to take advantage of Commitizen <code>bump</code> command follow this guideline.</p> <p>First check that you are on the correct branch.</p> <pre><code>git checkout main\n</code></pre> <p>Then start the merge process forcing it to stop before commit (<code>--no-commit</code>) and without using the fast forward strategy (<code>--no-ff</code>).</p> <pre><code>git merge development --no-commit --no-ff\n</code></pre> <p>Check that results match your expectations then commit (you can leave the default message).</p> <pre><code>git commit\n</code></pre> <p>Now Commitizen <code>bump</code> command will add an additional commit with updated versions to every file listed inside <code>pyproject.toml</code>.</p> <pre><code>cz bump --no-verify\n</code></pre> <p>You can now merge results of the release process back to the <code>development</code> branch.</p> <pre><code>git checkout development\ngit merge main --no-ff\n</code></pre> <p>Use \"update files from last release\" or the default text as commit message.</p>"},{"location":"developers/#google-cloud-platform-utilities","title":"Google Cloud Platform utilities","text":"<p>Warning</p> <p>This step is not required if the setup script (<code>setup_dev_env.sh</code>) is used.</p> <p>The makefile has two rules for conviniently setting up and removing authentication credentials for Google Cloud Platform command line interface: <code>gcp-config</code> and <code>gcp-revoke</code>.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#introduction","title":"Introduction","text":"<p>Data-Lunch is a web app to help people managing lunch orders. The interface make possible to upload a menu as an Excel file or as an image. The menu is copied inside the app and people are then able to place orders at preset lunch times. Users can flag an order as a takeway one, and, if something change, they can move an order to another lunch time (or change its takeaway status).</p> <p>The systems handle guests users by giving them a limited ability to interact with the app (they can in fact just place an order).</p> <p>Once all order are placed it is possible to stop new orders from being placed and download an Excel files with every order, grouped by lunch time and takeaway status.</p> <p>The idea behind this app is to simplify data collection at lunch time, so that a single person can book a restaurant and place orders for a group of people (friends, colleagues, etc.).</p> <p>Important</p> <p>This section is a work in progress, the app has a lot of configurations, not yet described in this documentation.  Authentication and guest management are just examples of what is missing from this documentation. </p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Install commitizen using <code>pip</code>:</p> <pre><code> pip install dlunch\n</code></pre> <p>For the program to work properly you need the following system dipendencies:</p> <ul> <li>SQLite: used if you set the database to <code>sqlite</code>.</li> <li>Tesseract: used to convert images with menu to text.</li> </ul> <p>If you need help on how to install those system preferences on linux (Debian) you can check the file <code>docker/web/Dockerfile.web</code>. It shows how to install them with <code>apt</code>.</p>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>Before starting you need the following environment variables to avoid errors on Data-Lunch startup.</p>"},{"location":"getting_started/#environment-variables","title":"Environment variables","text":"<p>Important</p> <p><code>DATA_LUNCH_COOKIE_SECRET</code> and <code>DATA_LUNCH_OAUTH_ENC_KEY</code> are required even if <code>server=no_auth</code> is set.</p> <p>Tip</p> <p>Use the command <code>data-lunch utils generate-secrets</code> to generate a valid secret.</p> Variable Type Required Description <code>PANEL_ENV</code> str \u2714\ufe0f Environment, e.g. development, quality, production, affects app configuration (Hydra) <code>PORT</code> int \u274c Port used by the web app (or the container), default to 5000; affects app configuration (it is used by Hydra) <code>DATA_LUNCH_COOKIE_SECRET</code> str \u2714\ufe0f Secret used for securing the authentication cookie (use <code>data-lunch utils generate-secrets</code> to generate a valid secret); leave it as an empty variable if no authentication is set <code>DATA_LUNCH_OAUTH_ENC_KEY</code> str \u2714\ufe0f Encription key used by the OAuth algorithm for encryption (use <code>data-lunch utils generate-secrets</code> to generate a valid secret); leave it as an empty variable if no authentication is set <p>Note</p> <p>The following variables are just a small part of the total. See here for more details.</p>"},{"location":"getting_started/#launch-command","title":"Launch command","text":"<p>Use the following command to start the server with default configuration (SQLite database, no authentication):</p> <pre><code>python -m dlunch\n</code></pre> <p>Connect to localhost:5000 (if the default port is used) to see the web app.</p>"},{"location":"getting_started/#customization","title":"Customization","text":"<p>Data-Lunch configurations explout Hydra versatility. It is possible to alter default configurations by using Hydra's overrides, for example</p> <pre><code>python -m dlunch panel/gui=major_release\n</code></pre> <p>will alter some graphic elements to show a release banner.</p>"},{"location":"getting_started/#docker","title":"Docker","text":"<p>A Docker image with Data-Lunch is available here.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>dlunch<ul> <li>__main__</li> <li>auth</li> <li>cli</li> <li>cloud</li> <li>conf</li> <li>core</li> <li>gui</li> <li>models</li> <li>scheduled_tasks</li> </ul> </li> </ul>"},{"location":"reference/dlunch/","title":"dlunch","text":"<p>Main Data-Lunch package.</p> <p>Modules:</p> Name Description <code>__main__</code> <p>Data-Lunch package entrypoint.</p> <code>auth</code> <p>Module with classes and functions used for authentication and password handling.</p> <code>cli</code> <p>Module with Data-Lunch's command line.</p> <code>cloud</code> <p>Module with functions to interact with GCP storage service.</p> <code>conf</code> <p>Package with Hydra configuration yaml files.</p> <code>core</code> <p>Module that defines main functions used to manage Data-Lunch operations.</p> <code>gui</code> <p>Module that defines main graphic interface and backend graphic interface.</p> <code>models</code> <p>Module with database tables definitions.</p> <code>scheduled_tasks</code> <p>Module with functions used to execute scheduled tasks.</p> <p>Functions:</p> Name Description <code>create_app</code> <p>Panel main app factory function</p> <code>create_backend</code> <p>Panel backend app factory function</p> <p>Attributes:</p> Name Type Description <code>log</code> <code>Logger</code> <p>Module logger.</p>"},{"location":"reference/dlunch/#dlunch.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log: Logger = getLogger(__name__)\n</code></pre> <p>Module logger.</p>"},{"location":"reference/dlunch/#dlunch.create_app","title":"create_app","text":"<pre><code>create_app(config: DictConfig) -&gt; Template\n</code></pre> <p>Panel main app factory function</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <p>Returns:</p> Type Description <code>Template</code> <p>Panel main app template.</p> Source code in <code>dlunch/__init__.py</code> <pre><code>def create_app(config: DictConfig) -&gt; pn.Template:\n    \"\"\"Panel main app factory function\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n\n    Returns:\n        pn.Template: Panel main app template.\n    \"\"\"\n    log.info(\"starting initialization process\")\n\n    # Create an instance of AuthUser (that includes an instance of AuthContext)\n    # and a waiter instance\n    auth_user = AuthUser(config=config)\n    waiter = Waiter(config=config)\n\n    log.info(\"initialize database\")\n    # Create tables\n    waiter.database_connector.create_database(\n        add_basic_auth_users=auth_user.auth_context.is_basic_auth_active(),\n    )\n\n    log.info(\"initialize support variables\")\n    # Generate a random password only if requested (check on flag)\n    log.debug(\"config guest user\")\n    guest_password = auth_user.auth_context.set_guest_user_password()\n\n    log.info(\"instantiate app\")\n\n    # Panel configurations\n    log.debug(\"set toggles initial state\")\n    # Set the no_more_orders flag if it is None (not found in flags table)\n    if waiter.database_connector.get_flag(id=\"no_more_orders\") is None:\n        waiter.database_connector.set_flag(id=\"no_more_orders\", value=False)\n    # Set guest override flag if it is None (not found in flags table)\n    # Guest override flag is per-user and is not set for guests\n    if (\n        waiter.database_connector.get_flag(\n            id=f\"{auth_user.name}_guest_override\"\n        )\n        is None\n    ) and not auth_user.is_guest():\n        waiter.database_connector.set_flag(\n            id=f\"{auth_user.name}_guest_override\", value=False\n        )\n\n    # DASHBOARD BASE TEMPLATE\n    log.debug(\"instantiate base template\")\n    # Create web app template\n    app = pn.template.VanillaTemplate(\n        title=config.panel.gui.title,\n        sidebar_width=gui.sidebar_width,\n        favicon=config.panel.gui.favicon_path,\n        logo=config.panel.gui.logo_path,\n        css_files=OmegaConf.to_container(\n            config.panel.gui.template_css_files, resolve=True\n        ),\n        raw_css=OmegaConf.to_container(\n            config.panel.gui.template_raw_css, resolve=True\n        ),\n    )\n\n    # CONFIGURABLE OBJECTS\n    # Since Person class need the config variable for initialization, every\n    # graphic element that require the Person class has to be instantiated\n    # by a dedicated function\n    # Create person instance, widget and column\n    log.debug(\"instantiate person class and graphic interface\")\n    person = gui.Person(config, name=\"User\")\n    gi = gui.GraphicInterface(\n        config=config,\n        waiter=waiter,\n        app=app,\n        person=person,\n        guest_password=guest_password,\n        auth_user=auth_user,\n    )\n\n    # DASHBOARD\n    # Build dashboard (the header object is used if defined)\n    app.header.append(gi.header_row)\n    app.sidebar.append(gi.sidebar_tabs)\n    app.main.append(gi.no_menu_col)\n    app.main.append(gi.guest_override_alert)\n    app.main.append(gi.no_more_order_alert)\n    app.main.append(gi.main_header_row)\n    app.main.append(gi.quote)\n    app.main.append(pn.Spacer(height=15))\n    app.main.append(gi.menu_flexbox)\n    app.main.append(gi.buttons_flexbox)\n    app.main.append(gi.results_divider)\n    app.main.append(gi.res_col)\n    app.modal.append(gi.error_message)\n\n    # Set components visibility based on no_more_order_button state\n    # and reload menu\n    gi.reload_on_no_more_order(\n        toggle=waiter.database_connector.get_flag(id=\"no_more_orders\"),\n        reload=False,\n    )\n    gi.reload_on_guest_override(\n        toggle=waiter.database_connector.get_flag(\n            id=f\"{auth_user.name}_guest_override\",\n            value_if_missing=False,\n        ),\n        reload=False,\n    )\n    waiter.reload_menu(\n        None,\n        gi,\n    )\n\n    app.servable()\n\n    log.info(\"initialization process completed\")\n\n    return app\n</code></pre>"},{"location":"reference/dlunch/#dlunch.create_backend","title":"create_backend","text":"<pre><code>create_backend(config: DictConfig) -&gt; Template\n</code></pre> <p>Panel backend app factory function</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <p>Returns:</p> Type Description <code>Template</code> <p>Panel backend app template.</p> Source code in <code>dlunch/__init__.py</code> <pre><code>def create_backend(config: DictConfig) -&gt; pn.Template:\n    \"\"\"Panel backend app factory function\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n\n    Returns:\n        pn.Template: Panel backend app template.\n    \"\"\"\n\n    log.info(\"starting initialization process\")\n\n    # Create an instance of AuthUser (which has also an instance of AuthContext\n    # among its attributes)\n    auth_user = AuthUser(config=config)\n\n    log.info(\"initialize database\")\n    # Create tables\n    auth_user.auth_context.database_connector.create_database(\n        add_basic_auth_users=auth_user.auth_context.is_basic_auth_active(),\n    )\n\n    log.info(\"instantiate backend\")\n\n    # DASHBOARD\n    log.debug(\"instantiate base template\")\n    # Create web app template\n    backend = pn.template.VanillaTemplate(\n        title=f\"{config.panel.gui.title} Backend\",\n        favicon=config.panel.gui.favicon_path,\n        logo=config.panel.gui.logo_path,\n        css_files=OmegaConf.to_container(\n            config.panel.gui.template_css_files, resolve=True\n        ),\n        raw_css=OmegaConf.to_container(\n            config.panel.gui.template_raw_css, resolve=True\n        ),\n    )\n\n    # CONFIGURABLE OBJECTS\n    backend_gi = gui.BackendInterface(config, auth_user=auth_user)\n\n    # DASHBOARD\n    # Build dashboard\n    backend.header.append(backend_gi.header_row)\n    backend.main.append(backend_gi.backend_controls)\n\n    backend.servable()\n\n    log.info(\"initialization process completed\")\n\n    return backend\n</code></pre>"},{"location":"reference/dlunch/__main__/","title":"__main__","text":"<p>Data-Lunch package entrypoint.</p> <p>Functions:</p> Name Description <code>run_app</code> <p>Main entrypoint, start the app loop.</p> <p>Attributes:</p> Name Type Description <code>log</code> <code>Logger</code> <p>Module logger.</p>"},{"location":"reference/dlunch/__main__/#dlunch.__main__.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log: Logger = getLogger(__name__)\n</code></pre> <p>Module logger.</p>"},{"location":"reference/dlunch/__main__/#dlunch.__main__.run_app","title":"run_app","text":"<pre><code>run_app(config: DictConfig) -&gt; None\n</code></pre> <p>Main entrypoint, start the app loop.</p> <p>Initialize database, authentication and encription. Setup panel and create objects for frontend and backend.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>hydra configuration object.</p> required Source code in <code>dlunch/__main__.py</code> <pre><code>@hydra.main(config_path=\"conf\", config_name=\"config\", version_base=\"1.3\")\ndef run_app(config: DictConfig) -&gt; None:\n    \"\"\"Main entrypoint, start the app loop.\n\n    Initialize database, authentication and encription.\n    Setup panel and create objects for frontend and backend.\n\n    Args:\n        config (DictConfig): hydra configuration object.\n    \"\"\"\n\n    # Set auth configurations\n    log.info(\"set auth context and encryption\")\n    auth_context = auth.AuthContext(config=config)\n    # Auth encryption\n    auth_context.set_app_auth_and_encryption()\n    log.debug(\n        f'authentication {\"\" if auth_context.is_auth_active() else \"not \"}active'\n    )\n\n    log.info(\"set panel config\")\n    # Set notifications options\n    pn.extension(\n        disconnect_notification=config.panel.notifications.disconnect_notification,\n        ready_notification=config.panel.notifications.ready_notification,\n    )\n    # Configurations\n    pn.config.nthreads = config.panel.nthreads\n    pn.config.notifications = True\n    authorize_callback_object: auth.AuthCallback = hydra.utils.instantiate(\n        config.auth.authorization_callback, config\n    )\n    pn.config.authorize_callback = authorize_callback_object.authorize\n    pn.config.auth_template = config.auth.auth_error_template\n\n    # If basic auth is used the database and users credentials shall be created here\n    if auth_context.is_basic_auth_active():\n        log.info(\"initialize database and users credentials for basic auth\")\n        # Create tables\n        auth_context.database_connector.create_database(\n            add_basic_auth_users=auth_context.is_basic_auth_active(),\n        )\n\n    # Starting scheduled tasks\n    log.info(\"start scheduled tasks\")\n    scheduled_tasks = hydra.utils.instantiate(config.panel.scheduled_tasks)\n    scheduled_task_manager = TaskManager(config=config, tasks=scheduled_tasks)\n    scheduled_task_manager.log_tasks(enabled_only=True)\n    scheduled_task_manager.schedule_all()\n\n    # Call the app factory function\n    log.info(\"set config for app factory function\")\n    # Pass the create_app and create_backend function as a lambda function to\n    # ensure that each invocation has a dedicated state variable (users'\n    # selections are not shared between instances)\n    # Backend exist only if auth is active\n    # Health is an endpoint for app health assessments\n    # Pass a dictionary for a multipage app\n    pages = {\"\": lambda: create_app(config=config)}\n    if auth_context.is_auth_active():\n        pages[\"backend\"] = lambda: create_backend(config=config)\n\n    # If basic authentication is active, instantiate ta special auth object\n    # otherwise leave an empty dict\n    # This step is done before panel.serve because auth_provider requires that\n    # the whole config is passed as an input\n    if auth_context.is_basic_auth_active():\n        auth_object = {\n            \"auth_provider\": hydra.utils.instantiate(\n                config.basic_auth.auth_provider, config\n            )\n        }\n        log.debug(\n            \"auth_object dict set to instantiated object from config.server.auth_provider\"\n        )\n    else:\n        auth_object = {}\n        log.debug(\n            \"missing config.server.auth_provider, auth_object dict left empty\"\n        )\n\n    # Set session begin/end logs\n    pn.state.on_session_created(lambda ctx: log.debug(\"session created\"))\n    pn.state.on_session_destroyed(lambda ctx: log.debug(\"session closed\"))\n\n    pn.serve(\n        panels=pages, **hydra.utils.instantiate(config.server), **auth_object\n    )\n</code></pre>"},{"location":"reference/dlunch/auth/","title":"auth","text":"<p>Module with classes and functions used for authentication and password handling.</p> <p>Classes:</p> Name Description <code>AuthCallback</code> <p>Class to handle authorization callback.</p> <code>AuthContext</code> <p>Class to handle authentication context and related operations.</p> <code>AuthUser</code> <p>Class to handle user authentication and management.</p> <code>DataLunchLoginHandler</code> <p>Custom Panel login Handler.</p> <code>DataLunchProvider</code> <p>Custom Panel auth provider.</p> <code>PasswordEncrypt</code> <p>Class that store the encrypted value of a password.</p> <code>PasswordHash</code> <p>Class that store the hashed value of a password.</p> <p>Attributes:</p> Name Type Description <code>log</code> <code>Logger</code> <p>Module logger.</p> <code>pwd_context</code> <code>CryptContext</code> <p>Crypt context with configurations for passlib (selected algorithm, etc.).</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log: Logger = getLogger(__name__)\n</code></pre> <p>Module logger.</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.pwd_context","title":"pwd_context  <code>module-attribute</code>","text":"<pre><code>pwd_context: CryptContext = CryptContext(\n    schemes=[\"pbkdf2_sha256\"], deprecated=\"auto\"\n)\n</code></pre> <p>Crypt context with configurations for passlib (selected algorithm, etc.).</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthCallback","title":"AuthCallback","text":"<p>Class to handle authorization callback.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <code>authorize_guest_users</code> <code>bool</code> <p>Set to <code>True</code> to enable the main page to guest users. Defaults to <code>False</code>.</p> <code>False</code> <p>Methods:</p> Name Description <code>__init__</code> <code>authorize</code> <p>Authorization callback: read config, user info and the target path of the</p> <p>Attributes:</p> Name Type Description <code>authorize_guest_users</code> <code>config</code> Source code in <code>dlunch/auth.py</code> <pre><code>class AuthCallback:\n    \"\"\"Class to handle authorization callback.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n        authorize_guest_users (bool, optional): Set to `True` to enable the main page to guest users.\n            Defaults to `False`.\n    \"\"\"\n\n    def __init__(\n        self, config: DictConfig, authorize_guest_users: bool = False\n    ) -&gt; None:\n        self.config = config\n        self.authorize_guest_users = authorize_guest_users\n\n    def authorize(self, user_info: dict, target_path: str) -&gt; bool:\n        \"\"\"Authorization callback: read config, user info and the target path of the\n        requested resource.\n\n        Return `True` (authorized) or `False` (not authorized) by checking current user\n        and target path.\n\n        Args:\n            user_info (dict): dictionary with user info passed by Panel to the authorization handle.\n            target_path (str): path of the requested resource.\n\n        Returns:\n            bool: authorization flag. `True` if authorized.\n        \"\"\"\n        # Set authenticated user from panel state (authentication context is\n        # instantiated automatically)\n        auth_user = AuthUser(config=self.config)\n        # If authorization is not active authorize every user\n        if not auth_user.auth_context.is_auth_active():\n            return True\n        # Get privileged users\n        privileged_users = auth_user.auth_context.list_privileged_users()\n        log.debug(f\"target path: {target_path}\")\n        # If user is not authenticated block it\n        if not auth_user.name:\n            log.debug(\"user not authenticated\")\n            return False\n        # All privileged users can reach backend (but the backend will have\n        # controls only for admins)\n        if auth_user.name in privileged_users:\n            return True\n        # If the target is the mainpage always authorized (if authenticated)\n        if self.authorize_guest_users and (target_path == \"/\"):\n            return True\n\n        # In all other cases, don't authorize and logout\n        log.debug(\"not authorized\")\n        pn.state.location.pathname.split(\"/\")[0] + \"/logout\"\n        return False\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthCallback.authorize_guest_users","title":"authorize_guest_users  <code>instance-attribute</code>","text":"<pre><code>authorize_guest_users = authorize_guest_users\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthCallback.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthCallback.__init__","title":"__init__","text":"<pre><code>__init__(\n    config: DictConfig, authorize_guest_users: bool = False\n) -&gt; None\n</code></pre> Source code in <code>dlunch/auth.py</code> <pre><code>def __init__(\n    self, config: DictConfig, authorize_guest_users: bool = False\n) -&gt; None:\n    self.config = config\n    self.authorize_guest_users = authorize_guest_users\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthCallback.authorize","title":"authorize","text":"<pre><code>authorize(user_info: dict, target_path: str) -&gt; bool\n</code></pre> <p>Authorization callback: read config, user info and the target path of the requested resource.</p> <p>Return <code>True</code> (authorized) or <code>False</code> (not authorized) by checking current user and target path.</p> <p>Parameters:</p> Name Type Description Default <code>user_info</code> <code>dict</code> <p>dictionary with user info passed by Panel to the authorization handle.</p> required <code>target_path</code> <code>str</code> <p>path of the requested resource.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>authorization flag. <code>True</code> if authorized.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def authorize(self, user_info: dict, target_path: str) -&gt; bool:\n    \"\"\"Authorization callback: read config, user info and the target path of the\n    requested resource.\n\n    Return `True` (authorized) or `False` (not authorized) by checking current user\n    and target path.\n\n    Args:\n        user_info (dict): dictionary with user info passed by Panel to the authorization handle.\n        target_path (str): path of the requested resource.\n\n    Returns:\n        bool: authorization flag. `True` if authorized.\n    \"\"\"\n    # Set authenticated user from panel state (authentication context is\n    # instantiated automatically)\n    auth_user = AuthUser(config=self.config)\n    # If authorization is not active authorize every user\n    if not auth_user.auth_context.is_auth_active():\n        return True\n    # Get privileged users\n    privileged_users = auth_user.auth_context.list_privileged_users()\n    log.debug(f\"target path: {target_path}\")\n    # If user is not authenticated block it\n    if not auth_user.name:\n        log.debug(\"user not authenticated\")\n        return False\n    # All privileged users can reach backend (but the backend will have\n    # controls only for admins)\n    if auth_user.name in privileged_users:\n        return True\n    # If the target is the mainpage always authorized (if authenticated)\n    if self.authorize_guest_users and (target_path == \"/\"):\n        return True\n\n    # In all other cases, don't authorize and logout\n    log.debug(\"not authorized\")\n    pn.state.location.pathname.split(\"/\")[0] + \"/logout\"\n    return False\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext","title":"AuthContext","text":"<p>Class to handle authentication context and related operations.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <p>Methods:</p> Name Description <code>__init__</code> <code>auth_type</code> <p>Check configuration object and return authentication type.</p> <code>backend_submit_password</code> <p>Submit password to database from backend but used also from frontend as part of <code>submit_password</code> function.</p> <code>generate_password</code> <p>Generate a random password.</p> <code>is_auth_active</code> <p>Check configuration object and return <code>True</code> if basic authentication or OAuth is active.</p> <code>is_basic_auth_active</code> <p>Check configuration object and return <code>True</code> if basic authentication is active.</p> <code>list_privileged_users</code> <p>List only privileged users (from <code>privileged_users</code> table).</p> <code>list_users_guests_and_privileges</code> <p>Join <code>privileged_users</code> and <code>credentials</code> tables to list normal users,</p> <code>set_app_auth_and_encryption</code> <p>Setup Panel authorization and encryption.</p> <code>set_guest_user_password</code> <p>If guest user is active return a password, otherwise return an empty string.</p> <code>submit_password</code> <p>Same as backend_submit_password with an additional check on old password.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Hydra configuration dictionary.</p> <code>database_connector</code> <code>DatabaseConnector</code> <p>Object that handles database connection and operations</p> Source code in <code>dlunch/auth.py</code> <pre><code>class AuthContext:\n    \"\"\"Class to handle authentication context and related operations.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n    \"\"\"\n\n    def __init__(self, config: DictConfig) -&gt; None:\n        self.config = config\n        \"\"\"Hydra configuration dictionary.\"\"\"\n        self.database_connector: models.DatabaseConnector = (\n            models.DatabaseConnector(config=config)\n        )\n        \"\"\"Object that handles database connection and operations\"\"\"\n\n    def is_basic_auth_active(self) -&gt; bool:\n        \"\"\"Check configuration object and return `True` if basic authentication is active.\n        Return `False` otherwise.\n\n        Returns:\n            bool: `True` if basic authentication is active, `False` otherwise.\n        \"\"\"\n        # Check if a valid basic_auth key exists\n        auth_provider = self.config.get(\"basic_auth\", None)\n        return auth_provider is not None\n\n    def is_auth_active(self) -&gt; bool:\n        \"\"\"Check configuration object and return `True` if basic authentication or OAuth is active.\n        Return `False` otherwise.\n\n        Returns:\n            bool: `True` if authentication (basic or OAuth) is active, `False` otherwise.\n        \"\"\"\n        # Check if a valid oauth key exists\n        auth_provider = self.is_basic_auth_active()\n        oauth_provider = (\n            self.config.server.get(\"oauth_provider\", None) is not None\n        )\n        return auth_provider or oauth_provider\n\n    def auth_type(self) -&gt; str | None:\n        \"\"\"Check configuration object and return authentication type.\n\n        Returns:\n            str | None: authentication type. None if no authentication is active.\n        \"\"\"\n        if self.is_basic_auth_active():\n            auth_type = \"basic\"\n        elif self.config.server.get(\"oauth_provider\", None) is not None:\n            auth_type = self.config.server.oauth_provider\n        else:\n            auth_type = None\n\n        return auth_type\n\n    def set_app_auth_and_encryption(self) -&gt; None:\n        \"\"\"Setup Panel authorization and encryption.\n\n        Namely:\n            - Encryption key\n            - Cookie expiry date\n\n        Raises:\n            ImportError: missing library (cryptography).\n        \"\"\"\n        # Encryption key\n        try:\n            if self.config.auth.oauth_encryption_key:\n                pn.config.oauth_encryption_key = (\n                    self.config.auth.oauth_encryption_key.encode(\"ascii\")\n                )\n                pn.state.encryption = Fernet(pn.config.oauth_encryption_key)\n        except ConfigAttributeError:\n            log.warning(\n                \"missing authentication encryption key, generate a key with the `panel oauth-secret` CLI command and then provide it to hydra using the DATA_LUNCH_OAUTH_ENC_KEY environment variable\"\n            )\n        # Cookie expiry date\n        try:\n            if self.config.auth.oauth_expiry:\n                pn.config.oauth_expiry = self.config.auth.oauth_expiry\n        except ConfigAttributeError:\n            log.warning(\n                \"missing explicit authentication expiry date for cookies, defaults to 1 day\"\n            )\n\n    def list_privileged_users(self) -&gt; list[str]:\n        \"\"\"List only privileged users (from `privileged_users` table).\n\n        Returns:\n            list[str]: list of usernames.\n        \"\"\"\n        session = self.database_connector.create_session()\n\n        with session:\n            privileged_users = session.scalars(\n                select(models.PrivilegedUsers)\n            ).all()\n\n        # Return users\n        users_list = [u.user for u in privileged_users]\n        users_list.sort()\n\n        return users_list\n\n    def list_users_guests_and_privileges(self) -&gt; pd.DataFrame:\n        \"\"\"Join `privileged_users` and `credentials` tables to list normal users,\n        admins and guests.\n\n        Returns a dataframe.\n\n        Returns:\n            pd.DataFrame: dataframe with users and privileges.\n        \"\"\"\n\n        # Query tables required to understand users and guests\n        df_privileged_users = models.PrivilegedUsers.read_as_df(\n            config=self.config,\n            index_col=\"user\",\n        )\n        # Leave credentials table empty if basic auth is not active\n        if self.is_basic_auth_active():\n            df_credentials = models.Credentials.read_as_df(\n                config=self.config,\n                index_col=\"user\",\n            )\n        else:\n            df_credentials = pd.DataFrame()\n\n        # Change admin column to privileges (used after join)\n        df_privileged_users[\"group\"] = df_privileged_users.admin.map(\n            {True: \"admin\", False: \"user\"}\n        )\n        df_user_guests_privileges = df_privileged_users.join(\n            df_credentials, how=\"outer\"\n        )[[\"group\"]]\n        df_user_guests_privileges = df_user_guests_privileges.fillna(\"guest\")\n\n        return df_user_guests_privileges\n\n    @staticmethod\n    def generate_password(\n        alphabet: str | None = None,\n        special_chars: str | None = \"\",\n        length: int = 12,\n    ) -&gt; str:\n        \"\"\"Generate a random password.\n\n        Args:\n            alphabet (str | None, optional): list of characters to use as alphabet to generate the password.\n                Defaults to None.\n            special_chars (str | None, optional): special characters to include inside the password string.\n                Defaults to \"\".\n            length (int, optional): length of the random password.\n                Defaults to 12.\n\n        Returns:\n            str: random password.\n        \"\"\"\n        # If alphabet is not avilable use a default one\n        if alphabet is None:\n            alphabet = string.ascii_letters + string.digits + special_chars\n        # Infinite loop for finding a valid password\n        while True:\n            password = \"\".join(secrets.choice(alphabet) for i in range(length))\n            # Create special chars condition only if special chars is non-empty\n            if special_chars:\n                special_chars_condition = any(\n                    c in special_chars for c in password\n                )\n            else:\n                special_chars_condition = True\n            if (\n                any(c.islower() for c in password)\n                and any(c.isupper() for c in password)\n                and any(c.isdigit() for c in password)\n                and special_chars_condition\n            ):\n                break\n        return password\n\n    def set_guest_user_password(self) -&gt; str:\n        \"\"\"If guest user is active return a password, otherwise return an empty string.\n\n        This function always returns an empty string if basic authentication is not active.\n\n        Guest user and basic authentication are handled through configuration files.\n\n        If the flag `reset_guest_user_password` is set to `True` the password is created\n        and uploaded to database. Otherwise the existing password is queried from database\n        `credentials` table.\n\n        Returns:\n            str: guest user password or empty string if basic authentication is not active.\n        \"\"\"\n        # Check if basic auth is active\n        if self.is_basic_auth_active():\n            # If active basic_auth.guest_user is true if guest user is active\n            is_guest_user_active = self.config.basic_auth.guest_user\n            log.debug(f\"guest user flag is {is_guest_user_active}\")\n        else:\n            # Otherwise the guest user feature is not applicable\n            is_guest_user_active = False\n            log.debug(\"guest user not applicable\")\n\n        # Set the guest password variable\n        if is_guest_user_active:\n            # If flag for resetting the password does not exist use the default\n            # value\n            if (\n                self.database_connector.get_flag(\n                    id=\"reset_guest_user_password\"\n                )\n                is None\n            ):\n                self.database_connector.set_flag(\n                    id=\"reset_guest_user_password\",\n                    value=self.config.basic_auth.default_reset_guest_user_password_flag,\n                )\n            # Generate a random password only if requested (check on flag)\n            # otherwise load from database\n            if self.database_connector.get_flag(\n                id=\"reset_guest_user_password\"\n            ):\n                # Turn off reset user password (in order to reset it only once)\n                # This statement also acquire a lock on database (so it is\n                # called first)\n                self.database_connector.set_flag(\n                    id=\"reset_guest_user_password\",\n                    value=False,\n                )\n                # Create password\n                guest_password = self.generate_password(\n                    special_chars=self.config.basic_auth.psw_special_chars,\n                    length=self.config.basic_auth.generated_psw_length,\n                )\n                # Add hashed password to database\n                AuthUser(\n                    config=self.config, auth_context=self, name=\"guest\"\n                ).add_user_hashed_password(guest_password)\n            else:\n                # Load from database\n                session = self.database_connector.create_session()\n                with session:\n                    try:\n                        guest_password = session.get(\n                            models.Credentials, \"guest\"\n                        ).password_encrypted.decrypt()\n                    except InvalidToken:\n                        # Notify exception and suggest to reset guest user password\n                        guest_password = \"\"\n                        log.warning(\n                            \"Unable to decrypt 'guest' user password because an invalid token has been detected: reset password from backend\"\n                        )\n                        pn.state.notifications.warning(\n                            \"Unable to decrypt 'guest' user password&lt;br&gt;Invalid token detected: reset password from backend\",\n                            duration=self.config.panel.notifications.duration,\n                        )\n        else:\n            guest_password = \"\"\n\n        return guest_password\n\n    def submit_password(self, gi: gui.GraphicInterface) -&gt; bool:\n        \"\"\"Same as backend_submit_password with an additional check on old password.\n\n        Args:\n            gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n\n        Returns:\n            bool: true if successful, false otherwise.\n        \"\"\"\n        # Get authenticated user from Panel state\n        auth_user = AuthUser(config=self.config, auth_context=self)\n        # Get username, updated updated at each key press\n        old_password_key_press = gi.password_widget._widgets[\n            \"old_password\"\n        ].value_input\n        # Check if old password is correct\n        if auth_user.password_hash == old_password_key_press:\n            # Then run the same checks used for backend\n            return self.backend_submit_password(\n                gi=gi, user=auth_user.name, logout_on_success=True\n            )\n        else:\n            pn.state.notifications.error(\n                \"Incorrect old password!\",\n                duration=self.config.panel.notifications.duration,\n            )\n        return False\n\n    def backend_submit_password(\n        self,\n        gi: gui.GraphicInterface | gui.BackendInterface,\n        user: str = None,\n        user_is_guest: bool | None = None,\n        user_is_admin: bool | None = None,\n        logout_on_success: bool = False,\n    ) -&gt; bool:\n        \"\"\"Submit password to database from backend but used also from frontend as part of `submit_password` function.\n\n        Args:\n            gi (gui.GraphicInterface | gui.BackendInterface): graphic interface object (used to interact with Panel widgets).\n            user (str, optional): username. Defaults to None.\n            user_is_guest (bool | None, optional): guest flag (true if guest). Defaults to None.\n            user_is_admin (bool | None, optional): admin flag (true if admin). Defaults to None.\n            logout_on_success (bool, optional): set to true to force logout once the new password is set. Defaults to False.\n\n        Returns:\n            bool: true if successful, false otherwise.\n        \"\"\"\n        # Check if user is passed, otherwise check if backend widget\n        # (password_widget.object.user) is available\n        if not user:\n            username = gi.password_widget._widgets[\"user\"].value_input\n        else:\n            username = user\n        # Get all passwords, updated at each key press\n        new_password_key_press = gi.password_widget._widgets[\n            \"new_password\"\n        ].value_input\n        repeat_new_password_key_press = gi.password_widget._widgets[\n            \"repeat_new_password\"\n        ].value_input\n        # Check if new password match repeat password\n        if username:\n            if new_password_key_press == repeat_new_password_key_press:\n                # Check if new password is valid with regex\n                if re.fullmatch(\n                    self.config.basic_auth.psw_regex,\n                    new_password_key_press,\n                ):\n                    auth_user = AuthUser(\n                        config=self.config, auth_context=self, name=username\n                    )\n                    # If is_guest and is_admin are None (not passed) use the ones\n                    # already set for the user\n                    if user_is_guest is None:\n                        user_is_guest = auth_user.is_guest(\n                            allow_override=False\n                        )\n                    if user_is_admin is None:\n                        user_is_admin = auth_user.is_admin()\n                    # First remove user from both 'privileged_users' and\n                    # 'credentials' tables.\n                    deleted_data = auth_user.remove_user()\n                    if (deleted_data[\"privileged_users_deleted\"] &gt; 0) or (\n                        deleted_data[\"credentials_deleted\"] &gt; 0\n                    ):\n                        pn.state.notifications.success(\n                            f\"Removed old data for&lt;br&gt;'{username}'&lt;br&gt;auth: {deleted_data['privileged_users_deleted']}&lt;br&gt;cred: {deleted_data['credentials_deleted']}\",\n                            duration=self.config.panel.notifications.duration,\n                        )\n                    else:\n                        pn.state.notifications.warning(\n                            f\"Creating new user&lt;br&gt;'{username}' does not exist\",\n                            duration=self.config.panel.notifications.duration,\n                        )\n                    # Add a privileged users only if guest option is not active\n                    if not user_is_guest:\n                        auth_user.add_privileged_user(is_admin=user_is_admin)\n                    # Green light: update the password!\n                    auth_user.add_user_hashed_password(\n                        password=new_password_key_press\n                    )\n\n                    # Logout if requested\n                    if logout_on_success:\n                        pn.state.notifications.success(\n                            \"Password updated&lt;br&gt;Logging out\",\n                            duration=self.config.panel.notifications.duration,\n                        )\n                        sleep(4)\n                        gi.force_logout()\n                    else:\n                        pn.state.notifications.success(\n                            \"Password updated\",\n                            duration=self.config.panel.notifications.duration,\n                        )\n                    return True\n                else:\n                    pn.state.notifications.error(\n                        \"Password requirements not satisfied&lt;br&gt;Check again!\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n            else:\n                pn.state.notifications.error(\n                    \"Passwords are different!\",\n                    duration=self.config.panel.notifications.duration,\n                )\n        else:\n            pn.state.notifications.error(\n                \"Missing user!\",\n                duration=self.config.panel.notifications.duration,\n            )\n\n        return False\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config\n</code></pre> <p>Hydra configuration dictionary.</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.database_connector","title":"database_connector  <code>instance-attribute</code>","text":"<pre><code>database_connector: DatabaseConnector = DatabaseConnector(\n    config=config\n)\n</code></pre> <p>Object that handles database connection and operations</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.__init__","title":"__init__","text":"<pre><code>__init__(config: DictConfig) -&gt; None\n</code></pre> Source code in <code>dlunch/auth.py</code> <pre><code>def __init__(self, config: DictConfig) -&gt; None:\n    self.config = config\n    \"\"\"Hydra configuration dictionary.\"\"\"\n    self.database_connector: models.DatabaseConnector = (\n        models.DatabaseConnector(config=config)\n    )\n    \"\"\"Object that handles database connection and operations\"\"\"\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.auth_type","title":"auth_type","text":"<pre><code>auth_type() -&gt; str | None\n</code></pre> <p>Check configuration object and return authentication type.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>authentication type. None if no authentication is active.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def auth_type(self) -&gt; str | None:\n    \"\"\"Check configuration object and return authentication type.\n\n    Returns:\n        str | None: authentication type. None if no authentication is active.\n    \"\"\"\n    if self.is_basic_auth_active():\n        auth_type = \"basic\"\n    elif self.config.server.get(\"oauth_provider\", None) is not None:\n        auth_type = self.config.server.oauth_provider\n    else:\n        auth_type = None\n\n    return auth_type\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.backend_submit_password","title":"backend_submit_password","text":"<pre><code>backend_submit_password(\n    gi: GraphicInterface | BackendInterface,\n    user: str = None,\n    user_is_guest: bool | None = None,\n    user_is_admin: bool | None = None,\n    logout_on_success: bool = False,\n) -&gt; bool\n</code></pre> <p>Submit password to database from backend but used also from frontend as part of <code>submit_password</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>gi</code> <code>GraphicInterface | BackendInterface</code> <p>graphic interface object (used to interact with Panel widgets).</p> required <code>user</code> <code>str</code> <p>username. Defaults to None.</p> <code>None</code> <code>user_is_guest</code> <code>bool | None</code> <p>guest flag (true if guest). Defaults to None.</p> <code>None</code> <code>user_is_admin</code> <code>bool | None</code> <p>admin flag (true if admin). Defaults to None.</p> <code>None</code> <code>logout_on_success</code> <code>bool</code> <p>set to true to force logout once the new password is set. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>true if successful, false otherwise.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def backend_submit_password(\n    self,\n    gi: gui.GraphicInterface | gui.BackendInterface,\n    user: str = None,\n    user_is_guest: bool | None = None,\n    user_is_admin: bool | None = None,\n    logout_on_success: bool = False,\n) -&gt; bool:\n    \"\"\"Submit password to database from backend but used also from frontend as part of `submit_password` function.\n\n    Args:\n        gi (gui.GraphicInterface | gui.BackendInterface): graphic interface object (used to interact with Panel widgets).\n        user (str, optional): username. Defaults to None.\n        user_is_guest (bool | None, optional): guest flag (true if guest). Defaults to None.\n        user_is_admin (bool | None, optional): admin flag (true if admin). Defaults to None.\n        logout_on_success (bool, optional): set to true to force logout once the new password is set. Defaults to False.\n\n    Returns:\n        bool: true if successful, false otherwise.\n    \"\"\"\n    # Check if user is passed, otherwise check if backend widget\n    # (password_widget.object.user) is available\n    if not user:\n        username = gi.password_widget._widgets[\"user\"].value_input\n    else:\n        username = user\n    # Get all passwords, updated at each key press\n    new_password_key_press = gi.password_widget._widgets[\n        \"new_password\"\n    ].value_input\n    repeat_new_password_key_press = gi.password_widget._widgets[\n        \"repeat_new_password\"\n    ].value_input\n    # Check if new password match repeat password\n    if username:\n        if new_password_key_press == repeat_new_password_key_press:\n            # Check if new password is valid with regex\n            if re.fullmatch(\n                self.config.basic_auth.psw_regex,\n                new_password_key_press,\n            ):\n                auth_user = AuthUser(\n                    config=self.config, auth_context=self, name=username\n                )\n                # If is_guest and is_admin are None (not passed) use the ones\n                # already set for the user\n                if user_is_guest is None:\n                    user_is_guest = auth_user.is_guest(\n                        allow_override=False\n                    )\n                if user_is_admin is None:\n                    user_is_admin = auth_user.is_admin()\n                # First remove user from both 'privileged_users' and\n                # 'credentials' tables.\n                deleted_data = auth_user.remove_user()\n                if (deleted_data[\"privileged_users_deleted\"] &gt; 0) or (\n                    deleted_data[\"credentials_deleted\"] &gt; 0\n                ):\n                    pn.state.notifications.success(\n                        f\"Removed old data for&lt;br&gt;'{username}'&lt;br&gt;auth: {deleted_data['privileged_users_deleted']}&lt;br&gt;cred: {deleted_data['credentials_deleted']}\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                else:\n                    pn.state.notifications.warning(\n                        f\"Creating new user&lt;br&gt;'{username}' does not exist\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                # Add a privileged users only if guest option is not active\n                if not user_is_guest:\n                    auth_user.add_privileged_user(is_admin=user_is_admin)\n                # Green light: update the password!\n                auth_user.add_user_hashed_password(\n                    password=new_password_key_press\n                )\n\n                # Logout if requested\n                if logout_on_success:\n                    pn.state.notifications.success(\n                        \"Password updated&lt;br&gt;Logging out\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    sleep(4)\n                    gi.force_logout()\n                else:\n                    pn.state.notifications.success(\n                        \"Password updated\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                return True\n            else:\n                pn.state.notifications.error(\n                    \"Password requirements not satisfied&lt;br&gt;Check again!\",\n                    duration=self.config.panel.notifications.duration,\n                )\n        else:\n            pn.state.notifications.error(\n                \"Passwords are different!\",\n                duration=self.config.panel.notifications.duration,\n            )\n    else:\n        pn.state.notifications.error(\n            \"Missing user!\",\n            duration=self.config.panel.notifications.duration,\n        )\n\n    return False\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.generate_password","title":"generate_password  <code>staticmethod</code>","text":"<pre><code>generate_password(\n    alphabet: str | None = None,\n    special_chars: str | None = \"\",\n    length: int = 12,\n) -&gt; str\n</code></pre> <p>Generate a random password.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>str | None</code> <p>list of characters to use as alphabet to generate the password. Defaults to None.</p> <code>None</code> <code>special_chars</code> <code>str | None</code> <p>special characters to include inside the password string. Defaults to \"\".</p> <code>''</code> <code>length</code> <code>int</code> <p>length of the random password. Defaults to 12.</p> <code>12</code> <p>Returns:</p> Type Description <code>str</code> <p>random password.</p> Source code in <code>dlunch/auth.py</code> <pre><code>@staticmethod\ndef generate_password(\n    alphabet: str | None = None,\n    special_chars: str | None = \"\",\n    length: int = 12,\n) -&gt; str:\n    \"\"\"Generate a random password.\n\n    Args:\n        alphabet (str | None, optional): list of characters to use as alphabet to generate the password.\n            Defaults to None.\n        special_chars (str | None, optional): special characters to include inside the password string.\n            Defaults to \"\".\n        length (int, optional): length of the random password.\n            Defaults to 12.\n\n    Returns:\n        str: random password.\n    \"\"\"\n    # If alphabet is not avilable use a default one\n    if alphabet is None:\n        alphabet = string.ascii_letters + string.digits + special_chars\n    # Infinite loop for finding a valid password\n    while True:\n        password = \"\".join(secrets.choice(alphabet) for i in range(length))\n        # Create special chars condition only if special chars is non-empty\n        if special_chars:\n            special_chars_condition = any(\n                c in special_chars for c in password\n            )\n        else:\n            special_chars_condition = True\n        if (\n            any(c.islower() for c in password)\n            and any(c.isupper() for c in password)\n            and any(c.isdigit() for c in password)\n            and special_chars_condition\n        ):\n            break\n    return password\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.is_auth_active","title":"is_auth_active","text":"<pre><code>is_auth_active() -&gt; bool\n</code></pre> <p>Check configuration object and return <code>True</code> if basic authentication or OAuth is active. Return <code>False</code> otherwise.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if authentication (basic or OAuth) is active, <code>False</code> otherwise.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def is_auth_active(self) -&gt; bool:\n    \"\"\"Check configuration object and return `True` if basic authentication or OAuth is active.\n    Return `False` otherwise.\n\n    Returns:\n        bool: `True` if authentication (basic or OAuth) is active, `False` otherwise.\n    \"\"\"\n    # Check if a valid oauth key exists\n    auth_provider = self.is_basic_auth_active()\n    oauth_provider = (\n        self.config.server.get(\"oauth_provider\", None) is not None\n    )\n    return auth_provider or oauth_provider\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.is_basic_auth_active","title":"is_basic_auth_active","text":"<pre><code>is_basic_auth_active() -&gt; bool\n</code></pre> <p>Check configuration object and return <code>True</code> if basic authentication is active. Return <code>False</code> otherwise.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if basic authentication is active, <code>False</code> otherwise.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def is_basic_auth_active(self) -&gt; bool:\n    \"\"\"Check configuration object and return `True` if basic authentication is active.\n    Return `False` otherwise.\n\n    Returns:\n        bool: `True` if basic authentication is active, `False` otherwise.\n    \"\"\"\n    # Check if a valid basic_auth key exists\n    auth_provider = self.config.get(\"basic_auth\", None)\n    return auth_provider is not None\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.list_privileged_users","title":"list_privileged_users","text":"<pre><code>list_privileged_users() -&gt; list[str]\n</code></pre> <p>List only privileged users (from <code>privileged_users</code> table).</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list of usernames.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def list_privileged_users(self) -&gt; list[str]:\n    \"\"\"List only privileged users (from `privileged_users` table).\n\n    Returns:\n        list[str]: list of usernames.\n    \"\"\"\n    session = self.database_connector.create_session()\n\n    with session:\n        privileged_users = session.scalars(\n            select(models.PrivilegedUsers)\n        ).all()\n\n    # Return users\n    users_list = [u.user for u in privileged_users]\n    users_list.sort()\n\n    return users_list\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.list_users_guests_and_privileges","title":"list_users_guests_and_privileges","text":"<pre><code>list_users_guests_and_privileges() -&gt; DataFrame\n</code></pre> <p>Join <code>privileged_users</code> and <code>credentials</code> tables to list normal users, admins and guests.</p> <p>Returns a dataframe.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>dataframe with users and privileges.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def list_users_guests_and_privileges(self) -&gt; pd.DataFrame:\n    \"\"\"Join `privileged_users` and `credentials` tables to list normal users,\n    admins and guests.\n\n    Returns a dataframe.\n\n    Returns:\n        pd.DataFrame: dataframe with users and privileges.\n    \"\"\"\n\n    # Query tables required to understand users and guests\n    df_privileged_users = models.PrivilegedUsers.read_as_df(\n        config=self.config,\n        index_col=\"user\",\n    )\n    # Leave credentials table empty if basic auth is not active\n    if self.is_basic_auth_active():\n        df_credentials = models.Credentials.read_as_df(\n            config=self.config,\n            index_col=\"user\",\n        )\n    else:\n        df_credentials = pd.DataFrame()\n\n    # Change admin column to privileges (used after join)\n    df_privileged_users[\"group\"] = df_privileged_users.admin.map(\n        {True: \"admin\", False: \"user\"}\n    )\n    df_user_guests_privileges = df_privileged_users.join(\n        df_credentials, how=\"outer\"\n    )[[\"group\"]]\n    df_user_guests_privileges = df_user_guests_privileges.fillna(\"guest\")\n\n    return df_user_guests_privileges\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.set_app_auth_and_encryption","title":"set_app_auth_and_encryption","text":"<pre><code>set_app_auth_and_encryption() -&gt; None\n</code></pre> <p>Setup Panel authorization and encryption.</p> Namely <ul> <li>Encryption key</li> <li>Cookie expiry date</li> </ul> <p>Raises:</p> Type Description <code>ImportError</code> <p>missing library (cryptography).</p> Source code in <code>dlunch/auth.py</code> <pre><code>def set_app_auth_and_encryption(self) -&gt; None:\n    \"\"\"Setup Panel authorization and encryption.\n\n    Namely:\n        - Encryption key\n        - Cookie expiry date\n\n    Raises:\n        ImportError: missing library (cryptography).\n    \"\"\"\n    # Encryption key\n    try:\n        if self.config.auth.oauth_encryption_key:\n            pn.config.oauth_encryption_key = (\n                self.config.auth.oauth_encryption_key.encode(\"ascii\")\n            )\n            pn.state.encryption = Fernet(pn.config.oauth_encryption_key)\n    except ConfigAttributeError:\n        log.warning(\n            \"missing authentication encryption key, generate a key with the `panel oauth-secret` CLI command and then provide it to hydra using the DATA_LUNCH_OAUTH_ENC_KEY environment variable\"\n        )\n    # Cookie expiry date\n    try:\n        if self.config.auth.oauth_expiry:\n            pn.config.oauth_expiry = self.config.auth.oauth_expiry\n    except ConfigAttributeError:\n        log.warning(\n            \"missing explicit authentication expiry date for cookies, defaults to 1 day\"\n        )\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.set_guest_user_password","title":"set_guest_user_password","text":"<pre><code>set_guest_user_password() -&gt; str\n</code></pre> <p>If guest user is active return a password, otherwise return an empty string.</p> <p>This function always returns an empty string if basic authentication is not active.</p> <p>Guest user and basic authentication are handled through configuration files.</p> <p>If the flag <code>reset_guest_user_password</code> is set to <code>True</code> the password is created and uploaded to database. Otherwise the existing password is queried from database <code>credentials</code> table.</p> <p>Returns:</p> Type Description <code>str</code> <p>guest user password or empty string if basic authentication is not active.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def set_guest_user_password(self) -&gt; str:\n    \"\"\"If guest user is active return a password, otherwise return an empty string.\n\n    This function always returns an empty string if basic authentication is not active.\n\n    Guest user and basic authentication are handled through configuration files.\n\n    If the flag `reset_guest_user_password` is set to `True` the password is created\n    and uploaded to database. Otherwise the existing password is queried from database\n    `credentials` table.\n\n    Returns:\n        str: guest user password or empty string if basic authentication is not active.\n    \"\"\"\n    # Check if basic auth is active\n    if self.is_basic_auth_active():\n        # If active basic_auth.guest_user is true if guest user is active\n        is_guest_user_active = self.config.basic_auth.guest_user\n        log.debug(f\"guest user flag is {is_guest_user_active}\")\n    else:\n        # Otherwise the guest user feature is not applicable\n        is_guest_user_active = False\n        log.debug(\"guest user not applicable\")\n\n    # Set the guest password variable\n    if is_guest_user_active:\n        # If flag for resetting the password does not exist use the default\n        # value\n        if (\n            self.database_connector.get_flag(\n                id=\"reset_guest_user_password\"\n            )\n            is None\n        ):\n            self.database_connector.set_flag(\n                id=\"reset_guest_user_password\",\n                value=self.config.basic_auth.default_reset_guest_user_password_flag,\n            )\n        # Generate a random password only if requested (check on flag)\n        # otherwise load from database\n        if self.database_connector.get_flag(\n            id=\"reset_guest_user_password\"\n        ):\n            # Turn off reset user password (in order to reset it only once)\n            # This statement also acquire a lock on database (so it is\n            # called first)\n            self.database_connector.set_flag(\n                id=\"reset_guest_user_password\",\n                value=False,\n            )\n            # Create password\n            guest_password = self.generate_password(\n                special_chars=self.config.basic_auth.psw_special_chars,\n                length=self.config.basic_auth.generated_psw_length,\n            )\n            # Add hashed password to database\n            AuthUser(\n                config=self.config, auth_context=self, name=\"guest\"\n            ).add_user_hashed_password(guest_password)\n        else:\n            # Load from database\n            session = self.database_connector.create_session()\n            with session:\n                try:\n                    guest_password = session.get(\n                        models.Credentials, \"guest\"\n                    ).password_encrypted.decrypt()\n                except InvalidToken:\n                    # Notify exception and suggest to reset guest user password\n                    guest_password = \"\"\n                    log.warning(\n                        \"Unable to decrypt 'guest' user password because an invalid token has been detected: reset password from backend\"\n                    )\n                    pn.state.notifications.warning(\n                        \"Unable to decrypt 'guest' user password&lt;br&gt;Invalid token detected: reset password from backend\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n    else:\n        guest_password = \"\"\n\n    return guest_password\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthContext.submit_password","title":"submit_password","text":"<pre><code>submit_password(gi: GraphicInterface) -&gt; bool\n</code></pre> <p>Same as backend_submit_password with an additional check on old password.</p> <p>Parameters:</p> Name Type Description Default <code>gi</code> <code>GraphicInterface</code> <p>graphic interface object (used to interact with Panel widgets).</p> required <p>Returns:</p> Type Description <code>bool</code> <p>true if successful, false otherwise.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def submit_password(self, gi: gui.GraphicInterface) -&gt; bool:\n    \"\"\"Same as backend_submit_password with an additional check on old password.\n\n    Args:\n        gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n\n    Returns:\n        bool: true if successful, false otherwise.\n    \"\"\"\n    # Get authenticated user from Panel state\n    auth_user = AuthUser(config=self.config, auth_context=self)\n    # Get username, updated updated at each key press\n    old_password_key_press = gi.password_widget._widgets[\n        \"old_password\"\n    ].value_input\n    # Check if old password is correct\n    if auth_user.password_hash == old_password_key_press:\n        # Then run the same checks used for backend\n        return self.backend_submit_password(\n            gi=gi, user=auth_user.name, logout_on_success=True\n        )\n    else:\n        pn.state.notifications.error(\n            \"Incorrect old password!\",\n            duration=self.config.panel.notifications.duration,\n        )\n    return False\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser","title":"AuthUser","text":"<p>Class to handle user authentication and management.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <code>name</code> <code>str | None</code> <p>username. Defaults to None.</p> <code>None</code> <code>auth_context</code> <code>AuthContext | None</code> <p>authentication context. Defaults to None.</p> <code>None</code> <p>Methods:</p> Name Description <code>__init__</code> <code>add_privileged_user</code> <p>Add user id to <code>privileged_users</code> table.</p> <code>add_user_hashed_password</code> <p>Add user credentials to <code>credentials</code> table.</p> <code>get_user_from_panel_state</code> <p>Return the user from Panel state object.</p> <code>is_admin</code> <p>Check if a user is an admin by checking the <code>privileged_users</code> table.</p> <code>is_guest</code> <p>Check if a user is a guest by checking if it is listed inside the <code>privileged_users</code> table.</p> <code>remove_user</code> <p>Remove user from the database.</p> <p>Attributes:</p> Name Type Description <code>auth_context</code> <code>config</code> <code>name</code> <code>password_hash</code> <code>PasswordHash | None</code> <p>Query the database to retrieve the hashed password for the user.</p> Source code in <code>dlunch/auth.py</code> <pre><code>class AuthUser:\n    \"\"\"Class to handle user authentication and management.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n        name (str | None, optional): username. Defaults to None.\n        auth_context (AuthContext | None, optional): authentication context. Defaults to None.\n    \"\"\"\n\n    def __init__(\n        self,\n        config: DictConfig,\n        name: str | None = None,\n        auth_context: AuthContext | None = None,\n    ) -&gt; None:\n        self.config = config\n        self.auth_context = auth_context or AuthContext(config)\n        # Take username from Panel state if not provided\n        self.name = name or self.get_user_from_panel_state()\n\n    def get_user_from_panel_state(self) -&gt; str:\n        \"\"\"Return the user from Panel state object.\n\n        If `config.auth.remove_email_domain` is `True`, remove the email domain from username.\n\n        Returns:\n            str: username.\n        \"\"\"\n        user = pn.state.user\n        # Check if username is an email\n        if user and re.fullmatch(r\"[^@]+@[^@]+\\.[^@]+\", user):\n            # Remove domain from username\n            if self.config.auth.remove_email_domain:\n                user = user.split(\"@\")[0]\n        return user\n\n    def is_guest(self, allow_override: bool = True) -&gt; bool:\n        \"\"\"Check if a user is a guest by checking if it is listed inside the `privileged_users` table.\n\n        Args:\n            allow_override (bool, optional): override enablement flag. Defaults to True.\n\n        Returns:\n            bool: guest flag. `True` if the user is a guest.\n        \"\"\"\n        # If authorization is not active always return false (user is not guest)\n        if not self.auth_context.is_auth_active():\n            return False\n\n        # Load guest override from flag table (if the button is pressed its value\n        # is True). If not available use False.\n        guest_override = self.auth_context.database_connector.get_flag(\n            id=f\"{self.name}_guest_override\",\n            value_if_missing=False,\n        )\n\n        # If guest override is active always return true (user act like guest)\n        if guest_override and allow_override:\n            return True\n\n        # Otherwise check if user is not included in privileged users\n        privileged_users = self.auth_context.list_privileged_users()\n\n        return self.name not in privileged_users\n\n    def is_admin(self) -&gt; bool:\n        \"\"\"Check if a user is an admin by checking the `privileged_users` table.\n\n        Returns:\n            bool: admin flag. `True` if the user is an admin.\n        \"\"\"\n        # If authorization is not active always return false (ther is no admin)\n        if not self.auth_context.is_auth_active():\n            return False\n        session = self.auth_context.database_connector.create_session()\n        with session:\n            admin_users = session.scalars(\n                select(models.PrivilegedUsers).where(\n                    models.PrivilegedUsers.admin == sql_true()\n                )\n            ).all()\n\n        return self.name in [u.user for u in admin_users]\n\n    @property\n    def password_hash(self) -&gt; PasswordHash | None:\n        \"\"\"Query the database to retrieve the hashed password for the user.\n\n        Returns:\n            PasswordHash | None: returns password object if the user exists, `None` otherwise.\n        \"\"\"\n        session = self.auth_context.database_connector.create_session()\n        # Get the hashed password if user exists\n        with session:\n            user_credential = session.get(models.Credentials, self.name)\n        return user_credential.password_hash if user_credential else None\n\n    def add_privileged_user(self, is_admin: bool) -&gt; None:\n        \"\"\"Add user id to `privileged_users` table.\n\n        Args:\n            is_admin (bool): admin flag.\n        \"\"\"\n        session = self.auth_context.database_connector.create_session()\n        # New credentials\n        new_privileged_user = models.PrivilegedUsers(\n            user=self.name, admin=is_admin\n        )\n        # Update credentials\n        # Use an upsert for postgresql, a simple session add otherwise\n        models.DatabaseConnector.session_add_with_upsert(\n            session=session,\n            constraint=\"privileged_users_pkey\",\n            new_record=new_privileged_user,\n        )\n        session.commit()\n\n    def add_user_hashed_password(self, password: str) -&gt; None:\n        \"\"\"Add user credentials to `credentials` table.\n\n        Args:\n            password (str): plain password (not hashed).\n        \"\"\"\n        session = self.auth_context.database_connector.create_session()\n        # New credentials\n        # For the user named \"guest\" add also the encrypted password so that panel\n        # can show the decrypted guest password to logged users\n        # Can't use is_guest to determine the user that need encription, because\n        # only the user named guest is shown in the guest user password widget\n        if self.name == \"guest\":\n            new_user_credential = models.Credentials(\n                user=self.name,\n                password_hash=password,\n                password_encrypted=password,\n            )\n        else:\n            new_user_credential = models.Credentials(\n                user=self.name, password_hash=password\n            )\n        # Update credentials\n        # Use an upsert for postgresql, a simple session add otherwise\n        models.DatabaseConnector.session_add_with_upsert(\n            session=session,\n            constraint=\"credentials_pkey\",\n            new_record=new_user_credential,\n        )\n        session.commit()\n\n    def remove_user(self) -&gt; dict:\n        \"\"\"Remove user from the database.\n\n        Returns:\n            dict: dictionary with `privileged_users_deleted` and `credentials_deleted`\n                with deleted rows from each table.\n        \"\"\"\n        session = self.auth_context.database_connector.create_session()\n\n        with session:\n            # Delete user from privileged_users table\n            privileged_users_deleted = session.execute(\n                delete(models.PrivilegedUsers).where(\n                    models.PrivilegedUsers.user == self.name\n                )\n            )\n            session.commit()\n\n            # Delete user from credentials table\n            credentials_deleted = session.execute(\n                delete(models.Credentials).where(\n                    models.Credentials.user == self.name\n                )\n            )\n            session.commit()\n\n        return {\n            \"privileged_users_deleted\": privileged_users_deleted.rowcount,\n            \"credentials_deleted\": credentials_deleted.rowcount,\n        }\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.auth_context","title":"auth_context  <code>instance-attribute</code>","text":"<pre><code>auth_context = auth_context or AuthContext(config)\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name or get_user_from_panel_state()\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.password_hash","title":"password_hash  <code>property</code>","text":"<pre><code>password_hash: PasswordHash | None\n</code></pre> <p>Query the database to retrieve the hashed password for the user.</p> <p>Returns:</p> Type Description <code>PasswordHash | None</code> <p>returns password object if the user exists, <code>None</code> otherwise.</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.__init__","title":"__init__","text":"<pre><code>__init__(\n    config: DictConfig,\n    name: str | None = None,\n    auth_context: AuthContext | None = None,\n) -&gt; None\n</code></pre> Source code in <code>dlunch/auth.py</code> <pre><code>def __init__(\n    self,\n    config: DictConfig,\n    name: str | None = None,\n    auth_context: AuthContext | None = None,\n) -&gt; None:\n    self.config = config\n    self.auth_context = auth_context or AuthContext(config)\n    # Take username from Panel state if not provided\n    self.name = name or self.get_user_from_panel_state()\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.add_privileged_user","title":"add_privileged_user","text":"<pre><code>add_privileged_user(is_admin: bool) -&gt; None\n</code></pre> <p>Add user id to <code>privileged_users</code> table.</p> <p>Parameters:</p> Name Type Description Default <code>is_admin</code> <code>bool</code> <p>admin flag.</p> required Source code in <code>dlunch/auth.py</code> <pre><code>def add_privileged_user(self, is_admin: bool) -&gt; None:\n    \"\"\"Add user id to `privileged_users` table.\n\n    Args:\n        is_admin (bool): admin flag.\n    \"\"\"\n    session = self.auth_context.database_connector.create_session()\n    # New credentials\n    new_privileged_user = models.PrivilegedUsers(\n        user=self.name, admin=is_admin\n    )\n    # Update credentials\n    # Use an upsert for postgresql, a simple session add otherwise\n    models.DatabaseConnector.session_add_with_upsert(\n        session=session,\n        constraint=\"privileged_users_pkey\",\n        new_record=new_privileged_user,\n    )\n    session.commit()\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.add_user_hashed_password","title":"add_user_hashed_password","text":"<pre><code>add_user_hashed_password(password: str) -&gt; None\n</code></pre> <p>Add user credentials to <code>credentials</code> table.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>plain password (not hashed).</p> required Source code in <code>dlunch/auth.py</code> <pre><code>def add_user_hashed_password(self, password: str) -&gt; None:\n    \"\"\"Add user credentials to `credentials` table.\n\n    Args:\n        password (str): plain password (not hashed).\n    \"\"\"\n    session = self.auth_context.database_connector.create_session()\n    # New credentials\n    # For the user named \"guest\" add also the encrypted password so that panel\n    # can show the decrypted guest password to logged users\n    # Can't use is_guest to determine the user that need encription, because\n    # only the user named guest is shown in the guest user password widget\n    if self.name == \"guest\":\n        new_user_credential = models.Credentials(\n            user=self.name,\n            password_hash=password,\n            password_encrypted=password,\n        )\n    else:\n        new_user_credential = models.Credentials(\n            user=self.name, password_hash=password\n        )\n    # Update credentials\n    # Use an upsert for postgresql, a simple session add otherwise\n    models.DatabaseConnector.session_add_with_upsert(\n        session=session,\n        constraint=\"credentials_pkey\",\n        new_record=new_user_credential,\n    )\n    session.commit()\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.get_user_from_panel_state","title":"get_user_from_panel_state","text":"<pre><code>get_user_from_panel_state() -&gt; str\n</code></pre> <p>Return the user from Panel state object.</p> <p>If <code>config.auth.remove_email_domain</code> is <code>True</code>, remove the email domain from username.</p> <p>Returns:</p> Type Description <code>str</code> <p>username.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def get_user_from_panel_state(self) -&gt; str:\n    \"\"\"Return the user from Panel state object.\n\n    If `config.auth.remove_email_domain` is `True`, remove the email domain from username.\n\n    Returns:\n        str: username.\n    \"\"\"\n    user = pn.state.user\n    # Check if username is an email\n    if user and re.fullmatch(r\"[^@]+@[^@]+\\.[^@]+\", user):\n        # Remove domain from username\n        if self.config.auth.remove_email_domain:\n            user = user.split(\"@\")[0]\n    return user\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.is_admin","title":"is_admin","text":"<pre><code>is_admin() -&gt; bool\n</code></pre> <p>Check if a user is an admin by checking the <code>privileged_users</code> table.</p> <p>Returns:</p> Type Description <code>bool</code> <p>admin flag. <code>True</code> if the user is an admin.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def is_admin(self) -&gt; bool:\n    \"\"\"Check if a user is an admin by checking the `privileged_users` table.\n\n    Returns:\n        bool: admin flag. `True` if the user is an admin.\n    \"\"\"\n    # If authorization is not active always return false (ther is no admin)\n    if not self.auth_context.is_auth_active():\n        return False\n    session = self.auth_context.database_connector.create_session()\n    with session:\n        admin_users = session.scalars(\n            select(models.PrivilegedUsers).where(\n                models.PrivilegedUsers.admin == sql_true()\n            )\n        ).all()\n\n    return self.name in [u.user for u in admin_users]\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.is_guest","title":"is_guest","text":"<pre><code>is_guest(allow_override: bool = True) -&gt; bool\n</code></pre> <p>Check if a user is a guest by checking if it is listed inside the <code>privileged_users</code> table.</p> <p>Parameters:</p> Name Type Description Default <code>allow_override</code> <code>bool</code> <p>override enablement flag. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>guest flag. <code>True</code> if the user is a guest.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def is_guest(self, allow_override: bool = True) -&gt; bool:\n    \"\"\"Check if a user is a guest by checking if it is listed inside the `privileged_users` table.\n\n    Args:\n        allow_override (bool, optional): override enablement flag. Defaults to True.\n\n    Returns:\n        bool: guest flag. `True` if the user is a guest.\n    \"\"\"\n    # If authorization is not active always return false (user is not guest)\n    if not self.auth_context.is_auth_active():\n        return False\n\n    # Load guest override from flag table (if the button is pressed its value\n    # is True). If not available use False.\n    guest_override = self.auth_context.database_connector.get_flag(\n        id=f\"{self.name}_guest_override\",\n        value_if_missing=False,\n    )\n\n    # If guest override is active always return true (user act like guest)\n    if guest_override and allow_override:\n        return True\n\n    # Otherwise check if user is not included in privileged users\n    privileged_users = self.auth_context.list_privileged_users()\n\n    return self.name not in privileged_users\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.AuthUser.remove_user","title":"remove_user","text":"<pre><code>remove_user() -&gt; dict\n</code></pre> <p>Remove user from the database.</p> <p>Returns:</p> Type Description <code>dict</code> <p>dictionary with <code>privileged_users_deleted</code> and <code>credentials_deleted</code> with deleted rows from each table.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def remove_user(self) -&gt; dict:\n    \"\"\"Remove user from the database.\n\n    Returns:\n        dict: dictionary with `privileged_users_deleted` and `credentials_deleted`\n            with deleted rows from each table.\n    \"\"\"\n    session = self.auth_context.database_connector.create_session()\n\n    with session:\n        # Delete user from privileged_users table\n        privileged_users_deleted = session.execute(\n            delete(models.PrivilegedUsers).where(\n                models.PrivilegedUsers.user == self.name\n            )\n        )\n        session.commit()\n\n        # Delete user from credentials table\n        credentials_deleted = session.execute(\n            delete(models.Credentials).where(\n                models.Credentials.user == self.name\n            )\n        )\n        session.commit()\n\n    return {\n        \"privileged_users_deleted\": privileged_users_deleted.rowcount,\n        \"credentials_deleted\": credentials_deleted.rowcount,\n    }\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchLoginHandler","title":"DataLunchLoginHandler","text":"<p>               Bases: <code>RequestHandler</code></p> <p>Custom Panel login Handler.</p> <p>This class run the user authentication process for Data-Lunch when basic authentication is selected in configuration options.</p> <p>It is responsible of rendering the login page, validate the user (and update its password hash if the hashing protocol is superseeded) and set the current user once validated.</p> <p>Methods:</p> Name Description <code>check_permission</code> <p>Validate user.</p> <code>get</code> <p>Render the login template.</p> <code>post</code> <p>Validate user and set the current user if valid.</p> <code>set_current_user</code> <p>Set secure cookie for the selected user.</p> Source code in <code>dlunch/auth.py</code> <pre><code>class DataLunchLoginHandler(RequestHandler):\n    \"\"\"Custom Panel login Handler.\n\n    This class run the user authentication process for Data-Lunch when basic authentication\n    is selected in configuration options.\n\n    It is responsible of rendering the login page, validate the user (and update its\n    password hash if the hashing protocol is superseeded) and set the current user once validated.\n    \"\"\"\n\n    def get(self) -&gt; None:\n        \"\"\"Render the login template.\"\"\"\n        try:\n            errormessage = self.get_argument(\"error\")\n        except Exception:\n            errormessage = \"\"\n        html = self._login_template.render(errormessage=errormessage)\n        self.write(html)\n\n    def check_permission(self, user: str, password: str) -&gt; bool:\n        \"\"\"Validate user.\n\n        Automatically update the password hash if it was generated by an old hashing protocol.\n\n        Args:\n            user (str): username.\n            password (str): password (not hashed).\n\n        Returns:\n            bool: user authentication flag (`True` if authenticated)\n        \"\"\"\n        auth_user = AuthUser(config=self.config, name=user)\n        password_hash = auth_user.password_hash\n        if auth_user.password_hash == password:\n            # Check if hash needs update\n            valid, new_hash = password_hash.verify_and_update(password)\n            if valid and new_hash:\n                # Update to new hash\n                auth_user.add_user_hashed_password(password)\n            # Return the OK value\n            return True\n        # Return the NOT OK value\n        return False\n\n    def post(self) -&gt; None:\n        \"\"\"Validate user and set the current user if valid.\"\"\"\n        username = self.get_argument(\"username\", \"\")\n        password = self.get_argument(\"password\", \"\")\n        auth = self.check_permission(username, password)\n        if auth:\n            self.set_current_user(username)\n            self.redirect(\"/\")\n        else:\n            error_msg = \"?error=\" + tornado.escape.url_escape(\n                \"Login incorrect\"\n            )\n            self.redirect(\"/login\" + error_msg)\n\n    def set_current_user(self, user: str):\n        \"\"\"Set secure cookie for the selected user.\n\n        Args:\n            user (str): username.\n        \"\"\"\n        if not user:\n            self.clear_cookie(\"user\")\n            return\n        self.set_secure_cookie(\n            \"user\",\n            user,\n            expires_days=pn.config.oauth_expiry,\n            **self.config.auth.cookie_kwargs,\n        )\n        id_token = base64url_encode(json.dumps({\"user\": user}))\n        if pn.state.encryption:\n            id_token = pn.state.encryption.encrypt(id_token.encode(\"utf-8\"))\n        self.set_secure_cookie(\n            \"id_token\",\n            id_token,\n            expires_days=pn.config.oauth_expiry,\n            **self.config.auth.cookie_kwargs,\n        )\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchLoginHandler.check_permission","title":"check_permission","text":"<pre><code>check_permission(user: str, password: str) -&gt; bool\n</code></pre> <p>Validate user.</p> <p>Automatically update the password hash if it was generated by an old hashing protocol.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>str</code> <p>username.</p> required <code>password</code> <code>str</code> <p>password (not hashed).</p> required <p>Returns:</p> Type Description <code>bool</code> <p>user authentication flag (<code>True</code> if authenticated)</p> Source code in <code>dlunch/auth.py</code> <pre><code>def check_permission(self, user: str, password: str) -&gt; bool:\n    \"\"\"Validate user.\n\n    Automatically update the password hash if it was generated by an old hashing protocol.\n\n    Args:\n        user (str): username.\n        password (str): password (not hashed).\n\n    Returns:\n        bool: user authentication flag (`True` if authenticated)\n    \"\"\"\n    auth_user = AuthUser(config=self.config, name=user)\n    password_hash = auth_user.password_hash\n    if auth_user.password_hash == password:\n        # Check if hash needs update\n        valid, new_hash = password_hash.verify_and_update(password)\n        if valid and new_hash:\n            # Update to new hash\n            auth_user.add_user_hashed_password(password)\n        # Return the OK value\n        return True\n    # Return the NOT OK value\n    return False\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchLoginHandler.get","title":"get","text":"<pre><code>get() -&gt; None\n</code></pre> <p>Render the login template.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def get(self) -&gt; None:\n    \"\"\"Render the login template.\"\"\"\n    try:\n        errormessage = self.get_argument(\"error\")\n    except Exception:\n        errormessage = \"\"\n    html = self._login_template.render(errormessage=errormessage)\n    self.write(html)\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchLoginHandler.post","title":"post","text":"<pre><code>post() -&gt; None\n</code></pre> <p>Validate user and set the current user if valid.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def post(self) -&gt; None:\n    \"\"\"Validate user and set the current user if valid.\"\"\"\n    username = self.get_argument(\"username\", \"\")\n    password = self.get_argument(\"password\", \"\")\n    auth = self.check_permission(username, password)\n    if auth:\n        self.set_current_user(username)\n        self.redirect(\"/\")\n    else:\n        error_msg = \"?error=\" + tornado.escape.url_escape(\n            \"Login incorrect\"\n        )\n        self.redirect(\"/login\" + error_msg)\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchLoginHandler.set_current_user","title":"set_current_user","text":"<pre><code>set_current_user(user: str)\n</code></pre> <p>Set secure cookie for the selected user.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>str</code> <p>username.</p> required Source code in <code>dlunch/auth.py</code> <pre><code>def set_current_user(self, user: str):\n    \"\"\"Set secure cookie for the selected user.\n\n    Args:\n        user (str): username.\n    \"\"\"\n    if not user:\n        self.clear_cookie(\"user\")\n        return\n    self.set_secure_cookie(\n        \"user\",\n        user,\n        expires_days=pn.config.oauth_expiry,\n        **self.config.auth.cookie_kwargs,\n    )\n    id_token = base64url_encode(json.dumps({\"user\": user}))\n    if pn.state.encryption:\n        id_token = pn.state.encryption.encrypt(id_token.encode(\"utf-8\"))\n    self.set_secure_cookie(\n        \"id_token\",\n        id_token,\n        expires_days=pn.config.oauth_expiry,\n        **self.config.auth.cookie_kwargs,\n    )\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchProvider","title":"DataLunchProvider","text":"<p>               Bases: <code>OAuthProvider</code></p> <p>Custom Panel auth provider.</p> <p>It's a simple login page with a form that interacts with authentication tables.</p> <p>It is used only if basic authentication is selected in Data-Lunch configuration options.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <code>login_template</code> <code>str | None</code> <p>path to login template. Defaults to None.</p> <code>None</code> <code>logout_template</code> <code>str | None</code> <p>path to logout template. Defaults to None.</p> <code>None</code> <p>Methods:</p> Name Description <code>__init__</code> <p>Attributes:</p> Name Type Description <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> <code>login_handler</code> <code>DataLunchLoginHandler</code> <p>Data-Lunch custom login handler.</p> <code>login_url</code> <code>str</code> <p>Login url (<code>/login</code>).</p> Source code in <code>dlunch/auth.py</code> <pre><code>class DataLunchProvider(OAuthProvider):\n    \"\"\"Custom Panel auth provider.\n\n    It's a simple login page with a form that interacts with authentication tables.\n\n    It is used only if basic authentication is selected in Data-Lunch configuration options.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n        login_template (str | None, optional): path to login template. Defaults to None.\n        logout_template (str | None, optional): path to logout template. Defaults to None.\n    \"\"\"\n\n    def __init__(\n        self,\n        config: DictConfig,\n        login_template: str | None = None,\n        logout_template: str | None = None,\n    ) -&gt; None:\n        # Set Hydra config info\n        self.config: DictConfig = config\n        \"\"\"Hydra configuration dictionary.\"\"\"\n\n        super().__init__(\n            login_template=login_template, logout_template=logout_template\n        )\n\n    @property\n    def login_url(self) -&gt; str:\n        \"\"\"Login url (`/login`).\"\"\"\n        return \"/login\"\n\n    @property\n    def login_handler(self) -&gt; DataLunchLoginHandler:\n        \"\"\"Data-Lunch custom login handler.\"\"\"\n        # Set basic template\n        DataLunchLoginHandler._login_template = self._login_template\n        # Set Hydra config info\n        DataLunchLoginHandler.config = self.config\n\n        return DataLunchLoginHandler\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchProvider.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config: DictConfig = config\n</code></pre> <p>Hydra configuration dictionary.</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchProvider.login_handler","title":"login_handler  <code>property</code>","text":"<pre><code>login_handler: DataLunchLoginHandler\n</code></pre> <p>Data-Lunch custom login handler.</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchProvider.login_url","title":"login_url  <code>property</code>","text":"<pre><code>login_url: str\n</code></pre> <p>Login url (<code>/login</code>).</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.DataLunchProvider.__init__","title":"__init__","text":"<pre><code>__init__(\n    config: DictConfig,\n    login_template: str | None = None,\n    logout_template: str | None = None,\n) -&gt; None\n</code></pre> Source code in <code>dlunch/auth.py</code> <pre><code>def __init__(\n    self,\n    config: DictConfig,\n    login_template: str | None = None,\n    logout_template: str | None = None,\n) -&gt; None:\n    # Set Hydra config info\n    self.config: DictConfig = config\n    \"\"\"Hydra configuration dictionary.\"\"\"\n\n    super().__init__(\n        login_template=login_template, logout_template=logout_template\n    )\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordEncrypt","title":"PasswordEncrypt","text":"<p>Class that store the encrypted value of a password.</p> <p>The encryption is based on Panel encryption system.</p> <p>The class has methods to encrypt and decrypt a string.</p> <p>The encrypted password may be passed to instantiate the new object. If the encrypted password is not aviailable use the class method <code>PasswordEncrypt.from_str</code> to create an istance with the string properly encrypted.</p> <p>Parameters:</p> Name Type Description Default <code>encrypted_password</code> <code>str</code> <p>encrypted password.</p> required <p>Methods:</p> Name Description <code>__eq__</code> <p>Decrypt the candidate string and compares it to the stored encrypted value.</p> <code>__init__</code> <code>__repr__</code> <p>Simple object representation.</p> <code>decrypt</code> <p>Return decrypted password.</p> <code>encrypt</code> <p>Return encrypted password.</p> <code>from_str</code> <p>Creates a PasswordEncrypt from the given string.</p> <p>Attributes:</p> Name Type Description <code>encrypted_password</code> <code>str</code> <p>Encrypted password.</p> Source code in <code>dlunch/auth.py</code> <pre><code>class PasswordEncrypt:\n    \"\"\"Class that store the encrypted value of a password.\n\n    The encryption is based on Panel encryption system.\n\n    The class has methods to encrypt and decrypt a string.\n\n    The encrypted password may be passed to instantiate the new object.\n    If the encrypted password is not aviailable use the class method\n    `PasswordEncrypt.from_str` to create an istance with the string properly\n    encrypted.\n\n    Args:\n        encrypted_password (str): encrypted password.\n    \"\"\"\n\n    def __init__(self, encrypted_password: str) -&gt; None:\n        # Consistency checks\n        assert (\n            len(encrypted_password) &lt;= 150\n        ), \"encrypted string should have less than 150 chars.\"\n        # Attributes\n        self.encrypted_password: str = encrypted_password\n        \"\"\"Encrypted password.\"\"\"\n\n    def __eq__(self, candidate: str) -&gt; bool:\n        \"\"\"Decrypt the candidate string and compares it to the stored encrypted value.\n\n        Args:\n            candidate (str): candidate string.\n\n        Returns:\n            bool: `True` if equal.\n        \"\"\"\n        # If string check hash, otherwise return False\n        if isinstance(candidate, str):\n            # Replace hashed_password if the algorithm changes\n            valid = self.decrypt() == candidate\n        else:\n            valid = False\n\n        return valid\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Simple object representation.\n\n        Returns:\n            str: string representation.\n        \"\"\"\n        return f\"&lt;{type(self).__name__}&gt;\"\n\n    @staticmethod\n    def encrypt(password: str) -&gt; str:\n        \"\"\"Return encrypted password.\n\n        Args:\n            password (str): plain password (not encrypted).\n\n        Returns:\n            str: encrypted password.\n        \"\"\"\n        if pn.state.encryption:\n            encrypted_password = pn.state.encryption.encrypt(\n                password.encode(\"utf-8\")\n            ).decode(\"utf-8\")\n        else:\n            encrypted_password = password\n        return encrypted_password\n\n    def decrypt(self) -&gt; str:\n        \"\"\"Return decrypted password.\n\n        Returns:\n            str: plain password (not encrypted).\n        \"\"\"\n        if pn.state.encryption:\n            password = pn.state.encryption.decrypt(\n                self.encrypted_password.encode(\"utf-8\")\n            ).decode(\"utf-8\")\n        else:\n            password = self.encrypted_password\n        return password\n\n    @classmethod\n    def from_str(cls, password: str) -&gt; Self:\n        \"\"\"Creates a PasswordEncrypt from the given string.\n\n        Args:\n            password (str): plain password (not encrypted).\n\n        Returns:\n            PasswordEncrypt: new class instance with encrypted value already stored.\n        \"\"\"\n        return cls(cls.encrypt(password))\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordEncrypt.encrypted_password","title":"encrypted_password  <code>instance-attribute</code>","text":"<pre><code>encrypted_password: str = encrypted_password\n</code></pre> <p>Encrypted password.</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordEncrypt.__eq__","title":"__eq__","text":"<pre><code>__eq__(candidate: str) -&gt; bool\n</code></pre> <p>Decrypt the candidate string and compares it to the stored encrypted value.</p> <p>Parameters:</p> Name Type Description Default <code>candidate</code> <code>str</code> <p>candidate string.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if equal.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def __eq__(self, candidate: str) -&gt; bool:\n    \"\"\"Decrypt the candidate string and compares it to the stored encrypted value.\n\n    Args:\n        candidate (str): candidate string.\n\n    Returns:\n        bool: `True` if equal.\n    \"\"\"\n    # If string check hash, otherwise return False\n    if isinstance(candidate, str):\n        # Replace hashed_password if the algorithm changes\n        valid = self.decrypt() == candidate\n    else:\n        valid = False\n\n    return valid\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordEncrypt.__init__","title":"__init__","text":"<pre><code>__init__(encrypted_password: str) -&gt; None\n</code></pre> Source code in <code>dlunch/auth.py</code> <pre><code>def __init__(self, encrypted_password: str) -&gt; None:\n    # Consistency checks\n    assert (\n        len(encrypted_password) &lt;= 150\n    ), \"encrypted string should have less than 150 chars.\"\n    # Attributes\n    self.encrypted_password: str = encrypted_password\n    \"\"\"Encrypted password.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordEncrypt.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Simple object representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Simple object representation.\n\n    Returns:\n        str: string representation.\n    \"\"\"\n    return f\"&lt;{type(self).__name__}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordEncrypt.decrypt","title":"decrypt","text":"<pre><code>decrypt() -&gt; str\n</code></pre> <p>Return decrypted password.</p> <p>Returns:</p> Type Description <code>str</code> <p>plain password (not encrypted).</p> Source code in <code>dlunch/auth.py</code> <pre><code>def decrypt(self) -&gt; str:\n    \"\"\"Return decrypted password.\n\n    Returns:\n        str: plain password (not encrypted).\n    \"\"\"\n    if pn.state.encryption:\n        password = pn.state.encryption.decrypt(\n            self.encrypted_password.encode(\"utf-8\")\n        ).decode(\"utf-8\")\n    else:\n        password = self.encrypted_password\n    return password\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordEncrypt.encrypt","title":"encrypt  <code>staticmethod</code>","text":"<pre><code>encrypt(password: str) -&gt; str\n</code></pre> <p>Return encrypted password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>plain password (not encrypted).</p> required <p>Returns:</p> Type Description <code>str</code> <p>encrypted password.</p> Source code in <code>dlunch/auth.py</code> <pre><code>@staticmethod\ndef encrypt(password: str) -&gt; str:\n    \"\"\"Return encrypted password.\n\n    Args:\n        password (str): plain password (not encrypted).\n\n    Returns:\n        str: encrypted password.\n    \"\"\"\n    if pn.state.encryption:\n        encrypted_password = pn.state.encryption.encrypt(\n            password.encode(\"utf-8\")\n        ).decode(\"utf-8\")\n    else:\n        encrypted_password = password\n    return encrypted_password\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordEncrypt.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(password: str) -&gt; Self\n</code></pre> <p>Creates a PasswordEncrypt from the given string.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>plain password (not encrypted).</p> required <p>Returns:</p> Type Description <code>PasswordEncrypt</code> <p>new class instance with encrypted value already stored.</p> Source code in <code>dlunch/auth.py</code> <pre><code>@classmethod\ndef from_str(cls, password: str) -&gt; Self:\n    \"\"\"Creates a PasswordEncrypt from the given string.\n\n    Args:\n        password (str): plain password (not encrypted).\n\n    Returns:\n        PasswordEncrypt: new class instance with encrypted value already stored.\n    \"\"\"\n    return cls(cls.encrypt(password))\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordHash","title":"PasswordHash","text":"<p>Class that store the hashed value of a password.</p> <p>The password hash may be passed to instantiate the new object. If the hash is not aviailable use the class method <code>PasswordHash.from_str</code> to create an istance with the string properly hashed.</p> <p>Parameters:</p> Name Type Description Default <code>hashed_password</code> <code>str</code> <p>password hash.</p> required <p>Methods:</p> Name Description <code>__eq__</code> <p>Hashes the candidate string and compares it to the stored hash.</p> <code>__init__</code> <code>__repr__</code> <p>Simple object representation.</p> <code>from_str</code> <p>Creates a PasswordHash from the given string.</p> <code>hash</code> <p>Return hash of the given password.</p> <code>verify</code> <p>Check a password against its hash and return <code>True</code> if check passes,</p> <code>verify_and_update</code> <p>Check a password against its hash and return <code>True</code> if check passes,</p> <p>Attributes:</p> Name Type Description <code>hashed_password</code> <code>str</code> <p>Password hash.</p> Source code in <code>dlunch/auth.py</code> <pre><code>class PasswordHash:\n    \"\"\"Class that store the hashed value of a password.\n\n    The password hash may be passed to instantiate the new object.\n    If the hash is not aviailable use the class method\n    `PasswordHash.from_str` to create an istance with the string properly\n    hashed.\n\n    Args:\n        hashed_password (str): password hash.\n    \"\"\"\n\n    def __init__(self, hashed_password: str) -&gt; None:\n        # Consistency checks\n        assert (\n            len(hashed_password) &lt;= 150\n        ), \"hash should have less than 150 chars.\"\n        # Attributes\n        self.hashed_password: str = hashed_password\n        \"\"\"Password hash.\"\"\"\n\n    def __eq__(self, candidate: str) -&gt; bool:\n        \"\"\"Hashes the candidate string and compares it to the stored hash.\n\n        Args:\n            candidate (str): candidate string.\n\n        Returns:\n            bool: `True` if equal.\n        \"\"\"\n        # If string check hash, otherwise return False\n        if isinstance(candidate, str):\n            # Replace hashed_password if the algorithm changes\n            valid = self.verify(candidate)\n        else:\n            valid = False\n\n        return valid\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Simple object representation.\n\n        Returns:\n            str: string representation.\n        \"\"\"\n        return f\"&lt;{type(self).__name__}&gt;\"\n\n    def verify(self, password: str) -&gt; bool:\n        \"\"\"Check a password against its hash and return `True` if check passes,\n        `False` otherwise.\n\n        Args:\n            password (str): plain password (not hashed).\n\n        Returns:\n            bool: `True` if password and hash match.\n        \"\"\"\n        valid = pwd_context.verify(saslprep(password), self.hashed_password)\n\n        return valid\n\n    def verify_and_update(self, password: str) -&gt; tuple[bool, str | None]:\n        \"\"\"Check a password against its hash and return `True` if check passes,\n        `False` otherwise. Return also a new hash if the original hashing  method\n        is superseeded\n\n        Args:\n            password (str): plain password (not hashed).\n\n        Returns:\n            tuple[bool, str | None]: return a tuple with two elements (valid, new_hash).\n                valid: `True` if password and hash match.\n                new_hash: new hash to replace the one generated with an old algorithm.\n        \"\"\"\n        valid, new_hash = pwd_context.verify_and_update(\n            saslprep(password), self.hashed_password\n        )\n        if valid and new_hash:\n            self.hashed_password = new_hash\n\n        return valid, new_hash\n\n    @staticmethod\n    def hash(password: str) -&gt; str:\n        \"\"\"Return hash of the given password.\n\n        Args:\n            password (str): plain password (not hashed).\n\n        Returns:\n            str: hashed password.\n        \"\"\"\n        return pwd_context.hash(saslprep(password))\n\n    @classmethod\n    def from_str(cls, password: str) -&gt; Self:\n        \"\"\"Creates a PasswordHash from the given string.\n\n        Args:\n            password (str): plain password (not hashed).\n\n        Returns:\n            PasswordHash: new class instance with hashed value already stored.\n        \"\"\"\n        return cls(cls.hash(password))\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordHash.hashed_password","title":"hashed_password  <code>instance-attribute</code>","text":"<pre><code>hashed_password: str = hashed_password\n</code></pre> <p>Password hash.</p>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordHash.__eq__","title":"__eq__","text":"<pre><code>__eq__(candidate: str) -&gt; bool\n</code></pre> <p>Hashes the candidate string and compares it to the stored hash.</p> <p>Parameters:</p> Name Type Description Default <code>candidate</code> <code>str</code> <p>candidate string.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if equal.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def __eq__(self, candidate: str) -&gt; bool:\n    \"\"\"Hashes the candidate string and compares it to the stored hash.\n\n    Args:\n        candidate (str): candidate string.\n\n    Returns:\n        bool: `True` if equal.\n    \"\"\"\n    # If string check hash, otherwise return False\n    if isinstance(candidate, str):\n        # Replace hashed_password if the algorithm changes\n        valid = self.verify(candidate)\n    else:\n        valid = False\n\n    return valid\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordHash.__init__","title":"__init__","text":"<pre><code>__init__(hashed_password: str) -&gt; None\n</code></pre> Source code in <code>dlunch/auth.py</code> <pre><code>def __init__(self, hashed_password: str) -&gt; None:\n    # Consistency checks\n    assert (\n        len(hashed_password) &lt;= 150\n    ), \"hash should have less than 150 chars.\"\n    # Attributes\n    self.hashed_password: str = hashed_password\n    \"\"\"Password hash.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordHash.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Simple object representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Simple object representation.\n\n    Returns:\n        str: string representation.\n    \"\"\"\n    return f\"&lt;{type(self).__name__}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordHash.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(password: str) -&gt; Self\n</code></pre> <p>Creates a PasswordHash from the given string.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>plain password (not hashed).</p> required <p>Returns:</p> Type Description <code>PasswordHash</code> <p>new class instance with hashed value already stored.</p> Source code in <code>dlunch/auth.py</code> <pre><code>@classmethod\ndef from_str(cls, password: str) -&gt; Self:\n    \"\"\"Creates a PasswordHash from the given string.\n\n    Args:\n        password (str): plain password (not hashed).\n\n    Returns:\n        PasswordHash: new class instance with hashed value already stored.\n    \"\"\"\n    return cls(cls.hash(password))\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordHash.hash","title":"hash  <code>staticmethod</code>","text":"<pre><code>hash(password: str) -&gt; str\n</code></pre> <p>Return hash of the given password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>plain password (not hashed).</p> required <p>Returns:</p> Type Description <code>str</code> <p>hashed password.</p> Source code in <code>dlunch/auth.py</code> <pre><code>@staticmethod\ndef hash(password: str) -&gt; str:\n    \"\"\"Return hash of the given password.\n\n    Args:\n        password (str): plain password (not hashed).\n\n    Returns:\n        str: hashed password.\n    \"\"\"\n    return pwd_context.hash(saslprep(password))\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordHash.verify","title":"verify","text":"<pre><code>verify(password: str) -&gt; bool\n</code></pre> <p>Check a password against its hash and return <code>True</code> if check passes, <code>False</code> otherwise.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>plain password (not hashed).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if password and hash match.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def verify(self, password: str) -&gt; bool:\n    \"\"\"Check a password against its hash and return `True` if check passes,\n    `False` otherwise.\n\n    Args:\n        password (str): plain password (not hashed).\n\n    Returns:\n        bool: `True` if password and hash match.\n    \"\"\"\n    valid = pwd_context.verify(saslprep(password), self.hashed_password)\n\n    return valid\n</code></pre>"},{"location":"reference/dlunch/auth/#dlunch.auth.PasswordHash.verify_and_update","title":"verify_and_update","text":"<pre><code>verify_and_update(password: str) -&gt; tuple[bool, str | None]\n</code></pre> <p>Check a password against its hash and return <code>True</code> if check passes, <code>False</code> otherwise. Return also a new hash if the original hashing  method is superseeded</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>plain password (not hashed).</p> required <p>Returns:</p> Type Description <code>tuple[bool, str | None]</code> <p>return a tuple with two elements (valid, new_hash). valid: <code>True</code> if password and hash match. new_hash: new hash to replace the one generated with an old algorithm.</p> Source code in <code>dlunch/auth.py</code> <pre><code>def verify_and_update(self, password: str) -&gt; tuple[bool, str | None]:\n    \"\"\"Check a password against its hash and return `True` if check passes,\n    `False` otherwise. Return also a new hash if the original hashing  method\n    is superseeded\n\n    Args:\n        password (str): plain password (not hashed).\n\n    Returns:\n        tuple[bool, str | None]: return a tuple with two elements (valid, new_hash).\n            valid: `True` if password and hash match.\n            new_hash: new hash to replace the one generated with an old algorithm.\n    \"\"\"\n    valid, new_hash = pwd_context.verify_and_update(\n        saslprep(password), self.hashed_password\n    )\n    if valid and new_hash:\n        self.hashed_password = new_hash\n\n    return valid, new_hash\n</code></pre>"},{"location":"reference/dlunch/cli/","title":"cli","text":"<p>Module with Data-Lunch's command line.</p> <p>The command line is built with <code>click</code>.</p> <p>Call <code>data-lunch --help</code> from the terminal inside an environment where the <code>dlunch</code> package is installed.</p> <p>Functions:</p> Name Description <code>add_privileged_user</code> <p>Add privileged users (with or without admin privileges).</p> <code>add_user_credential</code> <p>Add users credentials to credentials table (used by basic authentication)</p> <code>clean_tables</code> <p>Clean 'users', 'menu', 'orders' and 'flags' tables.</p> <code>cli</code> <p>Command line interface for managing Data-Lunch database and users.</p> <code>credentials</code> <p>Manage users credentials for basic authentication.</p> <code>db</code> <p>Manage the database.</p> <code>delete_database</code> <p>Delete the database.</p> <code>delete_table</code> <p>Drop a single table from database.</p> <code>export_table_to_csv</code> <p>Export a single table to a csv file.</p> <code>generate_secrets</code> <p>Generate secrets for DATA_LUNCH_COOKIE_SECRET and DATA_LUNCH_OAUTH_ENC_KEY env variables.</p> <code>init_database</code> <p>Initialize the database.</p> <code>list_users</code> <p>List users and privileges.</p> <code>load_table</code> <p>Load a single table from a csv file.</p> <code>main</code> <p>Main command line entrypoint.</p> <code>remove_privileged_user</code> <p>Remove user from both privileged users and basic login credentials table.</p> <code>remove_user_credential</code> <p>Remove user from both privileged users and basic login credentials table.</p> <code>table</code> <p>Manage tables in database.</p> <code>users</code> <p>Manage privileged users and their group.</p> <code>utils</code> <p>Utility commands.</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>Data-Lunch command line version.</p>"},{"location":"reference/dlunch/cli/#dlunch.cli.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__: str = version\n</code></pre> <p>Data-Lunch command line version.</p>"},{"location":"reference/dlunch/cli/#dlunch.cli.add_privileged_user","title":"add_privileged_user","text":"<pre><code>add_privileged_user(obj, user, is_admin)\n</code></pre> <p>Add privileged users (with or without admin privileges).</p> Source code in <code>dlunch/cli.py</code> <pre><code>@users.command(\"add\")\n@click.argument(\"user\")\n@click.option(\"--admin\", \"is_admin\", is_flag=True, help=\"add admin privileges\")\n@click.pass_obj\ndef add_privileged_user(obj, user, is_admin):\n    \"\"\"Add privileged users (with or without admin privileges).\"\"\"\n\n    # Add privileged user to 'privileged_users' table\n    auth_user = auth.AuthUser(config=obj[\"config\"], name=user)\n    auth_user.add_privileged_user(is_admin=is_admin)\n\n    click.secho(f\"User '{user}' added (admin: {is_admin})\", fg=\"green\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.add_user_credential","title":"add_user_credential","text":"<pre><code>add_user_credential(\n    obj, user, password, is_admin, is_guest\n)\n</code></pre> <p>Add users credentials to credentials table (used by basic authentication) and to privileged users (if not guest).</p> Source code in <code>dlunch/cli.py</code> <pre><code>@credentials.command(\"add\")\n@click.argument(\"user\")\n@click.argument(\"password\")\n@click.option(\"--admin\", \"is_admin\", is_flag=True, help=\"add admin privileges\")\n@click.option(\n    \"--guest\",\n    \"is_guest\",\n    is_flag=True,\n    help=\"add user as guest (not added to privileged users)\",\n)\n@click.pass_obj\ndef add_user_credential(obj, user, password, is_admin, is_guest):\n    \"\"\"Add users credentials to credentials table (used by basic authentication)\n    and to privileged users (if not guest).\"\"\"\n\n    # Add a privileged users only if guest option is not active\n    auth_user = auth.AuthUser(config=obj[\"config\"], name=user)\n    if not is_guest:\n        auth_user.add_privileged_user(is_admin=is_admin)\n    # Add hashed password to credentials table\n    auth_user.add_user_hashed_password(password)\n\n    click.secho(f\"User '{user}' added\", fg=\"green\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.clean_tables","title":"clean_tables","text":"<pre><code>clean_tables(obj)\n</code></pre> <p>Clean 'users', 'menu', 'orders' and 'flags' tables.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@db.command(\"clean\")\n@click.confirmation_option()\n@click.pass_obj\ndef clean_tables(obj):\n    \"\"\"Clean 'users', 'menu', 'orders' and 'flags' tables.\"\"\"\n\n    # Drop table\n    try:\n        obj[\"waiter\"].clean_tables()\n        click.secho(\"done\", fg=\"green\")\n    except Exception as e:\n        # Generic error\n        click.secho(\"Cannot clean database\", fg=\"red\")\n        click.secho(f\"\\n ===== EXCEPTION =====\\n\\n{e}\", fg=\"red\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.cli","title":"cli","text":"<pre><code>cli(ctx, hydra_overrides: tuple | None)\n</code></pre> <p>Command line interface for managing Data-Lunch database and users.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@click.group()\n@click.version_option(__version__)\n@click.option(\n    \"-o\",\n    \"--hydra-overrides\",\n    \"hydra_overrides\",\n    default=None,\n    multiple=True,\n    help=\"pass hydra override, use multiple time to add more than one override\",\n)\n@click.pass_context\ndef cli(ctx, hydra_overrides: tuple | None):\n    \"\"\"Command line interface for managing Data-Lunch database and users.\"\"\"\n    # global initialization\n    initialize(\n        config_path=\"conf\", job_name=\"data_lunch_cli\", version_base=\"1.3\"\n    )\n    config = compose(config_name=\"config\", overrides=hydra_overrides)\n\n    # Instance auth context and waiter\n    auth_context = auth.AuthContext(config=config)\n    waiter = Waiter(config=config)\n\n    # Store common objects in context\n    ctx.obj = {\n        \"config\": config,\n        \"auth_context\": auth_context,\n        \"waiter\": waiter,\n    }\n\n    # Auth encryption\n    auth_context.set_app_auth_and_encryption()\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.credentials","title":"credentials","text":"<pre><code>credentials(obj)\n</code></pre> <p>Manage users credentials for basic authentication.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@cli.group()\n@click.pass_obj\ndef credentials(obj):\n    \"\"\"Manage users credentials for basic authentication.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.db","title":"db","text":"<pre><code>db(obj)\n</code></pre> <p>Manage the database.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@cli.group()\n@click.pass_obj\ndef db(obj):\n    \"\"\"Manage the database.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.delete_database","title":"delete_database","text":"<pre><code>delete_database(obj)\n</code></pre> <p>Delete the database.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@db.command(\"delete\")\n@click.confirmation_option()\n@click.pass_obj\ndef delete_database(obj):\n    \"\"\"Delete the database.\"\"\"\n\n    # Create database\n    waiter: Waiter = obj[\"waiter\"]\n    try:\n        engine = waiter.database_connector.create_engine()\n        Data.metadata.drop_all(engine)\n        click.secho(\"Database deleted\", fg=\"green\")\n    except Exception as e:\n        # Generic error\n        click.secho(\"Cannot delete database\", fg=\"red\")\n        click.secho(f\"\\n ===== EXCEPTION =====\\n\\n{e}\", fg=\"red\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.delete_table","title":"delete_table","text":"<pre><code>delete_table(obj, name)\n</code></pre> <p>Drop a single table from database.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@table.command(\"drop\")\n@click.confirmation_option()\n@click.argument(\"name\")\n@click.pass_obj\ndef delete_table(obj, name):\n    \"\"\"Drop a single table from database.\"\"\"\n\n    # Drop table\n    waiter: Waiter = obj[\"waiter\"]\n    try:\n        engine = waiter.database_connector.create_engine()\n        metadata_obj.tables[name].drop(engine)\n        click.secho(f\"Table '{name}' deleted\", fg=\"green\")\n    except Exception as e:\n        # Generic error\n        click.secho(\"Cannot drop table\", fg=\"red\")\n        click.secho(f\"\\n ===== EXCEPTION =====\\n\\n{e}\", fg=\"red\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.export_table_to_csv","title":"export_table_to_csv","text":"<pre><code>export_table_to_csv(obj, name, csv_file_path, index)\n</code></pre> <p>Export a single table to a csv file.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@table.command(\"export\")\n@click.argument(\"name\")\n@click.argument(\"csv_file_path\")\n@click.option(\n    \"--index/--no-index\",\n    \"index\",\n    show_default=True,\n    default=False,\n    help=\"select if index column is exported to csv\",\n)\n@click.pass_obj\ndef export_table_to_csv(obj, name, csv_file_path, index):\n    \"\"\"Export a single table to a csv file.\"\"\"\n\n    click.secho(f\"Export table '{name}' to CSV {csv_file_path}\\n\", fg=\"yellow\")\n\n    # Instantiate model\n    model = None\n    try:\n        # Find model\n        for mapper in Data.registry.mappers:\n            if mapper.class_.__tablename__ == name:\n                model: CommonTable = mapper.class_\n                break\n\n        # Raise error if can't find a valid table\n        if model is None:\n            raise Exception(f\"Table '{name}' not found\")\n\n        # Create dataframe\n        df = model.read_as_df(obj[\"config\"])\n\n    except Exception as e:\n        # Generic error\n        click.secho(\"Cannot read table\", fg=\"red\")\n        click.secho(f\"\\n ===== EXCEPTION =====\\n\\n{e}\", fg=\"red\")\n    else:\n        # Show head\n        click.echo(\"First three rows of the table (index included)\\n\")\n        click.secho(\n            df.head(3).to_string(index=False).split(\"\\n\")[0], fg=\"cyan\"\n        )\n        click.secho(\n            \"\\n\".join(df.head(3).to_string(index=False).split(\"\\n\")[1:])\n        )\n\n        # Export table\n        try:\n            df.to_csv(csv_file_path, index=index)\n        except Exception as e:\n            # Generic error\n            click.secho(\"Cannot write CSV\", fg=\"red\")\n            click.secho(f\"\\n ===== EXCEPTION =====\\n\\n{e}\", fg=\"red\")\n        else:\n            click.secho(\"Done\", fg=\"green\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.generate_secrets","title":"generate_secrets","text":"<pre><code>generate_secrets(obj)\n</code></pre> <p>Generate secrets for DATA_LUNCH_COOKIE_SECRET and DATA_LUNCH_OAUTH_ENC_KEY env variables.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@utils.command(\"generate-secrets\")\n@click.pass_obj\ndef generate_secrets(obj):\n    \"\"\"Generate secrets for DATA_LUNCH_COOKIE_SECRET and DATA_LUNCH_OAUTH_ENC_KEY env variables.\"\"\"\n\n    try:\n        result_secret = subprocess.run(\n            [\"panel\", \"secret\"],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n        )\n        click.secho(\"\\nCOOKIE SECRET:\", fg=\"yellow\", bold=True)\n        click.secho(\n            f\"{result_secret.stdout.decode('utf-8')}\",\n            fg=\"cyan\",\n        )\n        result_encription = subprocess.run(\n            [\"panel\", \"oauth-secret\"],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n        )\n        click.secho(\"ENCRIPTION KEY:\", fg=\"yellow\", bold=True)\n        click.secho(\n            f\"{result_encription.stdout.decode('utf-8')}\",\n            fg=\"cyan\",\n        )\n        click.secho(\"Done\", fg=\"green\")\n    except Exception as e:\n        # Generic error\n        click.secho(\"Cannot generate secrets\", fg=\"red\")\n        click.secho(f\"\\n ===== EXCEPTION =====\\n\\n{e}\", fg=\"red\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.init_database","title":"init_database","text":"<pre><code>init_database(obj, add_basic_auth_users)\n</code></pre> <p>Initialize the database.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@db.command(\"init\")\n@click.option(\n    \"--add-basic-auth-users\",\n    \"add_basic_auth_users\",\n    is_flag=True,\n    help=\"automatically create basic auth standard users\",\n)\n@click.pass_obj\ndef init_database(obj, add_basic_auth_users):\n    \"\"\"Initialize the database.\"\"\"\n\n    # Create database\n    waiter: Waiter = obj[\"waiter\"]\n    waiter.database_connector.create_database(\n        add_basic_auth_users=add_basic_auth_users\n    )\n\n    click.secho(\n        f\"Database initialized (basic auth users: {add_basic_auth_users})\",\n        fg=\"green\",\n    )\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.list_users","title":"list_users","text":"<pre><code>list_users(obj, list_only_privileged_users)\n</code></pre> <p>List users and privileges.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@users.command(\"list\")\n@click.option(\n    \"--privileged-only\",\n    \"list_only_privileged_users\",\n    is_flag=True,\n    help=\"list only privileged users (without group)\",\n)\n@click.pass_obj\ndef list_users(obj, list_only_privileged_users):\n    \"\"\"List users and privileges.\"\"\"\n\n    # Define padding function\n    def _left_justify(df):\n        df = df.astype(str).str.strip()\n        return df.str.ljust(df.str.len().max())\n\n    # Auth settings\n    auth_type = obj[\"auth_context\"].auth_type() or \"not active\"\n    click.secho(\"AUTH SETTINGS\", fg=\"yellow\", bold=True)\n    click.secho(f\"authentication: {auth_type}\\n\")\n\n    # List user\n    click.secho(\"USERS\", fg=\"yellow\", bold=True)\n    if list_only_privileged_users:\n        users = obj[\"auth_context\"].list_privileged_users()\n        click.secho(\"user\", fg=\"cyan\")\n        click.secho(\"\\n\".join(users))\n    else:\n        df_users = obj[\"auth_context\"].list_users_guests_and_privileges()\n        df_users = (\n            df_users.reset_index()\n            .apply(_left_justify)\n            .to_string(index=False, justify=\"left\")\n        )\n        click.secho(df_users.split(\"\\n\")[0], fg=\"cyan\")\n        click.secho(\"\\n\".join(df_users.split(\"\\n\")[1:]))\n\n    click.secho(\"\\nDone\", fg=\"green\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.load_table","title":"load_table","text":"<pre><code>load_table(obj, name, csv_file_path, index, index_col)\n</code></pre> <p>Load a single table from a csv file.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@table.command(\"load\")\n@click.confirmation_option()\n@click.argument(\"name\")\n@click.argument(\"csv_file_path\")\n@click.option(\n    \"--index/--no-index\",\n    \"index\",\n    show_default=True,\n    default=True,\n    help=\"select if index column is uploaded to table\",\n)\n@click.option(\n    \"-c\",\n    \"--index-col\",\n    \"index_col\",\n    type=str,\n    default=None,\n    help=\"select the column used as index in the csv file\",\n)\n@click.pass_obj\ndef load_table(obj, name, csv_file_path, index, index_col):\n    \"\"\"Load a single table from a csv file.\"\"\"\n\n    click.secho(f\"Load CSV {csv_file_path} to table '{name}'\", fg=\"yellow\")\n\n    # Create dataframe\n    df = pd.read_csv(csv_file_path, index_col=index_col)\n\n    # Show head\n    click.echo(\"First three rows of the table to upload\\n\")\n    header_rows = 2 if index_col else 1\n    click.secho(\n        \"\\n\".join(df.head(3).to_string().split(\"\\n\")[:header_rows]), fg=\"cyan\"\n    )\n    click.secho(\"\\n\".join(df.head(3).to_string().split(\"\\n\")[header_rows:]))\n\n    # Instantiate model\n    model = None\n\n    try:\n        # Find model\n        for mapper in Data.registry.mappers:\n            if mapper.class_.__tablename__ == name:\n                model: CommonTable = mapper.class_\n                break\n\n        # Raise error if can't find a valid table\n        if model is None:\n            raise Exception(f\"Table '{name}' not found\")\n\n        num_rows_written = model.write_from_df(\n            config=obj[\"config\"],\n            df=df,\n            index=index,\n        )\n        click.secho(f\"\\nUpload complete ({num_rows_written} rows)\", fg=\"green\")\n    except Exception as e:\n        # Generic error\n        click.secho(\"Cannot load table\", fg=\"red\")\n        click.secho(f\"\\n ===== EXCEPTION =====\\n\\n{e}\", fg=\"red\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> <p>Main command line entrypoint.</p> Source code in <code>dlunch/cli.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Main command line entrypoint.\"\"\"\n    cli(auto_envvar_prefix=\"DATA_LUNCH\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.remove_privileged_user","title":"remove_privileged_user","text":"<pre><code>remove_privileged_user(obj, user)\n</code></pre> <p>Remove user from both privileged users and basic login credentials table.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@users.command(\"remove\")\n@click.confirmation_option()\n@click.argument(\"user\")\n@click.pass_obj\ndef remove_privileged_user(obj, user):\n    \"\"\"Remove user from both privileged users and basic login credentials table.\"\"\"\n\n    # Clear action\n    deleted_data = auth.AuthUser(config=obj[\"config\"], name=user).remove_user()\n\n    if (deleted_data[\"privileged_users_deleted\"] &gt; 0) or (\n        deleted_data[\"credentials_deleted\"] &gt; 0\n    ):\n        click.secho(\n            f\"User '{user}' removed (auth: {deleted_data['privileged_users_deleted']}, cred: {deleted_data['credentials_deleted']})\",\n            fg=\"green\",\n        )\n    else:\n        click.secho(f\"User '{user}' does not exist\", fg=\"yellow\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.remove_user_credential","title":"remove_user_credential","text":"<pre><code>remove_user_credential(obj, user)\n</code></pre> <p>Remove user from both privileged users and basic login credentials table.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@credentials.command(\"remove\")\n@click.confirmation_option()\n@click.argument(\"user\")\n@click.pass_obj\ndef remove_user_credential(obj, user):\n    \"\"\"Remove user from both privileged users and basic login credentials table.\"\"\"\n\n    # Clear action\n    deleted_data = auth.AuthUser(config=obj[\"config\"], name=user).remove_user()\n\n    if (deleted_data[\"privileged_users_deleted\"] &gt; 0) or (\n        deleted_data[\"credentials_deleted\"] &gt; 0\n    ):\n        click.secho(\n            f\"User '{user}' removed (auth: {deleted_data['privileged_users_deleted']}, cred: {deleted_data['credentials_deleted']})\",\n            fg=\"green\",\n        )\n    else:\n        click.secho(f\"User '{user}' does not exist\", fg=\"yellow\")\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.table","title":"table","text":"<pre><code>table(obj)\n</code></pre> <p>Manage tables in database.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@db.group()\n@click.pass_obj\ndef table(obj):\n    \"\"\"Manage tables in database.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.users","title":"users","text":"<pre><code>users(obj)\n</code></pre> <p>Manage privileged users and their group.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@cli.group()\n@click.pass_obj\ndef users(obj):\n    \"\"\"Manage privileged users and their group.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/cli/#dlunch.cli.utils","title":"utils","text":"<pre><code>utils(obj)\n</code></pre> <p>Utility commands.</p> Source code in <code>dlunch/cli.py</code> <pre><code>@cli.group()\n@click.pass_obj\ndef utils(obj):\n    \"\"\"Utility commands.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/cloud/","title":"cloud","text":"<p>Module with functions to interact with GCP storage service.</p> <p>Functions:</p> Name Description <code>download_from_gcloud</code> <p>Download a file from GCP storage.</p> <code>download_from_gcloud_as_bytes</code> <p>Download a file from GCP storage as bytes stream.</p> <code>get_gcloud_bucket_list</code> <p>List buckets available in GCP storage.</p> <code>upload_to_gcloud</code> <p>Upload a local file to GCP storage.</p> <code>upload_to_gcloud_from_string</code> <p>Upload the content of a string to GCP storage.</p> <p>Attributes:</p> Name Type Description <code>log</code> <code>Logger</code> <p>Module logger.</p>"},{"location":"reference/dlunch/cloud/#dlunch.cloud.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log: Logger = getLogger(__name__)\n</code></pre> <p>Module logger.</p>"},{"location":"reference/dlunch/cloud/#dlunch.cloud.download_from_gcloud","title":"download_from_gcloud","text":"<pre><code>download_from_gcloud(\n    source_blob_name: str,\n    destination_file_name: str,\n    bucket_name: str,\n    project: str,\n) -&gt; None\n</code></pre> <p>Download a file from GCP storage.</p> <p>Parameters:</p> Name Type Description Default <code>source_blob_name</code> <code>str</code> <p>blob name of the source object.</p> required <code>destination_file_name</code> <code>str</code> <p>local filepath for the downloaded resource.</p> required <code>bucket_name</code> <code>str</code> <p>bucket name.</p> required <code>project</code> <code>str</code> <p>GCP project ID.</p> required Source code in <code>dlunch/cloud.py</code> <pre><code>def download_from_gcloud(\n    source_blob_name: str,\n    destination_file_name: str,\n    bucket_name: str,\n    project: str,\n) -&gt; None:\n    \"\"\"Download a file from GCP storage.\n\n    Args:\n        source_blob_name (str): blob name of the source object.\n        destination_file_name (str): local filepath for the downloaded resource.\n        bucket_name (str): bucket name.\n        project (str): GCP project ID.\n    \"\"\"\n    # Create storage client\n    storage_client = storage.Client(project=project)\n\n    try:\n        # Get bucket\n        bucket = storage_client.bucket(bucket_name)\n        # Create blob\n        blob = bucket.blob(source_blob_name)\n        # Download\n        blob.download_to_filename(destination_file_name)\n        log.info(\n            f\"file '{source_blob_name}' downloaded to file '{destination_file_name}' successfully\"\n        )\n    except Exception as e:\n        log.warning(\"google storage download exception\\n\\t\" + str(e))\n</code></pre>"},{"location":"reference/dlunch/cloud/#dlunch.cloud.download_from_gcloud_as_bytes","title":"download_from_gcloud_as_bytes","text":"<pre><code>download_from_gcloud_as_bytes(\n    source_blob_name: str, bucket_name: str, project: str\n) -&gt; bytes\n</code></pre> <p>Download a file from GCP storage as bytes stream.</p> <p>Parameters:</p> Name Type Description Default <code>source_blob_name</code> <code>str</code> <p>blob name of the source file.</p> required <code>bucket_name</code> <code>str</code> <p>bucket name.</p> required <code>project</code> <code>str</code> <p>GCP project ID.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>downloaded resource.</p> Source code in <code>dlunch/cloud.py</code> <pre><code>def download_from_gcloud_as_bytes(\n    source_blob_name: str,\n    bucket_name: str,\n    project: str,\n) -&gt; bytes:\n    \"\"\"Download a file from GCP storage as bytes stream.\n\n    Args:\n        source_blob_name (str): blob name of the source file.\n        bucket_name (str): bucket name.\n        project (str): GCP project ID.\n\n    Returns:\n        bytes: downloaded resource.\n    \"\"\"\n    # Create storage client\n    storage_client = storage.Client(project=project)\n\n    try:\n        # Get bucket\n        bucket = storage_client.bucket(bucket_name)\n        # Create blob\n        blob = bucket.blob(source_blob_name)\n        # Download\n        bytes_object = blob.download_as_bytes()\n        log.info(\n            f\"file '{source_blob_name}' downloaded to object successfully\"\n        )\n    except Exception as e:\n        log.warning(\"google storage download exception\\n\\t\" + str(e))\n\n    return bytes_object\n</code></pre>"},{"location":"reference/dlunch/cloud/#dlunch.cloud.get_gcloud_bucket_list","title":"get_gcloud_bucket_list","text":"<pre><code>get_gcloud_bucket_list(project: str) -&gt; list[str]\n</code></pre> <p>List buckets available in GCP storage.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>GCP project ID.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list with bucket names.</p> Source code in <code>dlunch/cloud.py</code> <pre><code>def get_gcloud_bucket_list(project: str) -&gt; list[str]:\n    \"\"\"List buckets available in GCP storage.\n\n    Args:\n        project (str): GCP project ID.\n\n    Returns:\n        list[str]: list with bucket names.\n    \"\"\"\n    # Create storage client\n    storage_client = storage.Client(project=project)\n\n    # Return bucket\n    buckets = list(storage_client.list_buckets())\n\n    return buckets\n</code></pre>"},{"location":"reference/dlunch/cloud/#dlunch.cloud.upload_to_gcloud","title":"upload_to_gcloud","text":"<pre><code>upload_to_gcloud(\n    source_file_name: str,\n    destination_blob_name: str,\n    bucket_name: str,\n    project: str,\n) -&gt; None\n</code></pre> <p>Upload a local file to GCP storage.</p> <p>Parameters:</p> Name Type Description Default <code>source_file_name</code> <code>str</code> <p>filepath.</p> required <code>destination_blob_name</code> <code>str</code> <p>blob name to use as destination.</p> required <code>bucket_name</code> <code>str</code> <p>bucket name.</p> required <code>project</code> <code>str</code> <p>GCP project ID.</p> required Source code in <code>dlunch/cloud.py</code> <pre><code>def upload_to_gcloud(\n    source_file_name: str,\n    destination_blob_name: str,\n    bucket_name: str,\n    project: str,\n) -&gt; None:\n    \"\"\"Upload a local file to GCP storage.\n\n    Args:\n        source_file_name (str): filepath.\n        destination_blob_name (str): blob name to use as destination.\n        bucket_name (str): bucket name.\n        project (str): GCP project ID.\n    \"\"\"\n    # Create storage client\n    storage_client = storage.Client(project=project)\n\n    try:\n        # Get bucket\n        bucket = storage_client.bucket(bucket_name)\n        # Create blob\n        blob = bucket.blob(destination_blob_name)\n        # Upload\n        blob.upload_from_filename(source_file_name)\n        log.info(\n            f\"file '{source_file_name}' uploaded to bucket '{bucket_name}' successfully\"\n        )\n    except Exception as e:\n        log.warning(\"google storage upload exception\\n\\t\" + str(e))\n</code></pre>"},{"location":"reference/dlunch/cloud/#dlunch.cloud.upload_to_gcloud_from_string","title":"upload_to_gcloud_from_string","text":"<pre><code>upload_to_gcloud_from_string(\n    source_string: str,\n    destination_blob_name: str,\n    bucket_name: str,\n    project: str,\n) -&gt; None\n</code></pre> <p>Upload the content of a string to GCP storage.</p> <p>Parameters:</p> Name Type Description Default <code>source_string</code> <code>str</code> <p>string to upload.</p> required <code>destination_blob_name</code> <code>str</code> <p>blob name to use as destination.</p> required <code>bucket_name</code> <code>str</code> <p>bucket name.</p> required <code>project</code> <code>str</code> <p>GCP project ID.</p> required Source code in <code>dlunch/cloud.py</code> <pre><code>def upload_to_gcloud_from_string(\n    source_string: str,\n    destination_blob_name: str,\n    bucket_name: str,\n    project: str,\n) -&gt; None:\n    \"\"\"Upload the content of a string to GCP storage.\n\n    Args:\n        source_string (str): string to upload.\n        destination_blob_name (str): blob name to use as destination.\n        bucket_name (str): bucket name.\n        project (str): GCP project ID.\n    \"\"\"\n    # Create storage client\n    storage_client = storage.Client(project=project)\n\n    try:\n        # Get bucket\n        bucket = storage_client.bucket(bucket_name)\n        # Create blob\n        blob = bucket.blob(destination_blob_name)\n        # Upload\n        blob.upload_from_string(source_string)\n        log.info(\n            f\"file uploaded from string to bucket '{bucket_name}' at '{destination_blob_name}' successfully\"\n        )\n    except Exception as e:\n        log.warning(\"google storage upload exception\\n\\t\" + str(e))\n</code></pre>"},{"location":"reference/dlunch/core/","title":"core","text":"<p>Module that defines main functions used to manage Data-Lunch operations.</p> <p>This module defines the <code>Waiter</code> class that contains the main functions used to manage Data-Lunch operations. The class is used to interact with the database and the Panel widgets.</p> <p>Classes:</p> Name Description <code>Waiter</code> <p>Class that defines main functions used to manage Data-Lunch operations.</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>Data-Lunch version.</p> <code>log</code> <code>Logger</code> <p>Module logger.</p>"},{"location":"reference/dlunch/core/#dlunch.core.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__: str = '3.5.0'\n</code></pre> <p>Data-Lunch version.</p>"},{"location":"reference/dlunch/core/#dlunch.core.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log: Logger = getLogger(__name__)\n</code></pre> <p>Module logger.</p>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter","title":"Waiter","text":"<p>Class that defines main functions used to manage Data-Lunch operations.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig | None</code> <p>Hydra configuration object.</p> required Raise <p>ValueError: when calling (unmangled) methods, if the configuration is not set.</p> <p>Methods:</p> Name Description <code>__init__</code> <code>build_menu</code> <p>Read menu from file (Excel or image) and upload menu items to database <code>menu</code> table.</p> <code>change_order_time_takeaway</code> <p>Change the time and the takeaway flag of an existing order.</p> <code>clean_tables</code> <p>Clean tables that should be reset when a new menu is uploaded.</p> <code>delete_files</code> <p>Delete local temporary files.</p> <code>delete_order</code> <p>Delete an existing order.</p> <code>df_list_by_lunch_time</code> <p>Build a dictionary of dataframes for each lunch-time, with takeaways included in a dedicated dataframe.</p> <code>download_dataframe</code> <p>Build an Excel file with tables representing orders for every lunch-time/takeaway-time.</p> <code>reload_menu</code> <p>Main core function that sync Panel widget with database tables.</p> <code>send_order</code> <p>Upload orders and user to database tables.</p> <code>set_config</code> <p>Set the configuration for the Waiter instance.</p> <p>Attributes:</p> Name Type Description <code>auth_user</code> <code>AuthUser</code> <p>Object with authenticated user data and related methods</p> <code>config</code> <code>DictConfig</code> <p>Hydra configuration object</p> <code>database_connector</code> <code>DatabaseConnector</code> <p>Object that handles database connection and operations</p> <code>hostname</code> <code>str</code> <p>Return hostname.</p> Source code in <code>dlunch/core.py</code> <pre><code>class Waiter:\n    \"\"\"Class that defines main functions used to manage Data-Lunch operations.\n\n    Args:\n        config (DictConfig| None): Hydra configuration object.\n\n    Raise:\n        ValueError: when calling (unmangled) methods, if the configuration is not set.\n    \"\"\"\n\n    def __init__(self, config: DictConfig):\n        self.config: DictConfig = config\n        \"\"\"Hydra configuration object\"\"\"\n        self.auth_user: AuthUser = AuthUser(config=config)\n        \"\"\"Object with authenticated user data and related methods\"\"\"\n        self.database_connector: models.DatabaseConnector = (\n            models.DatabaseConnector(config=config)\n        )\n        \"\"\"Object that handles database connection and operations\"\"\"\n\n    def set_config(self, config: DictConfig):\n        \"\"\"Set the configuration for the Waiter instance.\n\n        Args:\n            config (DictConfig): Hydra configuration object.\n        \"\"\"\n        self.config = config\n\n    @property\n    def hostname(self) -&gt; str:\n        \"\"\"Return hostname.\n\n        This function behavior changes if called from localhost, Docker container or\n        production server.\n\n        Returns:\n            str: hostname.\n        \"\"\"\n        try:\n            ip_address = socket.gethostbyname(socket.gethostname())\n            dig_res = subprocess.run(\n                [\"dig\", \"+short\", \"-x\", ip_address], stdout=subprocess.PIPE\n            ).stdout\n            host_name = (\n                subprocess.run(\n                    [\"cut\", \"-d.\", \"-f1\"],\n                    stdout=subprocess.PIPE,\n                    input=dig_res,\n                )\n                .stdout.decode(\"utf-8\")\n                .strip()\n            )\n            if host_name:\n                host_name = host_name.replace(\n                    f\"{self.config.docker_username}_\", \"\"\n                )\n            else:\n                host_name = \"no info\"\n        except Exception:\n            host_name = \"not available\"\n\n        return host_name\n\n    def delete_files(self) -&gt; None:\n        \"\"\"Delete local temporary files.\"\"\"\n        # Delete menu file if exist (every extension)\n        files = list(\n            pathlib.Path(self.config.db.shared_data_folder).glob(\n                self.config.panel.file_name + \"*\"\n            )\n        )\n        log.info(f\"delete files {', '.join([f.name for f in files])}\")\n        for file in files:\n            file.unlink(missing_ok=True)\n\n    def clean_tables(self) -&gt; None:\n        \"\"\"Clean tables that should be reset when a new menu is uploaded.\"\"\"\n        # Clean tables\n        # Clean orders\n        models.Orders.clear(config=self.config)\n        # Clean menu\n        models.Menu.clear(config=self.config)\n        # Clean users\n        models.Users.clear(config=self.config)\n        # Clean flags\n        models.Flags.clear_guest_override(config=self.config)\n        # Reset flags\n        self.database_connector.set_flag(id=\"no_more_orders\", value=False)\n        log.info(\"reset values in table 'flags'\")\n        # Clean cache\n        pn.state.clear_caches()\n        log.info(\"cache cleaned\")\n\n    def build_menu(\n        self,\n        event: param.parameterized.Event,\n        app: pn.Template,\n        gi: gui.GraphicInterface,\n    ) -&gt; None:\n        \"\"\"Read menu from file (Excel or image) and upload menu items to database `menu` table.\n\n        Args:\n            event (param.parameterized.Event): Panel button event.\n            app (pn.Template): Panel app template (used to open modal windows in case of database errors).\n            gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n        \"\"\"\n        # Hide messages\n        gi.error_message.visible = False\n\n        # Build image path\n        menu_filename = str(\n            pathlib.Path(self.config.db.shared_data_folder)\n            / self.config.panel.file_name\n        )\n\n        # Delete menu file if exist (every extension)\n        self.delete_files()\n\n        # Load file from widget\n        if gi.file_widget.value is not None:\n            # Find file extension\n            file_ext = pathlib.PurePath(gi.file_widget.filename).suffix\n\n            # Save file locally\n            local_menu_filename = menu_filename + file_ext\n            gi.file_widget.save(local_menu_filename)\n\n            # Clean tables\n            self.clean_tables()\n\n            # File can be either an excel file or an image\n            if file_ext == \".png\" or file_ext == \".jpg\" or file_ext == \".jpeg\":\n                # Transform image into a pandas DataFrame\n                # Open image with PIL\n                img = Image.open(local_menu_filename)\n                # Extract text from image\n                text = pytesseract.image_to_string(img, lang=\"ita\")\n                # Process rows (rows that are completely uppercase are section titles)\n                rows = [\n                    row\n                    for row in text.split(\"\\n\")\n                    if row and not row.isupper()\n                ]\n                df = pd.DataFrame({\"item\": rows})\n                # Concat additional items\n                df = pd.concat(\n                    [\n                        df,\n                        pd.DataFrame(\n                            {\n                                \"item\": [\n                                    item[\"name\"]\n                                    for item in self.config.panel.additional_items_to_concat\n                                ]\n                            }\n                        ),\n                    ],\n                    axis=\"index\",\n                )\n\n            elif file_ext == \".xlsx\":\n                log.info(\"excel file uploaded\")\n                df = pd.read_excel(\n                    local_menu_filename, names=[\"item\"], header=None\n                )\n                # Concat additional items\n                df = pd.concat(\n                    [\n                        df,\n                        pd.DataFrame(\n                            {\n                                \"item\": [\n                                    item[\"name\"]\n                                    for item in self.config.panel.additional_items_to_concat\n                                ]\n                            }\n                        ),\n                    ],\n                    axis=\"index\",\n                    ignore_index=True,\n                )\n            else:\n                df = pd.DataFrame()\n                pn.state.notifications.error(\n                    \"Wrong file type\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                log.warning(\"wrong file type\")\n                return\n\n            # Upload to database menu table\n            try:\n                num_rows_written = models.Menu.write_from_df(\n                    config=self.config,\n                    df=df.drop_duplicates(subset=\"item\"),\n                    index=False,\n                )\n                # Update dataframe widget\n                self.reload_menu(\n                    None,\n                    gi,\n                )\n\n                pn.state.notifications.success(\n                    \"Menu uploaded\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                log.info(f\"menu uploaded ({num_rows_written} rows)\")\n            except Exception as e:\n                # Any exception here is a database fault\n                pn.state.notifications.error(\n                    \"Database error\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                gi.error_message.object = (\n                    f\"DATABASE ERROR&lt;br&gt;&lt;br&gt;ERROR:&lt;br&gt;{str(e)}\"\n                )\n                gi.error_message.visible = True\n                log.warning(\"database error\")\n                # Open modal window\n                app.open_modal()\n\n        else:\n            pn.state.notifications.warning(\n                \"No file selected\",\n                duration=self.config.panel.notifications.duration,\n            )\n            log.warning(\"no file selected\")\n\n    def reload_menu(\n        self,\n        event: param.parameterized.Event,\n        gi: gui.GraphicInterface,\n    ) -&gt; None:\n        \"\"\"Main core function that sync Panel widget with database tables.\n\n        Stop orders and guest override checks are carried out by this function.\n        Also the banner image is shown based on a check run by this function.\n\n        `menu`, `orders` and `users` tables are used to build a list of orders for each lunch time.\n        Takeaway orders are evaluated separately.\n\n        At the end stats about lunches are calculated and loaded to database. Finally\n        statistics (values and table) shown inside the app are updated accordingly.\n\n        Args:\n            event (param.parameterized.Event): Panel button event.\n            gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n        \"\"\"\n\n        # Create session\n        session = self.database_connector.create_session()\n\n        with session:\n            # Check if someone changed the \"no_more_order\" toggle\n            if (\n                gi.toggle_no_more_order_button.value\n                != self.database_connector.get_flag(id=\"no_more_orders\")\n            ):\n                # The following statement will trigger the toggle callback\n                # which will call reload_menu once again\n                # This is the reason why this if contains a return (without the return\n                # the content will be reloaded twice)\n                gi.toggle_no_more_order_button.value = (\n                    self.database_connector.get_flag(id=\"no_more_orders\")\n                )\n\n                return\n\n            # Check guest override button status (if not in table use False)\n            gi.toggle_guest_override_button.value = (\n                self.database_connector.get_flag(\n                    id=f\"{self.auth_user.name}_guest_override\",\n                    value_if_missing=False,\n                )\n            )\n\n            # Set no more orders toggle button and the change order time button\n            # visibility and activation\n            if self.auth_user.is_guest(allow_override=False):\n                # Deactivate the no_more_orders_button for guest users\n                gi.toggle_no_more_order_button.disabled = True\n                gi.toggle_no_more_order_button.visible = False\n                # Deactivate the change_order_time_button for guest users\n                gi.change_order_time_takeaway_button.disabled = True\n                gi.change_order_time_takeaway_button.visible = False\n            else:\n                # Activate the no_more_orders_button for privileged users\n                gi.toggle_no_more_order_button.disabled = False\n                gi.toggle_no_more_order_button.visible = True\n                # Show the change_order_time_button for privileged users\n                # It is disabled by the no more order button if necessary\n                gi.change_order_time_takeaway_button.visible = True\n\n            # Guest graphic configuration\n            if self.auth_user.is_guest():\n                # If guest show guest type selection group\n                gi.person_widget.widgets[\"guest\"].disabled = False\n                gi.person_widget.widgets[\"guest\"].visible = True\n            else:\n                # If user is privileged hide guest type selection group\n                gi.person_widget.widgets[\"guest\"].disabled = True\n                gi.person_widget.widgets[\"guest\"].visible = False\n\n            # Reload menu\n            df = models.Menu.read_as_df(\n                config=self.config,\n                index_col=\"id\",\n            )\n            # Add order (for selecting items) and note columns\n            df[\"order\"] = False\n            df[self.config.panel.gui.note_column_name] = \"\"\n            gi.dataframe.value = df\n            gi.dataframe.formatters = {\"order\": {\"type\": \"tickCross\"}}\n            gi.dataframe.editors = {\n                \"id\": None,\n                \"item\": None,\n                \"order\": CheckboxEditor(),\n                self.config.panel.gui.note_column_name: \"input\",\n            }\n            gi.dataframe.header_align = OmegaConf.to_container(\n                self.config.panel.gui.menu_column_align, resolve=True\n            )\n            gi.dataframe.text_align = OmegaConf.to_container(\n                self.config.panel.gui.menu_column_align, resolve=True\n            )\n\n            if gi.toggle_no_more_order_button.value:\n                gi.dataframe.hidden_columns = [\"id\", \"order\"]\n                gi.dataframe.disabled = True\n            else:\n                gi.dataframe.hidden_columns = [\"id\"]\n                gi.dataframe.disabled = False\n\n            # If menu is empty show banner image, otherwise show menu\n            if df.empty:\n                gi.no_menu_col.visible = True\n                gi.main_header_row.visible = False\n                gi.quote.visible = False\n                gi.menu_flexbox.visible = False\n                gi.buttons_flexbox.visible = False\n                gi.results_divider.visible = False\n                gi.res_col.visible = False\n            else:\n                gi.no_menu_col.visible = False\n                gi.main_header_row.visible = True\n                gi.quote.visible = True\n                gi.menu_flexbox.visible = True\n                gi.buttons_flexbox.visible = True\n                gi.results_divider.visible = True\n                gi.res_col.visible = True\n\n            log.debug(\"menu reloaded\")\n\n            # Load results\n            df_dict = self.df_list_by_lunch_time()\n            # Clean columns and load text and dataframes\n            gi.res_col.clear()\n            gi.time_col.clear()\n            if df_dict:\n                # Titles\n                gi.res_col.append(self.config.panel.result_column_text)\n                gi.time_col.append(gi.time_col_title)\n                # Build guests list (one per each guest types)\n                guests_lists = {}\n                for guest_type in self.config.panel.guest_types:\n                    guests_lists[guest_type] = [\n                        user.id\n                        for user in session.scalars(\n                            select(models.Users).where(\n                                models.Users.guest == guest_type\n                            )\n                        ).all()\n                    ]\n                # Loop through lunch times\n                for time, df in df_dict.items():\n                    # Find the number of grumbling stomachs\n                    grumbling_stomachs = len(\n                        [\n                            c\n                            for c in df.columns\n                            if c\n                            not in (\n                                self.config.panel.gui.total_column_name,\n                                self.config.panel.gui.note_column_name,\n                            )\n                        ]\n                    )\n                    # Set different graphics for takeaway lunches\n                    if self.config.panel.gui.takeaway_id in time:\n                        res_col_label_kwargs = {\n                            \"time\": time.replace(\n                                self.config.panel.gui.takeaway_id, \"\"\n                            ),\n                            \"diners_n\": grumbling_stomachs,\n                            \"emoji\": self.config.panel.gui.takeaway_emoji,\n                            \"is_takeaway\": True,\n                            \"takeaway_alert_sign\": f\"&amp;nbsp{gi.takeaway_alert_sign}&amp;nbsp{gi.takeaway_alert_text}\",\n                            \"css_classes\": OmegaConf.to_container(\n                                self.config.panel.gui.takeaway_class_res_col,\n                                resolve=True,\n                            ),\n                            \"stylesheets\": [\n                                self.config.panel.gui.css_files.labels_path\n                            ],\n                        }\n                        time_col_label_kwargs = {\n                            \"time\": time.replace(\n                                self.config.panel.gui.takeaway_id, \"\"\n                            ),\n                            \"diners_n\": str(grumbling_stomachs) + \"&amp;nbsp\",\n                            \"separator\": \"&lt;br&gt;\",\n                            \"emoji\": self.config.panel.gui.takeaway_emoji,\n                            \"align\": (\"center\", \"center\"),\n                            \"sizing_mode\": \"stretch_width\",\n                            \"is_takeaway\": True,\n                            \"takeaway_alert_sign\": gi.takeaway_alert_sign,\n                            \"css_classes\": OmegaConf.to_container(\n                                self.config.panel.gui.takeaway_class_time_col,\n                                resolve=True,\n                            ),\n                            \"stylesheets\": [\n                                self.config.panel.gui.css_files.labels_path\n                            ],\n                        }\n                    else:\n                        res_col_label_kwargs = {\n                            \"time\": time,\n                            \"diners_n\": grumbling_stomachs,\n                            \"emoji\": random.choice(\n                                self.config.panel.gui.food_emoji\n                            ),\n                            \"css_classes\": OmegaConf.to_container(\n                                self.config.panel.gui.time_class_res_col,\n                                resolve=True,\n                            ),\n                            \"stylesheets\": [\n                                self.config.panel.gui.css_files.labels_path\n                            ],\n                        }\n                        time_col_label_kwargs = {\n                            \"time\": time,\n                            \"diners_n\": str(grumbling_stomachs) + \"&amp;nbsp\",\n                            \"separator\": \"&lt;br&gt;\",\n                            \"emoji\": self.config.panel.gui.restaurant_emoji,\n                            \"per_icon\": \"&amp;#10006; \",\n                            \"align\": (\"center\", \"center\"),\n                            \"sizing_mode\": \"stretch_width\",\n                            \"css_classes\": OmegaConf.to_container(\n                                self.config.panel.gui.time_class_time_col,\n                                resolve=True,\n                            ),\n                            \"stylesheets\": [\n                                self.config.panel.gui.css_files.labels_path\n                            ],\n                        }\n                    # Add text to result column\n                    gi.res_col.append(pn.Spacer(height=15))\n                    gi.res_col.append(\n                        gi.build_time_label(**res_col_label_kwargs)\n                    )\n                    # Add non editable table to result column\n                    gi.res_col.append(pn.Spacer(height=5))\n                    gi.res_col.append(\n                        gi.build_order_table(\n                            self.config,\n                            df=df,\n                            time=time,\n                            guests_lists=guests_lists,\n                        )\n                    )\n                    # Add also a label to lunch time column\n                    gi.time_col.append(\n                        gi.build_time_label(**time_col_label_kwargs)\n                    )\n\n            log.debug(\"results reloaded\")\n\n            # Clean stats column\n            gi.sidebar_stats_col.clear()\n            # Update stats\n            # Find how many people eat today (total number) and add value to database\n            # stats table (when adding a stats if guest is not specified None is used\n            # as default)\n            today_locals_count = session.scalar(\n                select(func.count(models.Users.id)).where(\n                    models.Users.guest == \"NotAGuest\"\n                )\n            )\n            new_stat = models.Stats(hungry_people=today_locals_count)\n            # Use an upsert for postgresql, a simple session add otherwise\n            models.DatabaseConnector.session_add_with_upsert(\n                session=session, constraint=\"stats_pkey\", new_record=new_stat\n            )\n            # For each guest type find how many guests eat today\n            for guest_type in self.config.panel.guest_types:\n                today_guests_count = session.scalar(\n                    select(func.count(models.Users.id)).where(\n                        models.Users.guest == guest_type\n                    )\n                )\n                new_stat = models.Stats(\n                    guest=guest_type, hungry_people=today_guests_count\n                )\n                # Use an upsert for postgresql, a simple session add otherwise\n                models.DatabaseConnector.session_add_with_upsert(\n                    session=session,\n                    constraint=\"stats_pkey\",\n                    new_record=new_stat,\n                )\n\n            # Commit stats\n            session.commit()\n\n            # Group stats by month and return how many people had lunch\n            df_stats = self.database_connector.read_sql_query(\n                session=session,\n                query=self.config.db.stats_query.format(\n                    schema=self.config.db.get(\"schema\", models.SCHEMA)\n                ),\n            )\n            # Stats top text\n            stats_and_info_text = gi.build_stats_and_info_text(\n                auth_user=self.auth_user,\n                df_stats=df_stats,\n                version=__version__,\n                host_name=self.hostname,\n                stylesheets=[self.config.panel.gui.css_files.stats_info_path],\n            )\n            # Remove NotAGuest (non-guest users)\n            df_stats.Guest = df_stats.Guest.replace(\n                \"NotAGuest\", self.config.panel.stats_locals_column_name\n            )\n            # Pivot table on guest type\n            df_stats = df_stats.pivot(\n                columns=\"Guest\",\n                index=self.config.panel.stats_id_cols,\n                values=\"Hungry People\",\n            ).reset_index()\n            df_stats[self.config.panel.gui.total_column_name.title()] = (\n                df_stats.sum(axis=\"columns\", numeric_only=True)\n            )\n            # Add value and non-editable option to stats table\n            gi.stats_widget.editors = {c: None for c in df_stats.columns}\n            gi.stats_widget.value = df_stats\n            gi.sidebar_stats_col.append(stats_and_info_text[\"stats\"])\n            gi.sidebar_stats_col.append(gi.stats_widget)\n            # Add info below person widget (an empty placeholder was left as last\n            # element)\n            gi.sidebar_person_column.objects[-1] = stats_and_info_text[\"info\"]\n            log.debug(\"stats and info updated\")\n\n    def send_order(\n        self,\n        event: param.parameterized.Event,\n        app: pn.Template,\n        person: gui.Person,\n        gi: gui.GraphicInterface,\n    ) -&gt; None:\n        \"\"\"Upload orders and user to database tables.\n\n        The user target of the order is uploaded to `users` table, while the order\n        is uploaded to `orders` table.\n\n        Consistency checks about the user and the order are carried out here (existing user, only one order, etc.).\n        The status of the `stop_orders` flag is checked to avoid that an order is uploaded when it shouldn't.\n\n        Orders for guest users are marked as such before uploading them.\n\n        Args:\n            event (param.parameterized.Event): Panel button event.\n            app (pn.Template): Panel app template (used to open modal windows in case of database errors).\n            person (gui.Person): class that collect order data for the user that is the target of the order.\n            gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n        \"\"\"\n\n        # Get username updated at each key press\n        username_key_press = gi.person_widget._widgets[\"username\"].value_input\n\n        # Hide messages\n        gi.error_message.visible = False\n\n        # Create session\n        session = self.database_connector.create_session()\n\n        with session:\n            # Check if the \"no more order\" toggle button is pressed\n            if self.database_connector.get_flag(id=\"no_more_orders\"):\n                pn.state.notifications.error(\n                    \"It is not possible to place new orders\",\n                    duration=self.config.panel.notifications.duration,\n                )\n\n                # Reload the menu\n                self.reload_menu(\n                    None,\n                    gi,\n                )\n\n                return\n\n            # If auth is active, check if a guests is using a name reserved to a\n            # privileged user\n            if (\n                self.auth_user.is_guest()\n                and (\n                    username_key_press\n                    in self.auth_user.auth_context.list_privileged_users()\n                )\n                and (self.auth_user.auth_context.is_auth_active())\n            ):\n                pn.state.notifications.error(\n                    f\"{username_key_press} is a reserved name&lt;br&gt;Please choose a different one\",\n                    duration=self.config.panel.notifications.duration,\n                )\n\n                # Reload the menu\n                self.reload_menu(\n                    None,\n                    gi,\n                )\n\n                return\n\n            # Check if a privileged user is ordering for an invalid name\n            if (\n                not self.auth_user.is_guest()\n                and (\n                    username_key_press\n                    not in (\n                        name\n                        for name in self.auth_user.auth_context.list_privileged_users()\n                        if name != \"guest\"\n                    )\n                )\n                and (self.auth_user.auth_context.is_auth_active())\n            ):\n                pn.state.notifications.error(\n                    f\"{username_key_press} is not a valid name&lt;br&gt;for a privileged user&lt;br&gt;Please choose a different one\",\n                    duration=self.config.panel.notifications.duration,\n                )\n\n                # Reload the menu\n                self.reload_menu(\n                    None,\n                    gi,\n                )\n\n                return\n\n            # Write order into database table\n            df = gi.dataframe.value.copy()\n            df_order = df[df.order]\n            # If username is missing or the order is empty return an error message\n            if username_key_press and not df_order.empty:\n                # Check if the user already placed an order\n                if session.get(models.Users, username_key_press):\n                    pn.state.notifications.warning(\n                        f\"Cannot overwrite an order&lt;br&gt;Delete {username_key_press}'s order first and retry\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    log.warning(\n                        f\"an order already exist for {username_key_press}\"\n                    )\n                else:\n                    # Place order\n                    try:\n                        # Add User\n                        # Do not pass guest for privileged users (default to NotAGuest)\n                        if self.auth_user.is_guest():\n                            new_user = models.Users(\n                                id=username_key_press,\n                                guest=person.guest,\n                                lunch_time=person.lunch_time,\n                                takeaway=person.takeaway,\n                            )\n                        else:\n                            new_user = models.Users(\n                                id=username_key_press,\n                                lunch_time=person.lunch_time,\n                                takeaway=person.takeaway,\n                            )\n                        session.add(new_user)\n                        session.commit()\n                        # Add orders as long table (one row for each item selected by a user)\n                        for row in df_order.itertuples(name=\"OrderTuple\"):\n                            # Order\n                            new_order = models.Orders(\n                                user=username_key_press,\n                                menu_item_id=row.Index,\n                                note=getattr(\n                                    row, self.config.panel.gui.note_column_name\n                                ).lower(),\n                            )\n                            session.add(new_order)\n                            session.commit()\n\n                        # Update dataframe widget\n                        self.reload_menu(\n                            None,\n                            gi,\n                        )\n\n                        pn.state.notifications.success(\n                            \"Order sent\",\n                            duration=self.config.panel.notifications.duration,\n                        )\n                        log.info(f\"{username_key_press}'s order saved\")\n                    except Exception as e:\n                        # Any exception here is a database fault\n                        pn.state.notifications.error(\n                            \"Database error\",\n                            duration=self.config.panel.notifications.duration,\n                        )\n                        gi.error_message.object = (\n                            f\"DATABASE ERROR&lt;br&gt;&lt;br&gt;ERROR:&lt;br&gt;{str(e)}\"\n                        )\n                        gi.error_message.visible = True\n                        log.error(\"database error\")\n                        # Open modal window\n                        app.open_modal()\n            else:\n                if not username_key_press:\n                    pn.state.notifications.warning(\n                        \"Please insert user name\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    log.warning(\"missing username\")\n                else:\n                    pn.state.notifications.warning(\n                        \"Please make a selection\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    log.warning(\"no selection made\")\n\n    def delete_order(\n        self,\n        event: param.parameterized.Event,\n        app: pn.Template,\n        gi: gui.GraphicInterface,\n    ) -&gt; None:\n        \"\"\"Delete an existing order.\n\n        Consistency checks about the user and the order are carried out here (existing user, only one order, etc.).\n        The status of the `stop_orders` flag is checked to avoid that an order is uploaded when it shouldn't.\n\n        In addition privileges are taken into account (guest users cannot delete orders that targets a privileged user).\n\n        Args:\n            event (param.parameterized.Event): Panel button event.\n            app (pn.Template): Panel app template (used to open modal windows in case of database errors).\n            gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n        \"\"\"\n\n        # Get username, updated on every keypress\n        username_key_press = gi.person_widget._widgets[\"username\"].value_input\n\n        # Hide messages\n        gi.error_message.visible = False\n\n        # Create session\n        session = self.database_connector.create_session()\n\n        with session:\n            # Check if the \"no more order\" toggle button is pressed\n            if self.database_connector.get_flag(id=\"no_more_orders\"):\n                pn.state.notifications.error(\n                    \"It is not possible to delete orders\",\n                    duration=self.config.panel.notifications.duration,\n                )\n\n                # Reload the menu\n                self.reload_menu(\n                    None,\n                    gi,\n                )\n\n                return\n\n            if username_key_press:\n                # If auth is active, check if a guests is deleting an order of a\n                # privileged user\n                if (\n                    self.auth_user.is_guest()\n                    and (\n                        username_key_press\n                        in self.auth_user.auth_context.list_privileged_users()\n                    )\n                    and (self.auth_user.auth_context.is_auth_active())\n                ):\n                    pn.state.notifications.error(\n                        f\"You do not have enough privileges&lt;br&gt;to delete&lt;br&gt;{username_key_press}'s order\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n\n                    # Reload the menu\n                    self.reload_menu(\n                        None,\n                        gi,\n                    )\n\n                    return\n\n                # Delete user\n                try:\n                    num_rows_deleted_users = session.execute(\n                        delete(models.Users).where(\n                            models.Users.id == username_key_press\n                        )\n                    )\n                    # Delete also orders (hotfix for Debian)\n                    num_rows_deleted_orders = session.execute(\n                        delete(models.Orders).where(\n                            models.Orders.user == username_key_press\n                        )\n                    )\n                    session.commit()\n                    if (num_rows_deleted_users.rowcount &gt; 0) or (\n                        num_rows_deleted_orders.rowcount &gt; 0\n                    ):\n                        # Update dataframe widget\n                        self.reload_menu(\n                            None,\n                            gi,\n                        )\n\n                        pn.state.notifications.success(\n                            \"Order canceled\",\n                            duration=self.config.panel.notifications.duration,\n                        )\n                        log.info(f\"{username_key_press}'s order canceled\")\n                    else:\n                        pn.state.notifications.warning(\n                            f'No order for user named&lt;br&gt;\"{username_key_press}\"',\n                            duration=self.config.panel.notifications.duration,\n                        )\n                        log.info(\n                            f\"no order for user named {username_key_press}\"\n                        )\n                except Exception as e:\n                    # Any exception here is a database fault\n                    pn.state.notifications.error(\n                        \"Database error\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    gi.error_message.object = (\n                        f\"DATABASE ERROR&lt;br&gt;&lt;br&gt;ERROR:&lt;br&gt;{str(e)}\"\n                    )\n                    gi.error_message.visible = True\n                    log.error(\"database error\")\n                    # Open modal window\n                    app.open_modal()\n            else:\n                pn.state.notifications.warning(\n                    \"Please insert user name\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                log.warning(\"missing username\")\n\n    def change_order_time_takeaway(\n        self,\n        event: param.parameterized.Event,\n        person: gui.Person,\n        gi: gui.GraphicInterface,\n    ) -&gt; None:\n        \"\"\"Change the time and the takeaway flag of an existing order.\n\n        Args:\n            event (param.parameterized.Event): Panel button event.\n            person (gui.Person): class that collect order data for the user that is the target of the order.\n            gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n        \"\"\"\n        # Get username, updated on every keypress\n        username_key_press = gi.person_widget._widgets[\"username\"].value_input\n\n        # Create session\n        session = self.database_connector.create_session()\n\n        with session:\n            # Check if the \"no more order\" toggle button is pressed\n            if self.database_connector.get_flag(id=\"no_more_orders\"):\n                pn.state.notifications.error(\n                    \"It is not possible to update orders (time)\",\n                    duration=self.config.panel.notifications.duration,\n                )\n\n                # Reload the menu\n                self.reload_menu(\n                    None,\n                    gi,\n                )\n\n                return\n\n            if username_key_press:\n                # Build and execute the update statement\n                update_statement = (\n                    update(models.Users)\n                    .where(models.Users.id == username_key_press)\n                    .values(\n                        lunch_time=person.lunch_time, takeaway=person.takeaway\n                    )\n                    .returning(models.Users)\n                )\n\n                updated_user = session.scalars(update_statement).one_or_none()\n\n                session.commit()\n\n                if updated_user:\n                    # Find updated values\n                    updated_time = updated_user.lunch_time\n                    updated_takeaway = (\n                        (\" \" + self.config.panel.gui.takeaway_id)\n                        if updated_user.takeaway\n                        else \"\"\n                    )\n                    updated_items_names = [\n                        order.menu_item.item for order in updated_user.orders\n                    ]\n                    # Update dataframe widget\n                    self.reload_menu(\n                        None,\n                        gi,\n                    )\n\n                    pn.state.notifications.success(\n                        f\"{username_key_press}'s&lt;br&gt;lunch time changed to&lt;br&gt;{updated_time}{updated_takeaway}&lt;br&gt;({', '.join(updated_items_names)})\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    log.info(f\"{username_key_press}'s order updated\")\n                else:\n                    pn.state.notifications.warning(\n                        f'No order for user named&lt;br&gt;\"{username_key_press}\"',\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    log.info(f\"no order for user named {username_key_press}\")\n            else:\n                pn.state.notifications.warning(\n                    \"Please insert user name\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                log.warning(\"missing username\")\n\n    def df_list_by_lunch_time(\n        self,\n    ) -&gt; dict:\n        \"\"\"Build a dictionary of dataframes for each lunch-time, with takeaways included in a dedicated dataframe.\n\n        Each datframe includes orders grouped by users, notes and a total column (with the total value\n        for a specific item).\n\n        The keys of the dataframe are `lunch-times` and `lunch-times + takeaway_id`.\n\n        Returns:\n            dict: dictionary with dataframes summarizing the orders for each lunch-time/takeaway-time.\n        \"\"\"\n        # Read menu and save how menu items are sorted (first courses, second courses, etc.)\n        original_order = models.Menu.read_as_df(\n            config=self.config,\n            index_col=\"id\",\n        ).item\n        # Create session\n        session = self.database_connector.create_session()\n\n        with session:\n            # Build takeaway list\n            takeaway_list = [\n                user.id\n                for user in session.scalars(\n                    select(models.Users).where(\n                        models.Users.takeaway == sql_true()\n                    )\n                ).all()\n            ]\n        # Read orders dataframe (including notes)\n        df = self.database_connector.read_sql_query(\n            session=session,\n            query=self.config.db.orders_query.format(\n                schema=self.config.db.get(\"schema\", models.SCHEMA)\n            ),\n        )\n\n        # The following function prepare the dataframe before saving it into\n        # the dictionary that will be returned\n        def _clean_up_table(\n            config: DictConfig,\n            df_in: pd.DataFrame,\n            df_complete: pd.DataFrame,\n        ):\n            df = df_in.copy()\n            # Group notes per menu item by concat users notes\n            # Use value counts to keep track of how many time a note is repeated\n            df_notes = (\n                df_complete[\n                    (df_complete.lunch_time == time)\n                    &amp; (df_complete.note != \"\")\n                    &amp; (df_complete.user.isin(df.columns))\n                ]\n                .drop(columns=[\"user\", \"lunch_time\"])\n                .value_counts()\n                .reset_index(level=\"note\")\n            )\n            df_notes.note = (\n                df_notes[\"count\"]\n                .astype(str)\n                .str.cat(df_notes.note, sep=config.panel.gui.note_sep.count)\n            )\n            df_notes = df_notes.drop(columns=\"count\")\n            df_notes = (\n                df_notes.groupby(\"item\")[\"note\"]\n                .apply(config.panel.gui.note_sep.element.join)\n                .to_frame()\n            )\n            # Add columns of totals\n            df[config.panel.gui.total_column_name] = df.sum(axis=1)\n            # Drop unused rows if requested\n            if config.panel.drop_unused_menu_items:\n                df = df[df[config.panel.gui.total_column_name] &gt; 0]\n            # Add notes\n            df = df.join(df_notes)\n            df = df.rename(columns={\"note\": config.panel.gui.note_column_name})\n            # Change NaNs to '-'\n            df = df.fillna(\"-\")\n            # Avoid mixed types (float and notes str)\n            df = df.astype(object)\n\n            return df\n\n        # Build a dict of dataframes, one for each lunch time\n        df_dict = {}\n        for time in df.lunch_time.sort_values().unique():\n            # Take only one lunch time (and remove notes so they do not alter\n            # numeric counters inside the pivot table)\n            temp_df = (\n                df[df.lunch_time == time]\n                .drop(columns=[\"lunch_time\", \"note\"])\n                .reset_index(drop=True)\n            )\n            # Users' selections\n            df_users = temp_df.pivot_table(\n                index=\"item\", columns=\"user\", aggfunc=len\n            )\n            # Reorder index in accordance with original menu\n            df_users = df_users.reindex(original_order)\n            # Split restaurant lunches from takeaway lunches\n            df_users_restaurant = df_users.loc[\n                :, [c for c in df_users.columns if c not in takeaway_list]\n            ]\n            df_users_takeaways = df_users.loc[\n                :, [c for c in df_users.columns if c in takeaway_list]\n            ]\n\n            # Clean and add resulting dataframes to dict\n            # RESTAURANT LUNCH\n            if not df_users_restaurant.empty:\n                df_users_restaurant = _clean_up_table(\n                    self.config, df_users_restaurant, df\n                )\n                df_dict[time] = df_users_restaurant\n            # TAKEAWAY\n            if not df_users_takeaways.empty:\n                df_users_takeaways = _clean_up_table(\n                    self.config, df_users_takeaways, df\n                )\n                df_dict[f\"{time} {self.config.panel.gui.takeaway_id}\"] = (\n                    df_users_takeaways\n                )\n\n        return df_dict\n\n    def download_dataframe(\n        self,\n        gi: gui.GraphicInterface,\n    ) -&gt; BytesIO:\n        \"\"\"Build an Excel file with tables representing orders for every lunch-time/takeaway-time.\n\n        Tables are created by the function `df_list_by_lunch_time` and exported on dedicated Excel worksheets\n        (inside the same workbook).\n\n        The result is returned as bytes stream to satisfy panel.widgets.FileDownload class requirements.\n\n        Args:\n            gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n\n        Returns:\n            BytesIO: download stream for the Excel file.\n        \"\"\"\n\n        # Build a dict of dataframes, one for each lunch time (the key contains\n        # a lunch time)\n        df_dict = self.df_list_by_lunch_time()\n        # Export one dataframe for each lunch time\n        bytes_io = BytesIO()\n        writer = pd.ExcelWriter(bytes_io)\n        # If the dataframe dict is non-empty export one dataframe for each sheet\n        if df_dict:\n            for time, df in df_dict.items():\n                log.info(f\"writing sheet {time}\")\n\n                # Find users that placed an order for a given time\n                users_n = len(\n                    [\n                        c\n                        for c in df.columns\n                        if c\n                        not in (\n                            self.config.panel.gui.total_column_name,\n                            self.config.panel.gui.note_column_name,\n                        )\n                    ]\n                )\n\n                # Export dataframe to new sheet\n                worksheet_name = time.replace(\":\", \".\")\n                df.to_excel(writer, sheet_name=worksheet_name, startrow=1)\n                # Add title\n                worksheet = writer.sheets[worksheet_name]\n                worksheet.cell(\n                    1,\n                    1,\n                    f\"Time - {time} | # {users_n}\",\n                )\n\n                # HEADER FORMAT\n                worksheet[\"A1\"].font = Font(\n                    size=13, bold=True, color=\"00FF0000\"\n                )\n\n                # INDEX ALIGNMENT\n                for row in worksheet[worksheet.min_row : worksheet.max_row]:\n                    cell = row[0]  # column A\n                    cell.alignment = Alignment(horizontal=\"left\")\n                    cell = row[users_n + 2]  # column note\n                    cell.alignment = Alignment(horizontal=\"left\")\n                    cells = row[1 : users_n + 2]  # from column B to note-1\n                    for cell in cells:\n                        cell.alignment = Alignment(horizontal=\"center\")\n\n                # AUTO SIZE\n                # Set auto-size for all columns\n                # Use end +1 for ID column, and +2 for 'total' and 'note' columns\n                column_letters = get_column_interval(\n                    start=1, end=users_n + 1 + 2\n                )\n                # Get columns\n                columns = worksheet[column_letters[0] : column_letters[-1]]\n                for column_letter, column in zip(column_letters, columns):\n                    # Instantiate max length then loop on cells to find max value\n                    max_length = 0\n                    # Cell loop\n                    for cell in column:\n                        log.debug(\n                            f\"autosize for cell {cell.coordinate} with value '{cell.value}'\"\n                        )\n                        try:  # Necessary to avoid error on empty cells\n                            if len(str(cell.value)) &gt; max_length:\n                                max_length = len(cell.value)\n                                log.debug(\n                                    f\"new max length set to {max_length}\"\n                                )\n                        except Exception:\n                            log.debug(\"empty cell\")\n                    log.debug(f\"final max length is {max_length}\")\n                    adjusted_width = (max_length + 2) * 0.85\n                    log.debug(\n                        f\"adjusted width for column '{column_letter}' is {adjusted_width}\"\n                    )\n                    worksheet.column_dimensions[column_letter].width = (\n                        adjusted_width\n                    )\n                # Since grouping fix width equal to first column width (openpyxl\n                # bug), set first column of users' order equal to max width of\n                # all users columns to avoid issues\n                max_width = 0\n                log.debug(\n                    f\"find max width for users' columns '{column_letters[1]}:{column_letters[-3]}'\"\n                )\n                for column_letter in column_letters[1:-2]:\n                    max_width = max(\n                        max_width,\n                        worksheet.column_dimensions[column_letter].width,\n                    )\n                log.debug(f\"max width for first users' columns is {max_width}\")\n                worksheet.column_dimensions[column_letters[1]].width = (\n                    max_width\n                )\n\n                # GROUPING\n                # Group and hide columns, leave only ID, total and note\n                column_letters = get_column_interval(start=2, end=users_n + 1)\n                worksheet.column_dimensions.group(\n                    column_letters[0], column_letters[-1], hidden=True\n                )\n\n                # Close and reset bytes_io for the next dataframe\n                writer.close()  # Important!\n                bytes_io.seek(0)  # Important!\n\n            # Message prompt\n            pn.state.notifications.success(\n                \"File with orders downloaded\",\n                duration=self.config.panel.notifications.duration,\n            )\n            log.info(\"xlsx downloaded\")\n        else:\n            gi.dataframe.value.drop(columns=[\"order\"]).to_excel(\n                writer, sheet_name=\"MENU\", index=False\n            )\n            writer.close()  # Important!\n            bytes_io.seek(0)  # Important!\n            # Message prompt\n            pn.state.notifications.warning(\n                \"No order&lt;br&gt;Menu downloaded\",\n                duration=self.config.panel.notifications.duration,\n            )\n            log.warning(\n                \"no order, menu exported to excel in place of orders' list\"\n            )\n\n        return bytes_io\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.auth_user","title":"auth_user  <code>instance-attribute</code>","text":"<pre><code>auth_user: AuthUser = AuthUser(config=config)\n</code></pre> <p>Object with authenticated user data and related methods</p>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config: DictConfig = config\n</code></pre> <p>Hydra configuration object</p>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.database_connector","title":"database_connector  <code>instance-attribute</code>","text":"<pre><code>database_connector: DatabaseConnector = DatabaseConnector(\n    config=config\n)\n</code></pre> <p>Object that handles database connection and operations</p>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.hostname","title":"hostname  <code>property</code>","text":"<pre><code>hostname: str\n</code></pre> <p>Return hostname.</p> <p>This function behavior changes if called from localhost, Docker container or production server.</p> <p>Returns:</p> Type Description <code>str</code> <p>hostname.</p>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.__init__","title":"__init__","text":"<pre><code>__init__(config: DictConfig)\n</code></pre> Source code in <code>dlunch/core.py</code> <pre><code>def __init__(self, config: DictConfig):\n    self.config: DictConfig = config\n    \"\"\"Hydra configuration object\"\"\"\n    self.auth_user: AuthUser = AuthUser(config=config)\n    \"\"\"Object with authenticated user data and related methods\"\"\"\n    self.database_connector: models.DatabaseConnector = (\n        models.DatabaseConnector(config=config)\n    )\n    \"\"\"Object that handles database connection and operations\"\"\"\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.build_menu","title":"build_menu","text":"<pre><code>build_menu(\n    event: Event, app: Template, gi: GraphicInterface\n) -&gt; None\n</code></pre> <p>Read menu from file (Excel or image) and upload menu items to database <code>menu</code> table.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>Event</code> <p>Panel button event.</p> required <code>app</code> <code>Template</code> <p>Panel app template (used to open modal windows in case of database errors).</p> required <code>gi</code> <code>GraphicInterface</code> <p>graphic interface object (used to interact with Panel widgets).</p> required Source code in <code>dlunch/core.py</code> <pre><code>def build_menu(\n    self,\n    event: param.parameterized.Event,\n    app: pn.Template,\n    gi: gui.GraphicInterface,\n) -&gt; None:\n    \"\"\"Read menu from file (Excel or image) and upload menu items to database `menu` table.\n\n    Args:\n        event (param.parameterized.Event): Panel button event.\n        app (pn.Template): Panel app template (used to open modal windows in case of database errors).\n        gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n    \"\"\"\n    # Hide messages\n    gi.error_message.visible = False\n\n    # Build image path\n    menu_filename = str(\n        pathlib.Path(self.config.db.shared_data_folder)\n        / self.config.panel.file_name\n    )\n\n    # Delete menu file if exist (every extension)\n    self.delete_files()\n\n    # Load file from widget\n    if gi.file_widget.value is not None:\n        # Find file extension\n        file_ext = pathlib.PurePath(gi.file_widget.filename).suffix\n\n        # Save file locally\n        local_menu_filename = menu_filename + file_ext\n        gi.file_widget.save(local_menu_filename)\n\n        # Clean tables\n        self.clean_tables()\n\n        # File can be either an excel file or an image\n        if file_ext == \".png\" or file_ext == \".jpg\" or file_ext == \".jpeg\":\n            # Transform image into a pandas DataFrame\n            # Open image with PIL\n            img = Image.open(local_menu_filename)\n            # Extract text from image\n            text = pytesseract.image_to_string(img, lang=\"ita\")\n            # Process rows (rows that are completely uppercase are section titles)\n            rows = [\n                row\n                for row in text.split(\"\\n\")\n                if row and not row.isupper()\n            ]\n            df = pd.DataFrame({\"item\": rows})\n            # Concat additional items\n            df = pd.concat(\n                [\n                    df,\n                    pd.DataFrame(\n                        {\n                            \"item\": [\n                                item[\"name\"]\n                                for item in self.config.panel.additional_items_to_concat\n                            ]\n                        }\n                    ),\n                ],\n                axis=\"index\",\n            )\n\n        elif file_ext == \".xlsx\":\n            log.info(\"excel file uploaded\")\n            df = pd.read_excel(\n                local_menu_filename, names=[\"item\"], header=None\n            )\n            # Concat additional items\n            df = pd.concat(\n                [\n                    df,\n                    pd.DataFrame(\n                        {\n                            \"item\": [\n                                item[\"name\"]\n                                for item in self.config.panel.additional_items_to_concat\n                            ]\n                        }\n                    ),\n                ],\n                axis=\"index\",\n                ignore_index=True,\n            )\n        else:\n            df = pd.DataFrame()\n            pn.state.notifications.error(\n                \"Wrong file type\",\n                duration=self.config.panel.notifications.duration,\n            )\n            log.warning(\"wrong file type\")\n            return\n\n        # Upload to database menu table\n        try:\n            num_rows_written = models.Menu.write_from_df(\n                config=self.config,\n                df=df.drop_duplicates(subset=\"item\"),\n                index=False,\n            )\n            # Update dataframe widget\n            self.reload_menu(\n                None,\n                gi,\n            )\n\n            pn.state.notifications.success(\n                \"Menu uploaded\",\n                duration=self.config.panel.notifications.duration,\n            )\n            log.info(f\"menu uploaded ({num_rows_written} rows)\")\n        except Exception as e:\n            # Any exception here is a database fault\n            pn.state.notifications.error(\n                \"Database error\",\n                duration=self.config.panel.notifications.duration,\n            )\n            gi.error_message.object = (\n                f\"DATABASE ERROR&lt;br&gt;&lt;br&gt;ERROR:&lt;br&gt;{str(e)}\"\n            )\n            gi.error_message.visible = True\n            log.warning(\"database error\")\n            # Open modal window\n            app.open_modal()\n\n    else:\n        pn.state.notifications.warning(\n            \"No file selected\",\n            duration=self.config.panel.notifications.duration,\n        )\n        log.warning(\"no file selected\")\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.change_order_time_takeaway","title":"change_order_time_takeaway","text":"<pre><code>change_order_time_takeaway(\n    event: Event, person: Person, gi: GraphicInterface\n) -&gt; None\n</code></pre> <p>Change the time and the takeaway flag of an existing order.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>Event</code> <p>Panel button event.</p> required <code>person</code> <code>Person</code> <p>class that collect order data for the user that is the target of the order.</p> required <code>gi</code> <code>GraphicInterface</code> <p>graphic interface object (used to interact with Panel widgets).</p> required Source code in <code>dlunch/core.py</code> <pre><code>def change_order_time_takeaway(\n    self,\n    event: param.parameterized.Event,\n    person: gui.Person,\n    gi: gui.GraphicInterface,\n) -&gt; None:\n    \"\"\"Change the time and the takeaway flag of an existing order.\n\n    Args:\n        event (param.parameterized.Event): Panel button event.\n        person (gui.Person): class that collect order data for the user that is the target of the order.\n        gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n    \"\"\"\n    # Get username, updated on every keypress\n    username_key_press = gi.person_widget._widgets[\"username\"].value_input\n\n    # Create session\n    session = self.database_connector.create_session()\n\n    with session:\n        # Check if the \"no more order\" toggle button is pressed\n        if self.database_connector.get_flag(id=\"no_more_orders\"):\n            pn.state.notifications.error(\n                \"It is not possible to update orders (time)\",\n                duration=self.config.panel.notifications.duration,\n            )\n\n            # Reload the menu\n            self.reload_menu(\n                None,\n                gi,\n            )\n\n            return\n\n        if username_key_press:\n            # Build and execute the update statement\n            update_statement = (\n                update(models.Users)\n                .where(models.Users.id == username_key_press)\n                .values(\n                    lunch_time=person.lunch_time, takeaway=person.takeaway\n                )\n                .returning(models.Users)\n            )\n\n            updated_user = session.scalars(update_statement).one_or_none()\n\n            session.commit()\n\n            if updated_user:\n                # Find updated values\n                updated_time = updated_user.lunch_time\n                updated_takeaway = (\n                    (\" \" + self.config.panel.gui.takeaway_id)\n                    if updated_user.takeaway\n                    else \"\"\n                )\n                updated_items_names = [\n                    order.menu_item.item for order in updated_user.orders\n                ]\n                # Update dataframe widget\n                self.reload_menu(\n                    None,\n                    gi,\n                )\n\n                pn.state.notifications.success(\n                    f\"{username_key_press}'s&lt;br&gt;lunch time changed to&lt;br&gt;{updated_time}{updated_takeaway}&lt;br&gt;({', '.join(updated_items_names)})\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                log.info(f\"{username_key_press}'s order updated\")\n            else:\n                pn.state.notifications.warning(\n                    f'No order for user named&lt;br&gt;\"{username_key_press}\"',\n                    duration=self.config.panel.notifications.duration,\n                )\n                log.info(f\"no order for user named {username_key_press}\")\n        else:\n            pn.state.notifications.warning(\n                \"Please insert user name\",\n                duration=self.config.panel.notifications.duration,\n            )\n            log.warning(\"missing username\")\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.clean_tables","title":"clean_tables","text":"<pre><code>clean_tables() -&gt; None\n</code></pre> <p>Clean tables that should be reset when a new menu is uploaded.</p> Source code in <code>dlunch/core.py</code> <pre><code>def clean_tables(self) -&gt; None:\n    \"\"\"Clean tables that should be reset when a new menu is uploaded.\"\"\"\n    # Clean tables\n    # Clean orders\n    models.Orders.clear(config=self.config)\n    # Clean menu\n    models.Menu.clear(config=self.config)\n    # Clean users\n    models.Users.clear(config=self.config)\n    # Clean flags\n    models.Flags.clear_guest_override(config=self.config)\n    # Reset flags\n    self.database_connector.set_flag(id=\"no_more_orders\", value=False)\n    log.info(\"reset values in table 'flags'\")\n    # Clean cache\n    pn.state.clear_caches()\n    log.info(\"cache cleaned\")\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.delete_files","title":"delete_files","text":"<pre><code>delete_files() -&gt; None\n</code></pre> <p>Delete local temporary files.</p> Source code in <code>dlunch/core.py</code> <pre><code>def delete_files(self) -&gt; None:\n    \"\"\"Delete local temporary files.\"\"\"\n    # Delete menu file if exist (every extension)\n    files = list(\n        pathlib.Path(self.config.db.shared_data_folder).glob(\n            self.config.panel.file_name + \"*\"\n        )\n    )\n    log.info(f\"delete files {', '.join([f.name for f in files])}\")\n    for file in files:\n        file.unlink(missing_ok=True)\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.delete_order","title":"delete_order","text":"<pre><code>delete_order(\n    event: Event, app: Template, gi: GraphicInterface\n) -&gt; None\n</code></pre> <p>Delete an existing order.</p> <p>Consistency checks about the user and the order are carried out here (existing user, only one order, etc.). The status of the <code>stop_orders</code> flag is checked to avoid that an order is uploaded when it shouldn't.</p> <p>In addition privileges are taken into account (guest users cannot delete orders that targets a privileged user).</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>Event</code> <p>Panel button event.</p> required <code>app</code> <code>Template</code> <p>Panel app template (used to open modal windows in case of database errors).</p> required <code>gi</code> <code>GraphicInterface</code> <p>graphic interface object (used to interact with Panel widgets).</p> required Source code in <code>dlunch/core.py</code> <pre><code>def delete_order(\n    self,\n    event: param.parameterized.Event,\n    app: pn.Template,\n    gi: gui.GraphicInterface,\n) -&gt; None:\n    \"\"\"Delete an existing order.\n\n    Consistency checks about the user and the order are carried out here (existing user, only one order, etc.).\n    The status of the `stop_orders` flag is checked to avoid that an order is uploaded when it shouldn't.\n\n    In addition privileges are taken into account (guest users cannot delete orders that targets a privileged user).\n\n    Args:\n        event (param.parameterized.Event): Panel button event.\n        app (pn.Template): Panel app template (used to open modal windows in case of database errors).\n        gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n    \"\"\"\n\n    # Get username, updated on every keypress\n    username_key_press = gi.person_widget._widgets[\"username\"].value_input\n\n    # Hide messages\n    gi.error_message.visible = False\n\n    # Create session\n    session = self.database_connector.create_session()\n\n    with session:\n        # Check if the \"no more order\" toggle button is pressed\n        if self.database_connector.get_flag(id=\"no_more_orders\"):\n            pn.state.notifications.error(\n                \"It is not possible to delete orders\",\n                duration=self.config.panel.notifications.duration,\n            )\n\n            # Reload the menu\n            self.reload_menu(\n                None,\n                gi,\n            )\n\n            return\n\n        if username_key_press:\n            # If auth is active, check if a guests is deleting an order of a\n            # privileged user\n            if (\n                self.auth_user.is_guest()\n                and (\n                    username_key_press\n                    in self.auth_user.auth_context.list_privileged_users()\n                )\n                and (self.auth_user.auth_context.is_auth_active())\n            ):\n                pn.state.notifications.error(\n                    f\"You do not have enough privileges&lt;br&gt;to delete&lt;br&gt;{username_key_press}'s order\",\n                    duration=self.config.panel.notifications.duration,\n                )\n\n                # Reload the menu\n                self.reload_menu(\n                    None,\n                    gi,\n                )\n\n                return\n\n            # Delete user\n            try:\n                num_rows_deleted_users = session.execute(\n                    delete(models.Users).where(\n                        models.Users.id == username_key_press\n                    )\n                )\n                # Delete also orders (hotfix for Debian)\n                num_rows_deleted_orders = session.execute(\n                    delete(models.Orders).where(\n                        models.Orders.user == username_key_press\n                    )\n                )\n                session.commit()\n                if (num_rows_deleted_users.rowcount &gt; 0) or (\n                    num_rows_deleted_orders.rowcount &gt; 0\n                ):\n                    # Update dataframe widget\n                    self.reload_menu(\n                        None,\n                        gi,\n                    )\n\n                    pn.state.notifications.success(\n                        \"Order canceled\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    log.info(f\"{username_key_press}'s order canceled\")\n                else:\n                    pn.state.notifications.warning(\n                        f'No order for user named&lt;br&gt;\"{username_key_press}\"',\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    log.info(\n                        f\"no order for user named {username_key_press}\"\n                    )\n            except Exception as e:\n                # Any exception here is a database fault\n                pn.state.notifications.error(\n                    \"Database error\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                gi.error_message.object = (\n                    f\"DATABASE ERROR&lt;br&gt;&lt;br&gt;ERROR:&lt;br&gt;{str(e)}\"\n                )\n                gi.error_message.visible = True\n                log.error(\"database error\")\n                # Open modal window\n                app.open_modal()\n        else:\n            pn.state.notifications.warning(\n                \"Please insert user name\",\n                duration=self.config.panel.notifications.duration,\n            )\n            log.warning(\"missing username\")\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.df_list_by_lunch_time","title":"df_list_by_lunch_time","text":"<pre><code>df_list_by_lunch_time() -&gt; dict\n</code></pre> <p>Build a dictionary of dataframes for each lunch-time, with takeaways included in a dedicated dataframe.</p> <p>Each datframe includes orders grouped by users, notes and a total column (with the total value for a specific item).</p> <p>The keys of the dataframe are <code>lunch-times</code> and <code>lunch-times + takeaway_id</code>.</p> <p>Returns:</p> Type Description <code>dict</code> <p>dictionary with dataframes summarizing the orders for each lunch-time/takeaway-time.</p> Source code in <code>dlunch/core.py</code> <pre><code>def df_list_by_lunch_time(\n    self,\n) -&gt; dict:\n    \"\"\"Build a dictionary of dataframes for each lunch-time, with takeaways included in a dedicated dataframe.\n\n    Each datframe includes orders grouped by users, notes and a total column (with the total value\n    for a specific item).\n\n    The keys of the dataframe are `lunch-times` and `lunch-times + takeaway_id`.\n\n    Returns:\n        dict: dictionary with dataframes summarizing the orders for each lunch-time/takeaway-time.\n    \"\"\"\n    # Read menu and save how menu items are sorted (first courses, second courses, etc.)\n    original_order = models.Menu.read_as_df(\n        config=self.config,\n        index_col=\"id\",\n    ).item\n    # Create session\n    session = self.database_connector.create_session()\n\n    with session:\n        # Build takeaway list\n        takeaway_list = [\n            user.id\n            for user in session.scalars(\n                select(models.Users).where(\n                    models.Users.takeaway == sql_true()\n                )\n            ).all()\n        ]\n    # Read orders dataframe (including notes)\n    df = self.database_connector.read_sql_query(\n        session=session,\n        query=self.config.db.orders_query.format(\n            schema=self.config.db.get(\"schema\", models.SCHEMA)\n        ),\n    )\n\n    # The following function prepare the dataframe before saving it into\n    # the dictionary that will be returned\n    def _clean_up_table(\n        config: DictConfig,\n        df_in: pd.DataFrame,\n        df_complete: pd.DataFrame,\n    ):\n        df = df_in.copy()\n        # Group notes per menu item by concat users notes\n        # Use value counts to keep track of how many time a note is repeated\n        df_notes = (\n            df_complete[\n                (df_complete.lunch_time == time)\n                &amp; (df_complete.note != \"\")\n                &amp; (df_complete.user.isin(df.columns))\n            ]\n            .drop(columns=[\"user\", \"lunch_time\"])\n            .value_counts()\n            .reset_index(level=\"note\")\n        )\n        df_notes.note = (\n            df_notes[\"count\"]\n            .astype(str)\n            .str.cat(df_notes.note, sep=config.panel.gui.note_sep.count)\n        )\n        df_notes = df_notes.drop(columns=\"count\")\n        df_notes = (\n            df_notes.groupby(\"item\")[\"note\"]\n            .apply(config.panel.gui.note_sep.element.join)\n            .to_frame()\n        )\n        # Add columns of totals\n        df[config.panel.gui.total_column_name] = df.sum(axis=1)\n        # Drop unused rows if requested\n        if config.panel.drop_unused_menu_items:\n            df = df[df[config.panel.gui.total_column_name] &gt; 0]\n        # Add notes\n        df = df.join(df_notes)\n        df = df.rename(columns={\"note\": config.panel.gui.note_column_name})\n        # Change NaNs to '-'\n        df = df.fillna(\"-\")\n        # Avoid mixed types (float and notes str)\n        df = df.astype(object)\n\n        return df\n\n    # Build a dict of dataframes, one for each lunch time\n    df_dict = {}\n    for time in df.lunch_time.sort_values().unique():\n        # Take only one lunch time (and remove notes so they do not alter\n        # numeric counters inside the pivot table)\n        temp_df = (\n            df[df.lunch_time == time]\n            .drop(columns=[\"lunch_time\", \"note\"])\n            .reset_index(drop=True)\n        )\n        # Users' selections\n        df_users = temp_df.pivot_table(\n            index=\"item\", columns=\"user\", aggfunc=len\n        )\n        # Reorder index in accordance with original menu\n        df_users = df_users.reindex(original_order)\n        # Split restaurant lunches from takeaway lunches\n        df_users_restaurant = df_users.loc[\n            :, [c for c in df_users.columns if c not in takeaway_list]\n        ]\n        df_users_takeaways = df_users.loc[\n            :, [c for c in df_users.columns if c in takeaway_list]\n        ]\n\n        # Clean and add resulting dataframes to dict\n        # RESTAURANT LUNCH\n        if not df_users_restaurant.empty:\n            df_users_restaurant = _clean_up_table(\n                self.config, df_users_restaurant, df\n            )\n            df_dict[time] = df_users_restaurant\n        # TAKEAWAY\n        if not df_users_takeaways.empty:\n            df_users_takeaways = _clean_up_table(\n                self.config, df_users_takeaways, df\n            )\n            df_dict[f\"{time} {self.config.panel.gui.takeaway_id}\"] = (\n                df_users_takeaways\n            )\n\n    return df_dict\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.download_dataframe","title":"download_dataframe","text":"<pre><code>download_dataframe(gi: GraphicInterface) -&gt; BytesIO\n</code></pre> <p>Build an Excel file with tables representing orders for every lunch-time/takeaway-time.</p> <p>Tables are created by the function <code>df_list_by_lunch_time</code> and exported on dedicated Excel worksheets (inside the same workbook).</p> <p>The result is returned as bytes stream to satisfy panel.widgets.FileDownload class requirements.</p> <p>Parameters:</p> Name Type Description Default <code>gi</code> <code>GraphicInterface</code> <p>graphic interface object (used to interact with Panel widgets).</p> required <p>Returns:</p> Type Description <code>BytesIO</code> <p>download stream for the Excel file.</p> Source code in <code>dlunch/core.py</code> <pre><code>def download_dataframe(\n    self,\n    gi: gui.GraphicInterface,\n) -&gt; BytesIO:\n    \"\"\"Build an Excel file with tables representing orders for every lunch-time/takeaway-time.\n\n    Tables are created by the function `df_list_by_lunch_time` and exported on dedicated Excel worksheets\n    (inside the same workbook).\n\n    The result is returned as bytes stream to satisfy panel.widgets.FileDownload class requirements.\n\n    Args:\n        gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n\n    Returns:\n        BytesIO: download stream for the Excel file.\n    \"\"\"\n\n    # Build a dict of dataframes, one for each lunch time (the key contains\n    # a lunch time)\n    df_dict = self.df_list_by_lunch_time()\n    # Export one dataframe for each lunch time\n    bytes_io = BytesIO()\n    writer = pd.ExcelWriter(bytes_io)\n    # If the dataframe dict is non-empty export one dataframe for each sheet\n    if df_dict:\n        for time, df in df_dict.items():\n            log.info(f\"writing sheet {time}\")\n\n            # Find users that placed an order for a given time\n            users_n = len(\n                [\n                    c\n                    for c in df.columns\n                    if c\n                    not in (\n                        self.config.panel.gui.total_column_name,\n                        self.config.panel.gui.note_column_name,\n                    )\n                ]\n            )\n\n            # Export dataframe to new sheet\n            worksheet_name = time.replace(\":\", \".\")\n            df.to_excel(writer, sheet_name=worksheet_name, startrow=1)\n            # Add title\n            worksheet = writer.sheets[worksheet_name]\n            worksheet.cell(\n                1,\n                1,\n                f\"Time - {time} | # {users_n}\",\n            )\n\n            # HEADER FORMAT\n            worksheet[\"A1\"].font = Font(\n                size=13, bold=True, color=\"00FF0000\"\n            )\n\n            # INDEX ALIGNMENT\n            for row in worksheet[worksheet.min_row : worksheet.max_row]:\n                cell = row[0]  # column A\n                cell.alignment = Alignment(horizontal=\"left\")\n                cell = row[users_n + 2]  # column note\n                cell.alignment = Alignment(horizontal=\"left\")\n                cells = row[1 : users_n + 2]  # from column B to note-1\n                for cell in cells:\n                    cell.alignment = Alignment(horizontal=\"center\")\n\n            # AUTO SIZE\n            # Set auto-size for all columns\n            # Use end +1 for ID column, and +2 for 'total' and 'note' columns\n            column_letters = get_column_interval(\n                start=1, end=users_n + 1 + 2\n            )\n            # Get columns\n            columns = worksheet[column_letters[0] : column_letters[-1]]\n            for column_letter, column in zip(column_letters, columns):\n                # Instantiate max length then loop on cells to find max value\n                max_length = 0\n                # Cell loop\n                for cell in column:\n                    log.debug(\n                        f\"autosize for cell {cell.coordinate} with value '{cell.value}'\"\n                    )\n                    try:  # Necessary to avoid error on empty cells\n                        if len(str(cell.value)) &gt; max_length:\n                            max_length = len(cell.value)\n                            log.debug(\n                                f\"new max length set to {max_length}\"\n                            )\n                    except Exception:\n                        log.debug(\"empty cell\")\n                log.debug(f\"final max length is {max_length}\")\n                adjusted_width = (max_length + 2) * 0.85\n                log.debug(\n                    f\"adjusted width for column '{column_letter}' is {adjusted_width}\"\n                )\n                worksheet.column_dimensions[column_letter].width = (\n                    adjusted_width\n                )\n            # Since grouping fix width equal to first column width (openpyxl\n            # bug), set first column of users' order equal to max width of\n            # all users columns to avoid issues\n            max_width = 0\n            log.debug(\n                f\"find max width for users' columns '{column_letters[1]}:{column_letters[-3]}'\"\n            )\n            for column_letter in column_letters[1:-2]:\n                max_width = max(\n                    max_width,\n                    worksheet.column_dimensions[column_letter].width,\n                )\n            log.debug(f\"max width for first users' columns is {max_width}\")\n            worksheet.column_dimensions[column_letters[1]].width = (\n                max_width\n            )\n\n            # GROUPING\n            # Group and hide columns, leave only ID, total and note\n            column_letters = get_column_interval(start=2, end=users_n + 1)\n            worksheet.column_dimensions.group(\n                column_letters[0], column_letters[-1], hidden=True\n            )\n\n            # Close and reset bytes_io for the next dataframe\n            writer.close()  # Important!\n            bytes_io.seek(0)  # Important!\n\n        # Message prompt\n        pn.state.notifications.success(\n            \"File with orders downloaded\",\n            duration=self.config.panel.notifications.duration,\n        )\n        log.info(\"xlsx downloaded\")\n    else:\n        gi.dataframe.value.drop(columns=[\"order\"]).to_excel(\n            writer, sheet_name=\"MENU\", index=False\n        )\n        writer.close()  # Important!\n        bytes_io.seek(0)  # Important!\n        # Message prompt\n        pn.state.notifications.warning(\n            \"No order&lt;br&gt;Menu downloaded\",\n            duration=self.config.panel.notifications.duration,\n        )\n        log.warning(\n            \"no order, menu exported to excel in place of orders' list\"\n        )\n\n    return bytes_io\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.reload_menu","title":"reload_menu","text":"<pre><code>reload_menu(event: Event, gi: GraphicInterface) -&gt; None\n</code></pre> <p>Main core function that sync Panel widget with database tables.</p> <p>Stop orders and guest override checks are carried out by this function. Also the banner image is shown based on a check run by this function.</p> <p><code>menu</code>, <code>orders</code> and <code>users</code> tables are used to build a list of orders for each lunch time. Takeaway orders are evaluated separately.</p> <p>At the end stats about lunches are calculated and loaded to database. Finally statistics (values and table) shown inside the app are updated accordingly.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>Event</code> <p>Panel button event.</p> required <code>gi</code> <code>GraphicInterface</code> <p>graphic interface object (used to interact with Panel widgets).</p> required Source code in <code>dlunch/core.py</code> <pre><code>def reload_menu(\n    self,\n    event: param.parameterized.Event,\n    gi: gui.GraphicInterface,\n) -&gt; None:\n    \"\"\"Main core function that sync Panel widget with database tables.\n\n    Stop orders and guest override checks are carried out by this function.\n    Also the banner image is shown based on a check run by this function.\n\n    `menu`, `orders` and `users` tables are used to build a list of orders for each lunch time.\n    Takeaway orders are evaluated separately.\n\n    At the end stats about lunches are calculated and loaded to database. Finally\n    statistics (values and table) shown inside the app are updated accordingly.\n\n    Args:\n        event (param.parameterized.Event): Panel button event.\n        gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n    \"\"\"\n\n    # Create session\n    session = self.database_connector.create_session()\n\n    with session:\n        # Check if someone changed the \"no_more_order\" toggle\n        if (\n            gi.toggle_no_more_order_button.value\n            != self.database_connector.get_flag(id=\"no_more_orders\")\n        ):\n            # The following statement will trigger the toggle callback\n            # which will call reload_menu once again\n            # This is the reason why this if contains a return (without the return\n            # the content will be reloaded twice)\n            gi.toggle_no_more_order_button.value = (\n                self.database_connector.get_flag(id=\"no_more_orders\")\n            )\n\n            return\n\n        # Check guest override button status (if not in table use False)\n        gi.toggle_guest_override_button.value = (\n            self.database_connector.get_flag(\n                id=f\"{self.auth_user.name}_guest_override\",\n                value_if_missing=False,\n            )\n        )\n\n        # Set no more orders toggle button and the change order time button\n        # visibility and activation\n        if self.auth_user.is_guest(allow_override=False):\n            # Deactivate the no_more_orders_button for guest users\n            gi.toggle_no_more_order_button.disabled = True\n            gi.toggle_no_more_order_button.visible = False\n            # Deactivate the change_order_time_button for guest users\n            gi.change_order_time_takeaway_button.disabled = True\n            gi.change_order_time_takeaway_button.visible = False\n        else:\n            # Activate the no_more_orders_button for privileged users\n            gi.toggle_no_more_order_button.disabled = False\n            gi.toggle_no_more_order_button.visible = True\n            # Show the change_order_time_button for privileged users\n            # It is disabled by the no more order button if necessary\n            gi.change_order_time_takeaway_button.visible = True\n\n        # Guest graphic configuration\n        if self.auth_user.is_guest():\n            # If guest show guest type selection group\n            gi.person_widget.widgets[\"guest\"].disabled = False\n            gi.person_widget.widgets[\"guest\"].visible = True\n        else:\n            # If user is privileged hide guest type selection group\n            gi.person_widget.widgets[\"guest\"].disabled = True\n            gi.person_widget.widgets[\"guest\"].visible = False\n\n        # Reload menu\n        df = models.Menu.read_as_df(\n            config=self.config,\n            index_col=\"id\",\n        )\n        # Add order (for selecting items) and note columns\n        df[\"order\"] = False\n        df[self.config.panel.gui.note_column_name] = \"\"\n        gi.dataframe.value = df\n        gi.dataframe.formatters = {\"order\": {\"type\": \"tickCross\"}}\n        gi.dataframe.editors = {\n            \"id\": None,\n            \"item\": None,\n            \"order\": CheckboxEditor(),\n            self.config.panel.gui.note_column_name: \"input\",\n        }\n        gi.dataframe.header_align = OmegaConf.to_container(\n            self.config.panel.gui.menu_column_align, resolve=True\n        )\n        gi.dataframe.text_align = OmegaConf.to_container(\n            self.config.panel.gui.menu_column_align, resolve=True\n        )\n\n        if gi.toggle_no_more_order_button.value:\n            gi.dataframe.hidden_columns = [\"id\", \"order\"]\n            gi.dataframe.disabled = True\n        else:\n            gi.dataframe.hidden_columns = [\"id\"]\n            gi.dataframe.disabled = False\n\n        # If menu is empty show banner image, otherwise show menu\n        if df.empty:\n            gi.no_menu_col.visible = True\n            gi.main_header_row.visible = False\n            gi.quote.visible = False\n            gi.menu_flexbox.visible = False\n            gi.buttons_flexbox.visible = False\n            gi.results_divider.visible = False\n            gi.res_col.visible = False\n        else:\n            gi.no_menu_col.visible = False\n            gi.main_header_row.visible = True\n            gi.quote.visible = True\n            gi.menu_flexbox.visible = True\n            gi.buttons_flexbox.visible = True\n            gi.results_divider.visible = True\n            gi.res_col.visible = True\n\n        log.debug(\"menu reloaded\")\n\n        # Load results\n        df_dict = self.df_list_by_lunch_time()\n        # Clean columns and load text and dataframes\n        gi.res_col.clear()\n        gi.time_col.clear()\n        if df_dict:\n            # Titles\n            gi.res_col.append(self.config.panel.result_column_text)\n            gi.time_col.append(gi.time_col_title)\n            # Build guests list (one per each guest types)\n            guests_lists = {}\n            for guest_type in self.config.panel.guest_types:\n                guests_lists[guest_type] = [\n                    user.id\n                    for user in session.scalars(\n                        select(models.Users).where(\n                            models.Users.guest == guest_type\n                        )\n                    ).all()\n                ]\n            # Loop through lunch times\n            for time, df in df_dict.items():\n                # Find the number of grumbling stomachs\n                grumbling_stomachs = len(\n                    [\n                        c\n                        for c in df.columns\n                        if c\n                        not in (\n                            self.config.panel.gui.total_column_name,\n                            self.config.panel.gui.note_column_name,\n                        )\n                    ]\n                )\n                # Set different graphics for takeaway lunches\n                if self.config.panel.gui.takeaway_id in time:\n                    res_col_label_kwargs = {\n                        \"time\": time.replace(\n                            self.config.panel.gui.takeaway_id, \"\"\n                        ),\n                        \"diners_n\": grumbling_stomachs,\n                        \"emoji\": self.config.panel.gui.takeaway_emoji,\n                        \"is_takeaway\": True,\n                        \"takeaway_alert_sign\": f\"&amp;nbsp{gi.takeaway_alert_sign}&amp;nbsp{gi.takeaway_alert_text}\",\n                        \"css_classes\": OmegaConf.to_container(\n                            self.config.panel.gui.takeaway_class_res_col,\n                            resolve=True,\n                        ),\n                        \"stylesheets\": [\n                            self.config.panel.gui.css_files.labels_path\n                        ],\n                    }\n                    time_col_label_kwargs = {\n                        \"time\": time.replace(\n                            self.config.panel.gui.takeaway_id, \"\"\n                        ),\n                        \"diners_n\": str(grumbling_stomachs) + \"&amp;nbsp\",\n                        \"separator\": \"&lt;br&gt;\",\n                        \"emoji\": self.config.panel.gui.takeaway_emoji,\n                        \"align\": (\"center\", \"center\"),\n                        \"sizing_mode\": \"stretch_width\",\n                        \"is_takeaway\": True,\n                        \"takeaway_alert_sign\": gi.takeaway_alert_sign,\n                        \"css_classes\": OmegaConf.to_container(\n                            self.config.panel.gui.takeaway_class_time_col,\n                            resolve=True,\n                        ),\n                        \"stylesheets\": [\n                            self.config.panel.gui.css_files.labels_path\n                        ],\n                    }\n                else:\n                    res_col_label_kwargs = {\n                        \"time\": time,\n                        \"diners_n\": grumbling_stomachs,\n                        \"emoji\": random.choice(\n                            self.config.panel.gui.food_emoji\n                        ),\n                        \"css_classes\": OmegaConf.to_container(\n                            self.config.panel.gui.time_class_res_col,\n                            resolve=True,\n                        ),\n                        \"stylesheets\": [\n                            self.config.panel.gui.css_files.labels_path\n                        ],\n                    }\n                    time_col_label_kwargs = {\n                        \"time\": time,\n                        \"diners_n\": str(grumbling_stomachs) + \"&amp;nbsp\",\n                        \"separator\": \"&lt;br&gt;\",\n                        \"emoji\": self.config.panel.gui.restaurant_emoji,\n                        \"per_icon\": \"&amp;#10006; \",\n                        \"align\": (\"center\", \"center\"),\n                        \"sizing_mode\": \"stretch_width\",\n                        \"css_classes\": OmegaConf.to_container(\n                            self.config.panel.gui.time_class_time_col,\n                            resolve=True,\n                        ),\n                        \"stylesheets\": [\n                            self.config.panel.gui.css_files.labels_path\n                        ],\n                    }\n                # Add text to result column\n                gi.res_col.append(pn.Spacer(height=15))\n                gi.res_col.append(\n                    gi.build_time_label(**res_col_label_kwargs)\n                )\n                # Add non editable table to result column\n                gi.res_col.append(pn.Spacer(height=5))\n                gi.res_col.append(\n                    gi.build_order_table(\n                        self.config,\n                        df=df,\n                        time=time,\n                        guests_lists=guests_lists,\n                    )\n                )\n                # Add also a label to lunch time column\n                gi.time_col.append(\n                    gi.build_time_label(**time_col_label_kwargs)\n                )\n\n        log.debug(\"results reloaded\")\n\n        # Clean stats column\n        gi.sidebar_stats_col.clear()\n        # Update stats\n        # Find how many people eat today (total number) and add value to database\n        # stats table (when adding a stats if guest is not specified None is used\n        # as default)\n        today_locals_count = session.scalar(\n            select(func.count(models.Users.id)).where(\n                models.Users.guest == \"NotAGuest\"\n            )\n        )\n        new_stat = models.Stats(hungry_people=today_locals_count)\n        # Use an upsert for postgresql, a simple session add otherwise\n        models.DatabaseConnector.session_add_with_upsert(\n            session=session, constraint=\"stats_pkey\", new_record=new_stat\n        )\n        # For each guest type find how many guests eat today\n        for guest_type in self.config.panel.guest_types:\n            today_guests_count = session.scalar(\n                select(func.count(models.Users.id)).where(\n                    models.Users.guest == guest_type\n                )\n            )\n            new_stat = models.Stats(\n                guest=guest_type, hungry_people=today_guests_count\n            )\n            # Use an upsert for postgresql, a simple session add otherwise\n            models.DatabaseConnector.session_add_with_upsert(\n                session=session,\n                constraint=\"stats_pkey\",\n                new_record=new_stat,\n            )\n\n        # Commit stats\n        session.commit()\n\n        # Group stats by month and return how many people had lunch\n        df_stats = self.database_connector.read_sql_query(\n            session=session,\n            query=self.config.db.stats_query.format(\n                schema=self.config.db.get(\"schema\", models.SCHEMA)\n            ),\n        )\n        # Stats top text\n        stats_and_info_text = gi.build_stats_and_info_text(\n            auth_user=self.auth_user,\n            df_stats=df_stats,\n            version=__version__,\n            host_name=self.hostname,\n            stylesheets=[self.config.panel.gui.css_files.stats_info_path],\n        )\n        # Remove NotAGuest (non-guest users)\n        df_stats.Guest = df_stats.Guest.replace(\n            \"NotAGuest\", self.config.panel.stats_locals_column_name\n        )\n        # Pivot table on guest type\n        df_stats = df_stats.pivot(\n            columns=\"Guest\",\n            index=self.config.panel.stats_id_cols,\n            values=\"Hungry People\",\n        ).reset_index()\n        df_stats[self.config.panel.gui.total_column_name.title()] = (\n            df_stats.sum(axis=\"columns\", numeric_only=True)\n        )\n        # Add value and non-editable option to stats table\n        gi.stats_widget.editors = {c: None for c in df_stats.columns}\n        gi.stats_widget.value = df_stats\n        gi.sidebar_stats_col.append(stats_and_info_text[\"stats\"])\n        gi.sidebar_stats_col.append(gi.stats_widget)\n        # Add info below person widget (an empty placeholder was left as last\n        # element)\n        gi.sidebar_person_column.objects[-1] = stats_and_info_text[\"info\"]\n        log.debug(\"stats and info updated\")\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.send_order","title":"send_order","text":"<pre><code>send_order(\n    event: Event,\n    app: Template,\n    person: Person,\n    gi: GraphicInterface,\n) -&gt; None\n</code></pre> <p>Upload orders and user to database tables.</p> <p>The user target of the order is uploaded to <code>users</code> table, while the order is uploaded to <code>orders</code> table.</p> <p>Consistency checks about the user and the order are carried out here (existing user, only one order, etc.). The status of the <code>stop_orders</code> flag is checked to avoid that an order is uploaded when it shouldn't.</p> <p>Orders for guest users are marked as such before uploading them.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>Event</code> <p>Panel button event.</p> required <code>app</code> <code>Template</code> <p>Panel app template (used to open modal windows in case of database errors).</p> required <code>person</code> <code>Person</code> <p>class that collect order data for the user that is the target of the order.</p> required <code>gi</code> <code>GraphicInterface</code> <p>graphic interface object (used to interact with Panel widgets).</p> required Source code in <code>dlunch/core.py</code> <pre><code>def send_order(\n    self,\n    event: param.parameterized.Event,\n    app: pn.Template,\n    person: gui.Person,\n    gi: gui.GraphicInterface,\n) -&gt; None:\n    \"\"\"Upload orders and user to database tables.\n\n    The user target of the order is uploaded to `users` table, while the order\n    is uploaded to `orders` table.\n\n    Consistency checks about the user and the order are carried out here (existing user, only one order, etc.).\n    The status of the `stop_orders` flag is checked to avoid that an order is uploaded when it shouldn't.\n\n    Orders for guest users are marked as such before uploading them.\n\n    Args:\n        event (param.parameterized.Event): Panel button event.\n        app (pn.Template): Panel app template (used to open modal windows in case of database errors).\n        person (gui.Person): class that collect order data for the user that is the target of the order.\n        gi (gui.GraphicInterface): graphic interface object (used to interact with Panel widgets).\n    \"\"\"\n\n    # Get username updated at each key press\n    username_key_press = gi.person_widget._widgets[\"username\"].value_input\n\n    # Hide messages\n    gi.error_message.visible = False\n\n    # Create session\n    session = self.database_connector.create_session()\n\n    with session:\n        # Check if the \"no more order\" toggle button is pressed\n        if self.database_connector.get_flag(id=\"no_more_orders\"):\n            pn.state.notifications.error(\n                \"It is not possible to place new orders\",\n                duration=self.config.panel.notifications.duration,\n            )\n\n            # Reload the menu\n            self.reload_menu(\n                None,\n                gi,\n            )\n\n            return\n\n        # If auth is active, check if a guests is using a name reserved to a\n        # privileged user\n        if (\n            self.auth_user.is_guest()\n            and (\n                username_key_press\n                in self.auth_user.auth_context.list_privileged_users()\n            )\n            and (self.auth_user.auth_context.is_auth_active())\n        ):\n            pn.state.notifications.error(\n                f\"{username_key_press} is a reserved name&lt;br&gt;Please choose a different one\",\n                duration=self.config.panel.notifications.duration,\n            )\n\n            # Reload the menu\n            self.reload_menu(\n                None,\n                gi,\n            )\n\n            return\n\n        # Check if a privileged user is ordering for an invalid name\n        if (\n            not self.auth_user.is_guest()\n            and (\n                username_key_press\n                not in (\n                    name\n                    for name in self.auth_user.auth_context.list_privileged_users()\n                    if name != \"guest\"\n                )\n            )\n            and (self.auth_user.auth_context.is_auth_active())\n        ):\n            pn.state.notifications.error(\n                f\"{username_key_press} is not a valid name&lt;br&gt;for a privileged user&lt;br&gt;Please choose a different one\",\n                duration=self.config.panel.notifications.duration,\n            )\n\n            # Reload the menu\n            self.reload_menu(\n                None,\n                gi,\n            )\n\n            return\n\n        # Write order into database table\n        df = gi.dataframe.value.copy()\n        df_order = df[df.order]\n        # If username is missing or the order is empty return an error message\n        if username_key_press and not df_order.empty:\n            # Check if the user already placed an order\n            if session.get(models.Users, username_key_press):\n                pn.state.notifications.warning(\n                    f\"Cannot overwrite an order&lt;br&gt;Delete {username_key_press}'s order first and retry\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                log.warning(\n                    f\"an order already exist for {username_key_press}\"\n                )\n            else:\n                # Place order\n                try:\n                    # Add User\n                    # Do not pass guest for privileged users (default to NotAGuest)\n                    if self.auth_user.is_guest():\n                        new_user = models.Users(\n                            id=username_key_press,\n                            guest=person.guest,\n                            lunch_time=person.lunch_time,\n                            takeaway=person.takeaway,\n                        )\n                    else:\n                        new_user = models.Users(\n                            id=username_key_press,\n                            lunch_time=person.lunch_time,\n                            takeaway=person.takeaway,\n                        )\n                    session.add(new_user)\n                    session.commit()\n                    # Add orders as long table (one row for each item selected by a user)\n                    for row in df_order.itertuples(name=\"OrderTuple\"):\n                        # Order\n                        new_order = models.Orders(\n                            user=username_key_press,\n                            menu_item_id=row.Index,\n                            note=getattr(\n                                row, self.config.panel.gui.note_column_name\n                            ).lower(),\n                        )\n                        session.add(new_order)\n                        session.commit()\n\n                    # Update dataframe widget\n                    self.reload_menu(\n                        None,\n                        gi,\n                    )\n\n                    pn.state.notifications.success(\n                        \"Order sent\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    log.info(f\"{username_key_press}'s order saved\")\n                except Exception as e:\n                    # Any exception here is a database fault\n                    pn.state.notifications.error(\n                        \"Database error\",\n                        duration=self.config.panel.notifications.duration,\n                    )\n                    gi.error_message.object = (\n                        f\"DATABASE ERROR&lt;br&gt;&lt;br&gt;ERROR:&lt;br&gt;{str(e)}\"\n                    )\n                    gi.error_message.visible = True\n                    log.error(\"database error\")\n                    # Open modal window\n                    app.open_modal()\n        else:\n            if not username_key_press:\n                pn.state.notifications.warning(\n                    \"Please insert user name\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                log.warning(\"missing username\")\n            else:\n                pn.state.notifications.warning(\n                    \"Please make a selection\",\n                    duration=self.config.panel.notifications.duration,\n                )\n                log.warning(\"no selection made\")\n</code></pre>"},{"location":"reference/dlunch/core/#dlunch.core.Waiter.set_config","title":"set_config","text":"<pre><code>set_config(config: DictConfig)\n</code></pre> <p>Set the configuration for the Waiter instance.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration object.</p> required Source code in <code>dlunch/core.py</code> <pre><code>def set_config(self, config: DictConfig):\n    \"\"\"Set the configuration for the Waiter instance.\n\n    Args:\n        config (DictConfig): Hydra configuration object.\n    \"\"\"\n    self.config = config\n</code></pre>"},{"location":"reference/dlunch/gui/","title":"gui","text":"<p>Module that defines main graphic interface and backend graphic interface.</p> <p>Classes that uses <code>param</code> are then used to create Panel widget directly (see <code>Panel docs &lt;https://panel.holoviz.org/how_to/param/uis.html&gt;</code>__).</p> <p>Classes:</p> Name Description <code>BackendAddPrivilegedUser</code> <p>Param class used inside the backend to create the widget add new users to the <code>privileged_user</code> table.</p> <code>BackendInterface</code> <p>Class with widgets for the backend graphic interface.</p> <code>BackendPasswordRenewer</code> <p>Param class used inside the backend to create the widget that collect info to renew users password.</p> <code>BackendUserEraser</code> <p>Param class used inside the backend to create the widget that delete users.</p> <code>GraphicInterface</code> <p>Class with widgets for the main graphic interface.</p> <code>PasswordRenewer</code> <p>Param class used to create the widget that collect info to renew users password.</p> <code>Person</code> <p>Param class that define user data and lunch preferences for its order.</p> <p>Attributes:</p> Name Type Description <code>backend_min_height</code> <code>int</code> <p>Backend minimum height.</p> <code>df_quote</code> <code>DataFrame</code> <p>Dataframe with the quote of the day.</p> <code>df_quotes</code> <code>DataFrame</code> <p>Dataframe with quotes.</p> <code>download_text</code> <code>str</code> <p>info Text used in <code>Download Orders</code> tab.</p> <code>generic_button_height</code> <code>int</code> <p>Button height.</p> <code>guest_user_text</code> <code>str</code> <p>info Text used in guest <code>Password</code> widget.</p> <code>header_button_width</code> <code>int</code> <p>Width for buttons used in top header.</p> <code>header_row_height</code> <code>int</code> <p>Top header height.</p> <code>log</code> <code>Logger</code> <p>Module logger.</p> <code>main_area_min_width</code> <code>int</code> <p>Main area width. It's the area with menu and order summary.</p> <code>person_text</code> <code>str</code> <p>info Text used in <code>User</code> tab.</p> <code>quotes_filename</code> <code>Path</code> <p>Excel file with quotes.</p> <code>seed_day</code> <code>int</code> <p>seed to Select the quote of the day.</p> <code>sidebar_content_width</code> <code>int</code> <p>Sidebar content width. Should be smaller than sidebar width.</p> <code>sidebar_width</code> <code>int</code> <p>Sidebar width.</p> <code>time_col_spacer_width</code> <code>int</code> <p>Time column spacer width.</p> <code>time_col_width</code> <code>int</code> <p>Time column width (the time column is on the side of the menu table).</p> <code>upload_text</code> <code>str</code> <p>info Text used in <code>Menu Upload</code> tab.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.backend_min_height","title":"backend_min_height  <code>module-attribute</code>","text":"<pre><code>backend_min_height: int = 500\n</code></pre> <p>Backend minimum height.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.df_quote","title":"df_quote  <code>module-attribute</code>","text":"<pre><code>df_quote: DataFrame = sample(n=1, random_state=seed_day)\n</code></pre> <p>Dataframe with the quote of the day.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.df_quotes","title":"df_quotes  <code>module-attribute</code>","text":"<pre><code>df_quotes: DataFrame = read_excel(quotes_filename)\n</code></pre> <p>Dataframe with quotes.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.download_text","title":"download_text  <code>module-attribute</code>","text":"<pre><code>download_text: str = (\n    \"\\n### Download Orders\\nDownload the order list.\\n\"\n)\n</code></pre> <p>info Text used in <code>Download Orders</code> tab.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.generic_button_height","title":"generic_button_height  <code>module-attribute</code>","text":"<pre><code>generic_button_height: int = 45\n</code></pre> <p>Button height.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.guest_user_text","title":"guest_user_text  <code>module-attribute</code>","text":"<pre><code>guest_user_text: str = '\\n### Guest user\\n'\n</code></pre> <p>info Text used in guest <code>Password</code> widget.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.header_button_width","title":"header_button_width  <code>module-attribute</code>","text":"<pre><code>header_button_width: int = 50\n</code></pre> <p>Width for buttons used in top header.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.header_row_height","title":"header_row_height  <code>module-attribute</code>","text":"<pre><code>header_row_height: int = 55\n</code></pre> <p>Top header height.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log: Logger = getLogger(__name__)\n</code></pre> <p>Module logger.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.main_area_min_width","title":"main_area_min_width  <code>module-attribute</code>","text":"<pre><code>main_area_min_width: int = (\n    580 + time_col_spacer_width + time_col_width\n)\n</code></pre> <p>Main area width. It's the area with menu and order summary.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.person_text","title":"person_text  <code>module-attribute</code>","text":"<pre><code>person_text: str = (\n    \"\\n### User Data\\n\\n_Privileged users_ do not need to fill the username.&lt;br&gt;\\n_Guest users_ shall use a valid _unique_ name and select a guest type.\\n\"\n)\n</code></pre> <p>info Text used in <code>User</code> tab.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.quotes_filename","title":"quotes_filename  <code>module-attribute</code>","text":"<pre><code>quotes_filename: Path = parent / 'quotes.xlsx'\n</code></pre> <p>Excel file with quotes.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.seed_day","title":"seed_day  <code>module-attribute</code>","text":"<pre><code>seed_day: int = int(strftime('%Y%m%d'))\n</code></pre> <p>seed to Select the quote of the day.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.sidebar_content_width","title":"sidebar_content_width  <code>module-attribute</code>","text":"<pre><code>sidebar_content_width: int = sidebar_width - 10\n</code></pre> <p>Sidebar content width. Should be smaller than sidebar width.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.sidebar_width","title":"sidebar_width  <code>module-attribute</code>","text":"<pre><code>sidebar_width: int = 400\n</code></pre> <p>Sidebar width.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.time_col_spacer_width","title":"time_col_spacer_width  <code>module-attribute</code>","text":"<pre><code>time_col_spacer_width: int = 5\n</code></pre> <p>Time column spacer width.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.time_col_width","title":"time_col_width  <code>module-attribute</code>","text":"<pre><code>time_col_width: int = 90\n</code></pre> <p>Time column width (the time column is on the side of the menu table).</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.upload_text","title":"upload_text  <code>module-attribute</code>","text":"<pre><code>upload_text: str = (\n    \"\\n### Menu Upload\\nSelect a .png, .jpg or .xlsx file with the menu.&lt;br&gt;\\nThe app may add some default items to the menu.\\n\\n**For .xlsx:** list menu items starting from cell A1, one per each row.\\n\"\n)\n</code></pre> <p>info Text used in <code>Menu Upload</code> tab.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendAddPrivilegedUser","title":"BackendAddPrivilegedUser","text":"<p>               Bases: <code>Parameterized</code></p> <p>Param class used inside the backend to create the widget add new users to the <code>privileged_user</code> table.</p> <p>Methods:</p> Name Description <code>__str__</code> <p>String representation of this object.</p> <p>Attributes:</p> Name Type Description <code>admin</code> <code>Boolean</code> <p>Admin flag (true if admin).</p> <code>user</code> <code>String</code> <p>Username of the new user.</p> Source code in <code>dlunch/gui.py</code> <pre><code>class BackendAddPrivilegedUser(param.Parameterized):\n    \"\"\"Param class used inside the backend to create the widget add new users to the `privileged_user` table.\"\"\"\n\n    user: param.String = param.String(default=\"\", doc=\"user to add\")\n    \"\"\"Username of the new user.\"\"\"\n    admin: param.Boolean = param.Boolean(\n        default=False, doc=\"add admin privileges\"\n    )\n    \"\"\"Admin flag (true if admin).\"\"\"\n\n    def __str__(self):\n        \"\"\"String representation of this object.\n\n        Returns:\n            (str): string representation.\n        \"\"\"\n        return \"BackendAddUser\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendAddPrivilegedUser.admin","title":"admin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>admin: Boolean = Boolean(\n    default=False, doc=\"add admin privileges\"\n)\n</code></pre> <p>Admin flag (true if admin).</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendAddPrivilegedUser.user","title":"user  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user: String = String(default='', doc='user to add')\n</code></pre> <p>Username of the new user.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendAddPrivilegedUser.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>String representation of this object.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/gui.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of this object.\n\n    Returns:\n        (str): string representation.\n    \"\"\"\n    return \"BackendAddUser\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface","title":"BackendInterface","text":"<p>Class with widgets for the backend graphic interface.</p> <p>All widgets are instantiated at class initialization.</p> <p>Class methods handle specific operations that may be repeated multiple time after class instantiation.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <code>auth_user</code> <code>AuthUser</code> <p>AuthUser object with authenticated user data.</p> required <p>Methods:</p> Name Description <code>__init__</code> <code>exit_backend</code> <p>Return to main homepage.</p> <code>force_logout</code> <p>Redirect the browser to the logout endpoint</p> <code>reload_backend</code> <p>Reload backend by updating user lists and privileges.</p> <p>Attributes:</p> Name Type Description <code>access_denied_text</code> <code>add_privileged_user_button</code> <code>add_privileged_user_column</code> <code>add_privileged_user_widget</code> <code>add_update_user_column</code> <code>auth_context</code> <code>backend_controls</code> <code>clear_flags_button</code> <code>clear_flags_column</code> <code>delete_user_button</code> <code>delete_user_column</code> <code>exit_button</code> <code>flags_content</code> <code>header_row</code> <code>list_user_column</code> <code>password_widget</code> <code>submit_password_button</code> <code>user_eraser</code> <code>users_tabulator</code> Source code in <code>dlunch/gui.py</code> <pre><code>class BackendInterface:\n    \"\"\"Class with widgets for the backend graphic interface.\n\n    All widgets are instantiated at class initialization.\n\n    Class methods handle specific operations that may be repeated multiple time after class instantiation.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n        auth_user (AuthUser): AuthUser object with authenticated user data.\n    \"\"\"\n\n    def __init__(\n        self,\n        config: DictConfig,\n        auth_user: AuthUser,\n    ):\n        # CONTEXT VARIABLES ---------------------------------------------------\n        # Store authentication context\n        self.auth_context = auth_user.auth_context\n\n        # HEADER SECTION ------------------------------------------------------\n        # WIDGET\n\n        # BUTTONS\n        self.exit_button = pnw.Button(\n            name=\"\",\n            button_type=\"primary\",\n            button_style=\"solid\",\n            width=header_button_width,\n            height=generic_button_height,\n            icon=\"home-move\",\n            icon_size=\"2em\",\n        )\n\n        # ROW\n        # Create column for person data (add logout button only if auth is active)\n        self.header_row = pn.Row(\n            height=header_row_height,\n            sizing_mode=\"stretch_width\",\n        )\n        # Append a controls to the right side of header\n        self.header_row.append(pn.HSpacer())\n        self.header_row.append(self.exit_button)\n        self.header_row.append(\n            pn.pane.HTML(styles=dict(background=\"white\"), width=2, height=45)\n        )\n\n        # CALLBACKS\n        # Exit callback\n        self.exit_button.on_click(lambda e: self.exit_backend())\n\n        # MAIN SECTION --------------------------------------------------------\n        # Backend main section\n\n        # TEXTS\n        # \"no more order\" message\n        self.access_denied_text = pn.pane.HTML(\n            \"\"\"\n            &lt;div class=\"no-more-order-flag\"&gt;\n                &lt;div class=\"icon-container\"&gt;\n                    &lt;svg class=\"flashing-animation\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-shield-lock-filled\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\n                        &lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M11.998 2l.118 .007l.059 .008l.061 .013l.111 .034a.993 .993 0 0 1 .217 .112l.104 .082l.255 .218a11 11 0 0 0 7.189 2.537l.342 -.01a1 1 0 0 1 1.005 .717a13 13 0 0 1 -9.208 16.25a1 1 0 0 1 -.502 0a13 13 0 0 1 -9.209 -16.25a1 1 0 0 1 1.005 -.717a11 11 0 0 0 7.531 -2.527l.263 -.225l.096 -.075a.993 .993 0 0 1 .217 -.112l.112 -.034a.97 .97 0 0 1 .119 -.021l.115 -.007zm.002 7a2 2 0 0 0 -1.995 1.85l-.005 .15l.005 .15a2 2 0 0 0 .995 1.581v1.769l.007 .117a1 1 0 0 0 1.993 -.117l.001 -1.768a2 2 0 0 0 -1.001 -3.732z\" stroke-width=\"0\" fill=\"currentColor\"&gt;&lt;/path&gt;\n                    &lt;/svg&gt;\n                    &lt;span&gt;&lt;strong&gt;Insufficient privileges!&lt;/strong&gt;&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            \"\"\",\n            margin=5,\n            sizing_mode=\"stretch_width\",\n            stylesheets=[config.panel.gui.css_files.no_more_orders_path],\n        )\n\n        # WIDGET\n        # Password renewer (only basic auth)\n        self.password_widget = pn.Param(\n            BackendPasswordRenewer().param,\n            widgets={\n                \"new_password\": pnw.PasswordInput(\n                    name=\"New password\", placeholder=\"New Password\"\n                ),\n                \"repeat_new_password\": pnw.PasswordInput(\n                    name=\"Repeat new password\",\n                    placeholder=\"Repeat New Password\",\n                ),\n            },\n            name=\"Add/Update User Credentials\",\n            width=sidebar_content_width,\n        )\n        # Add user (only oauth)\n        self.add_privileged_user_widget = pn.Param(\n            BackendAddPrivilegedUser().param,\n            name=\"Add Privileged User\",\n            width=sidebar_content_width,\n        )\n        # User eraser\n        self.user_eraser = pn.Param(\n            BackendUserEraser().param,\n            name=\"Delete User\",\n            width=sidebar_content_width,\n        )\n        # User list\n        self.users_tabulator = pn.widgets.Tabulator(\n            value=self.auth_context.list_users_guests_and_privileges(),\n            sizing_mode=\"stretch_height\",\n        )\n        # Flags content (use empty dataframe to instantiate)\n        df_flags = models.Flags.read_as_df(\n            config=config,\n            index_col=\"id\",\n        )\n        self.flags_content = pn.widgets.Tabulator(\n            value=df_flags,\n            sizing_mode=\"stretch_height\",\n        )\n\n        # BUTTONS\n        # Exit button\n        # Password button\n        self.submit_password_button = pnw.Button(\n            name=\"Submit\",\n            button_type=\"success\",\n            height=generic_button_height,\n            icon=\"key\",\n            icon_size=\"2em\",\n            sizing_mode=\"stretch_width\",\n        )\n        # Delete User button\n        self.add_privileged_user_button = pnw.Button(\n            name=\"Add\",\n            button_type=\"success\",\n            height=generic_button_height,\n            icon=\"user-plus\",\n            icon_size=\"2em\",\n            sizing_mode=\"stretch_width\",\n        )\n        # Delete User button\n        self.delete_user_button = pnw.Button(\n            name=\"Delete\",\n            button_type=\"danger\",\n            height=generic_button_height,\n            icon=\"user-minus\",\n            icon_size=\"2em\",\n            sizing_mode=\"stretch_width\",\n        )\n        # Clear flags table button\n        self.clear_flags_button = pnw.Button(\n            name=\"Clear Guest Override Flags\",\n            button_type=\"danger\",\n            height=generic_button_height,\n            icon=\"file-shredder\",\n            icon_size=\"2em\",\n            sizing_mode=\"stretch_width\",\n        )\n\n        # COLUMN\n        # Create column with user credentials controls (basic auth)\n        self.add_update_user_column = pn.Column(\n            config.panel.gui.psw_text,\n            self.password_widget,\n            pn.VSpacer(),\n            self.submit_password_button,\n            width=sidebar_width,\n            sizing_mode=\"stretch_height\",\n            min_height=backend_min_height,\n        )\n        # Create column with user authenthication controls (oauth)\n        self.add_privileged_user_column = pn.Column(\n            self.add_privileged_user_widget,\n            pn.VSpacer(),\n            self.add_privileged_user_button,\n            width=sidebar_width,\n            sizing_mode=\"stretch_height\",\n            min_height=backend_min_height,\n        )\n        # Create column for deleting users\n        self.delete_user_column = pn.Column(\n            self.user_eraser,\n            pn.VSpacer(),\n            self.delete_user_button,\n            width=sidebar_width,\n            sizing_mode=\"stretch_height\",\n            min_height=backend_min_height,\n        )\n        # Create column with flags' list\n        self.clear_flags_column = pn.Column(\n            pn.pane.HTML(\"&lt;b&gt;Flags Table Content&lt;/b&gt;\"),\n            self.flags_content,\n            self.clear_flags_button,\n            width=sidebar_width,\n            sizing_mode=\"stretch_height\",\n            min_height=backend_min_height,\n        )\n        # Create column for users' list\n        self.list_user_column = pn.Column(\n            pn.pane.HTML(\"&lt;b&gt;Users and Privileges&lt;/b&gt;\"),\n            self.users_tabulator,\n            width=sidebar_width,\n            sizing_mode=\"stretch_height\",\n            min_height=backend_min_height,\n        )\n\n        # ROWS\n        self.backend_controls = pn.Row(\n            name=\"Actions\",\n            sizing_mode=\"stretch_both\",\n            min_height=backend_min_height,\n        )\n        # Add controls only for admin users\n        if not auth_user.is_admin():\n            self.backend_controls.append(self.access_denied_text)\n            self.backend_controls.append(pn.Spacer(height=15))\n        else:\n            # For basic auth use a password renewer, for oauth a widget for\n            # adding privileged users\n            if self.auth_context.is_basic_auth_active():\n                self.backend_controls.append(self.add_update_user_column)\n            else:\n                self.backend_controls.append(self.add_privileged_user_column)\n            self.backend_controls.append(\n                pn.pane.HTML(\n                    styles=dict(background=\"lightgray\"),\n                    width=2,\n                    sizing_mode=\"stretch_height\",\n                )\n            )\n            self.backend_controls.append(self.delete_user_column)\n            self.backend_controls.append(\n                pn.pane.HTML(\n                    styles=dict(background=\"lightgray\"),\n                    width=2,\n                    sizing_mode=\"stretch_height\",\n                )\n            )\n            self.backend_controls.append(self.clear_flags_column)\n            self.backend_controls.append(\n                pn.pane.HTML(\n                    styles=dict(background=\"lightgray\"),\n                    width=2,\n                    sizing_mode=\"stretch_height\",\n                )\n            )\n            self.backend_controls.append(self.list_user_column)\n\n        # CALLBACKS\n        # Submit password button callback\n        def submit_password_button_callback(self, config):\n            success = self.auth_context.backend_submit_password(\n                gi=self,\n                user_is_admin=self.password_widget.object.admin,\n                user_is_guest=self.password_widget.object.guest,\n            )\n            if success:\n                self.reload_backend(config)\n\n        self.submit_password_button.on_click(\n            lambda e: submit_password_button_callback(self, config)\n        )\n\n        # Add privileged user callback\n        def add_privileged_user_button_callback(self):\n            # Get username, updated at each key press\n            username_key_press = self.add_privileged_user_widget._widgets[\n                \"user\"\n            ].value_input\n            # Add user\n            AuthUser(\n                config=config, name=username_key_press\n            ).add_privileged_user(\n                is_admin=self.add_privileged_user_widget.object.admin,\n            )\n\n            self.reload_backend(config)\n            pn.state.notifications.success(\n                f\"User '{username_key_press}' added\",\n                duration=config.panel.notifications.duration,\n            )\n\n        self.add_privileged_user_button.on_click(\n            lambda e: add_privileged_user_button_callback(self)\n        )\n\n        # Delete user callback\n        def delete_user_button_callback(self):\n            # Get username, updated at each key press\n            username_key_press = self.user_eraser._widgets[\"user\"].value_input\n            # Delete user\n            deleted_data = AuthUser(\n                config=config, name=username_key_press\n            ).remove_user()\n            if (deleted_data[\"privileged_users_deleted\"] &gt; 0) or (\n                deleted_data[\"credentials_deleted\"] &gt; 0\n            ):\n                self.reload_backend(config)\n                pn.state.notifications.success(\n                    f\"User '{self.user_eraser.object.user}' deleted&lt;br&gt;auth: {deleted_data['privileged_users_deleted']}&lt;br&gt;cred: {deleted_data['credentials_deleted']}\",\n                    duration=config.panel.notifications.duration,\n                )\n            else:\n                pn.state.notifications.error(\n                    f\"User '{username_key_press}' does not exist\",\n                    duration=config.panel.notifications.duration,\n                )\n\n        self.delete_user_button.on_click(\n            lambda e: delete_user_button_callback(self)\n        )\n\n        # Clear flags callback\n        def clear_flags_button_callback(self):\n            # Clear flags\n            num_rows_deleted = models.Flags.clear_guest_override(config=config)\n            # Reload and notify user\n            self.reload_backend(config)\n            pn.state.notifications.success(\n                f\"Guest override flags cleared&lt;br&gt;{num_rows_deleted} rows deleted\",\n                duration=config.panel.notifications.duration,\n            )\n\n        self.clear_flags_button.on_click(\n            lambda e: clear_flags_button_callback(self)\n        )\n\n    # UTILITY METHODS ---------------------------------------------------------\n    # NAVBAR\n    def force_logout(self) -&gt; None:\n        \"\"\"Redirect the browser to the logout endpoint\"\"\"\n        _force_logout()\n\n    def exit_backend(self) -&gt; None:\n        \"\"\"Return to main homepage.\"\"\"\n        # Edit pathname to force exit\n        pn.state.location.pathname = (\n            pn.state.location.pathname.split(\"/\")[0] + \"/\"\n        )\n        pn.state.location.reload = True\n\n    # MAIN SECTION\n    def reload_backend(self, config: DictConfig) -&gt; None:\n        \"\"\"Reload backend by updating user lists and privileges.\n        Read also flags from `flags` table.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n        \"\"\"\n        # Users and guests lists\n        self.users_tabulator.value = (\n            self.auth_context.list_users_guests_and_privileges()\n        )\n        # Flags table content\n        df_flags = models.Flags.read_as_df(\n            config=config,\n            index_col=\"id\",\n        )\n        self.flags_content.value = df_flags\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.access_denied_text","title":"access_denied_text  <code>instance-attribute</code>","text":"<pre><code>access_denied_text = HTML(\n    '\\n            &lt;div class=\"no-more-order-flag\"&gt;\\n                &lt;div class=\"icon-container\"&gt;\\n                    &lt;svg class=\"flashing-animation\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-shield-lock-filled\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\\n                        &lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"&gt;&lt;/path&gt;\\n                        &lt;path d=\"M11.998 2l.118 .007l.059 .008l.061 .013l.111 .034a.993 .993 0 0 1 .217 .112l.104 .082l.255 .218a11 11 0 0 0 7.189 2.537l.342 -.01a1 1 0 0 1 1.005 .717a13 13 0 0 1 -9.208 16.25a1 1 0 0 1 -.502 0a13 13 0 0 1 -9.209 -16.25a1 1 0 0 1 1.005 -.717a11 11 0 0 0 7.531 -2.527l.263 -.225l.096 -.075a.993 .993 0 0 1 .217 -.112l.112 -.034a.97 .97 0 0 1 .119 -.021l.115 -.007zm.002 7a2 2 0 0 0 -1.995 1.85l-.005 .15l.005 .15a2 2 0 0 0 .995 1.581v1.769l.007 .117a1 1 0 0 0 1.993 -.117l.001 -1.768a2 2 0 0 0 -1.001 -3.732z\" stroke-width=\"0\" fill=\"currentColor\"&gt;&lt;/path&gt;\\n                    &lt;/svg&gt;\\n                    &lt;span&gt;&lt;strong&gt;Insufficient privileges!&lt;/strong&gt;&lt;/span&gt;\\n                &lt;/div&gt;\\n            &lt;/div&gt;\\n            ',\n    margin=5,\n    sizing_mode=\"stretch_width\",\n    stylesheets=[no_more_orders_path],\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.add_privileged_user_button","title":"add_privileged_user_button  <code>instance-attribute</code>","text":"<pre><code>add_privileged_user_button = Button(\n    name=\"Add\",\n    button_type=\"success\",\n    height=generic_button_height,\n    icon=\"user-plus\",\n    icon_size=\"2em\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.add_privileged_user_column","title":"add_privileged_user_column  <code>instance-attribute</code>","text":"<pre><code>add_privileged_user_column = Column(\n    add_privileged_user_widget,\n    VSpacer(),\n    add_privileged_user_button,\n    width=sidebar_width,\n    sizing_mode=\"stretch_height\",\n    min_height=backend_min_height,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.add_privileged_user_widget","title":"add_privileged_user_widget  <code>instance-attribute</code>","text":"<pre><code>add_privileged_user_widget = Param(\n    param,\n    name=\"Add Privileged User\",\n    width=sidebar_content_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.add_update_user_column","title":"add_update_user_column  <code>instance-attribute</code>","text":"<pre><code>add_update_user_column = Column(\n    psw_text,\n    password_widget,\n    VSpacer(),\n    submit_password_button,\n    width=sidebar_width,\n    sizing_mode=\"stretch_height\",\n    min_height=backend_min_height,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.auth_context","title":"auth_context  <code>instance-attribute</code>","text":"<pre><code>auth_context = auth_context\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.backend_controls","title":"backend_controls  <code>instance-attribute</code>","text":"<pre><code>backend_controls = Row(\n    name=\"Actions\",\n    sizing_mode=\"stretch_both\",\n    min_height=backend_min_height,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.clear_flags_button","title":"clear_flags_button  <code>instance-attribute</code>","text":"<pre><code>clear_flags_button = Button(\n    name=\"Clear Guest Override Flags\",\n    button_type=\"danger\",\n    height=generic_button_height,\n    icon=\"file-shredder\",\n    icon_size=\"2em\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.clear_flags_column","title":"clear_flags_column  <code>instance-attribute</code>","text":"<pre><code>clear_flags_column = Column(\n    HTML(\"&lt;b&gt;Flags Table Content&lt;/b&gt;\"),\n    flags_content,\n    clear_flags_button,\n    width=sidebar_width,\n    sizing_mode=\"stretch_height\",\n    min_height=backend_min_height,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.delete_user_button","title":"delete_user_button  <code>instance-attribute</code>","text":"<pre><code>delete_user_button = Button(\n    name=\"Delete\",\n    button_type=\"danger\",\n    height=generic_button_height,\n    icon=\"user-minus\",\n    icon_size=\"2em\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.delete_user_column","title":"delete_user_column  <code>instance-attribute</code>","text":"<pre><code>delete_user_column = Column(\n    user_eraser,\n    VSpacer(),\n    delete_user_button,\n    width=sidebar_width,\n    sizing_mode=\"stretch_height\",\n    min_height=backend_min_height,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.exit_button","title":"exit_button  <code>instance-attribute</code>","text":"<pre><code>exit_button = Button(\n    name=\"\",\n    button_type=\"primary\",\n    button_style=\"solid\",\n    width=header_button_width,\n    height=generic_button_height,\n    icon=\"home-move\",\n    icon_size=\"2em\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.flags_content","title":"flags_content  <code>instance-attribute</code>","text":"<pre><code>flags_content = Tabulator(\n    value=df_flags, sizing_mode=\"stretch_height\"\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.header_row","title":"header_row  <code>instance-attribute</code>","text":"<pre><code>header_row = Row(\n    height=header_row_height, sizing_mode=\"stretch_width\"\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.list_user_column","title":"list_user_column  <code>instance-attribute</code>","text":"<pre><code>list_user_column = Column(\n    HTML(\"&lt;b&gt;Users and Privileges&lt;/b&gt;\"),\n    users_tabulator,\n    width=sidebar_width,\n    sizing_mode=\"stretch_height\",\n    min_height=backend_min_height,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.password_widget","title":"password_widget  <code>instance-attribute</code>","text":"<pre><code>password_widget = Param(\n    param,\n    widgets={\n        \"new_password\": PasswordInput(\n            name=\"New password\", placeholder=\"New Password\"\n        ),\n        \"repeat_new_password\": PasswordInput(\n            name=\"Repeat new password\",\n            placeholder=\"Repeat New Password\",\n        ),\n    },\n    name=\"Add/Update User Credentials\",\n    width=sidebar_content_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.submit_password_button","title":"submit_password_button  <code>instance-attribute</code>","text":"<pre><code>submit_password_button = Button(\n    name=\"Submit\",\n    button_type=\"success\",\n    height=generic_button_height,\n    icon=\"key\",\n    icon_size=\"2em\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.user_eraser","title":"user_eraser  <code>instance-attribute</code>","text":"<pre><code>user_eraser = Param(\n    param, name=\"Delete User\", width=sidebar_content_width\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.users_tabulator","title":"users_tabulator  <code>instance-attribute</code>","text":"<pre><code>users_tabulator = Tabulator(\n    value=list_users_guests_and_privileges(),\n    sizing_mode=\"stretch_height\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.__init__","title":"__init__","text":"<pre><code>__init__(config: DictConfig, auth_user: AuthUser)\n</code></pre> Source code in <code>dlunch/gui.py</code> <pre><code>def __init__(\n    self,\n    config: DictConfig,\n    auth_user: AuthUser,\n):\n    # CONTEXT VARIABLES ---------------------------------------------------\n    # Store authentication context\n    self.auth_context = auth_user.auth_context\n\n    # HEADER SECTION ------------------------------------------------------\n    # WIDGET\n\n    # BUTTONS\n    self.exit_button = pnw.Button(\n        name=\"\",\n        button_type=\"primary\",\n        button_style=\"solid\",\n        width=header_button_width,\n        height=generic_button_height,\n        icon=\"home-move\",\n        icon_size=\"2em\",\n    )\n\n    # ROW\n    # Create column for person data (add logout button only if auth is active)\n    self.header_row = pn.Row(\n        height=header_row_height,\n        sizing_mode=\"stretch_width\",\n    )\n    # Append a controls to the right side of header\n    self.header_row.append(pn.HSpacer())\n    self.header_row.append(self.exit_button)\n    self.header_row.append(\n        pn.pane.HTML(styles=dict(background=\"white\"), width=2, height=45)\n    )\n\n    # CALLBACKS\n    # Exit callback\n    self.exit_button.on_click(lambda e: self.exit_backend())\n\n    # MAIN SECTION --------------------------------------------------------\n    # Backend main section\n\n    # TEXTS\n    # \"no more order\" message\n    self.access_denied_text = pn.pane.HTML(\n        \"\"\"\n        &lt;div class=\"no-more-order-flag\"&gt;\n            &lt;div class=\"icon-container\"&gt;\n                &lt;svg class=\"flashing-animation\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-shield-lock-filled\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\n                    &lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M11.998 2l.118 .007l.059 .008l.061 .013l.111 .034a.993 .993 0 0 1 .217 .112l.104 .082l.255 .218a11 11 0 0 0 7.189 2.537l.342 -.01a1 1 0 0 1 1.005 .717a13 13 0 0 1 -9.208 16.25a1 1 0 0 1 -.502 0a13 13 0 0 1 -9.209 -16.25a1 1 0 0 1 1.005 -.717a11 11 0 0 0 7.531 -2.527l.263 -.225l.096 -.075a.993 .993 0 0 1 .217 -.112l.112 -.034a.97 .97 0 0 1 .119 -.021l.115 -.007zm.002 7a2 2 0 0 0 -1.995 1.85l-.005 .15l.005 .15a2 2 0 0 0 .995 1.581v1.769l.007 .117a1 1 0 0 0 1.993 -.117l.001 -1.768a2 2 0 0 0 -1.001 -3.732z\" stroke-width=\"0\" fill=\"currentColor\"&gt;&lt;/path&gt;\n                &lt;/svg&gt;\n                &lt;span&gt;&lt;strong&gt;Insufficient privileges!&lt;/strong&gt;&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        \"\"\",\n        margin=5,\n        sizing_mode=\"stretch_width\",\n        stylesheets=[config.panel.gui.css_files.no_more_orders_path],\n    )\n\n    # WIDGET\n    # Password renewer (only basic auth)\n    self.password_widget = pn.Param(\n        BackendPasswordRenewer().param,\n        widgets={\n            \"new_password\": pnw.PasswordInput(\n                name=\"New password\", placeholder=\"New Password\"\n            ),\n            \"repeat_new_password\": pnw.PasswordInput(\n                name=\"Repeat new password\",\n                placeholder=\"Repeat New Password\",\n            ),\n        },\n        name=\"Add/Update User Credentials\",\n        width=sidebar_content_width,\n    )\n    # Add user (only oauth)\n    self.add_privileged_user_widget = pn.Param(\n        BackendAddPrivilegedUser().param,\n        name=\"Add Privileged User\",\n        width=sidebar_content_width,\n    )\n    # User eraser\n    self.user_eraser = pn.Param(\n        BackendUserEraser().param,\n        name=\"Delete User\",\n        width=sidebar_content_width,\n    )\n    # User list\n    self.users_tabulator = pn.widgets.Tabulator(\n        value=self.auth_context.list_users_guests_and_privileges(),\n        sizing_mode=\"stretch_height\",\n    )\n    # Flags content (use empty dataframe to instantiate)\n    df_flags = models.Flags.read_as_df(\n        config=config,\n        index_col=\"id\",\n    )\n    self.flags_content = pn.widgets.Tabulator(\n        value=df_flags,\n        sizing_mode=\"stretch_height\",\n    )\n\n    # BUTTONS\n    # Exit button\n    # Password button\n    self.submit_password_button = pnw.Button(\n        name=\"Submit\",\n        button_type=\"success\",\n        height=generic_button_height,\n        icon=\"key\",\n        icon_size=\"2em\",\n        sizing_mode=\"stretch_width\",\n    )\n    # Delete User button\n    self.add_privileged_user_button = pnw.Button(\n        name=\"Add\",\n        button_type=\"success\",\n        height=generic_button_height,\n        icon=\"user-plus\",\n        icon_size=\"2em\",\n        sizing_mode=\"stretch_width\",\n    )\n    # Delete User button\n    self.delete_user_button = pnw.Button(\n        name=\"Delete\",\n        button_type=\"danger\",\n        height=generic_button_height,\n        icon=\"user-minus\",\n        icon_size=\"2em\",\n        sizing_mode=\"stretch_width\",\n    )\n    # Clear flags table button\n    self.clear_flags_button = pnw.Button(\n        name=\"Clear Guest Override Flags\",\n        button_type=\"danger\",\n        height=generic_button_height,\n        icon=\"file-shredder\",\n        icon_size=\"2em\",\n        sizing_mode=\"stretch_width\",\n    )\n\n    # COLUMN\n    # Create column with user credentials controls (basic auth)\n    self.add_update_user_column = pn.Column(\n        config.panel.gui.psw_text,\n        self.password_widget,\n        pn.VSpacer(),\n        self.submit_password_button,\n        width=sidebar_width,\n        sizing_mode=\"stretch_height\",\n        min_height=backend_min_height,\n    )\n    # Create column with user authenthication controls (oauth)\n    self.add_privileged_user_column = pn.Column(\n        self.add_privileged_user_widget,\n        pn.VSpacer(),\n        self.add_privileged_user_button,\n        width=sidebar_width,\n        sizing_mode=\"stretch_height\",\n        min_height=backend_min_height,\n    )\n    # Create column for deleting users\n    self.delete_user_column = pn.Column(\n        self.user_eraser,\n        pn.VSpacer(),\n        self.delete_user_button,\n        width=sidebar_width,\n        sizing_mode=\"stretch_height\",\n        min_height=backend_min_height,\n    )\n    # Create column with flags' list\n    self.clear_flags_column = pn.Column(\n        pn.pane.HTML(\"&lt;b&gt;Flags Table Content&lt;/b&gt;\"),\n        self.flags_content,\n        self.clear_flags_button,\n        width=sidebar_width,\n        sizing_mode=\"stretch_height\",\n        min_height=backend_min_height,\n    )\n    # Create column for users' list\n    self.list_user_column = pn.Column(\n        pn.pane.HTML(\"&lt;b&gt;Users and Privileges&lt;/b&gt;\"),\n        self.users_tabulator,\n        width=sidebar_width,\n        sizing_mode=\"stretch_height\",\n        min_height=backend_min_height,\n    )\n\n    # ROWS\n    self.backend_controls = pn.Row(\n        name=\"Actions\",\n        sizing_mode=\"stretch_both\",\n        min_height=backend_min_height,\n    )\n    # Add controls only for admin users\n    if not auth_user.is_admin():\n        self.backend_controls.append(self.access_denied_text)\n        self.backend_controls.append(pn.Spacer(height=15))\n    else:\n        # For basic auth use a password renewer, for oauth a widget for\n        # adding privileged users\n        if self.auth_context.is_basic_auth_active():\n            self.backend_controls.append(self.add_update_user_column)\n        else:\n            self.backend_controls.append(self.add_privileged_user_column)\n        self.backend_controls.append(\n            pn.pane.HTML(\n                styles=dict(background=\"lightgray\"),\n                width=2,\n                sizing_mode=\"stretch_height\",\n            )\n        )\n        self.backend_controls.append(self.delete_user_column)\n        self.backend_controls.append(\n            pn.pane.HTML(\n                styles=dict(background=\"lightgray\"),\n                width=2,\n                sizing_mode=\"stretch_height\",\n            )\n        )\n        self.backend_controls.append(self.clear_flags_column)\n        self.backend_controls.append(\n            pn.pane.HTML(\n                styles=dict(background=\"lightgray\"),\n                width=2,\n                sizing_mode=\"stretch_height\",\n            )\n        )\n        self.backend_controls.append(self.list_user_column)\n\n    # CALLBACKS\n    # Submit password button callback\n    def submit_password_button_callback(self, config):\n        success = self.auth_context.backend_submit_password(\n            gi=self,\n            user_is_admin=self.password_widget.object.admin,\n            user_is_guest=self.password_widget.object.guest,\n        )\n        if success:\n            self.reload_backend(config)\n\n    self.submit_password_button.on_click(\n        lambda e: submit_password_button_callback(self, config)\n    )\n\n    # Add privileged user callback\n    def add_privileged_user_button_callback(self):\n        # Get username, updated at each key press\n        username_key_press = self.add_privileged_user_widget._widgets[\n            \"user\"\n        ].value_input\n        # Add user\n        AuthUser(\n            config=config, name=username_key_press\n        ).add_privileged_user(\n            is_admin=self.add_privileged_user_widget.object.admin,\n        )\n\n        self.reload_backend(config)\n        pn.state.notifications.success(\n            f\"User '{username_key_press}' added\",\n            duration=config.panel.notifications.duration,\n        )\n\n    self.add_privileged_user_button.on_click(\n        lambda e: add_privileged_user_button_callback(self)\n    )\n\n    # Delete user callback\n    def delete_user_button_callback(self):\n        # Get username, updated at each key press\n        username_key_press = self.user_eraser._widgets[\"user\"].value_input\n        # Delete user\n        deleted_data = AuthUser(\n            config=config, name=username_key_press\n        ).remove_user()\n        if (deleted_data[\"privileged_users_deleted\"] &gt; 0) or (\n            deleted_data[\"credentials_deleted\"] &gt; 0\n        ):\n            self.reload_backend(config)\n            pn.state.notifications.success(\n                f\"User '{self.user_eraser.object.user}' deleted&lt;br&gt;auth: {deleted_data['privileged_users_deleted']}&lt;br&gt;cred: {deleted_data['credentials_deleted']}\",\n                duration=config.panel.notifications.duration,\n            )\n        else:\n            pn.state.notifications.error(\n                f\"User '{username_key_press}' does not exist\",\n                duration=config.panel.notifications.duration,\n            )\n\n    self.delete_user_button.on_click(\n        lambda e: delete_user_button_callback(self)\n    )\n\n    # Clear flags callback\n    def clear_flags_button_callback(self):\n        # Clear flags\n        num_rows_deleted = models.Flags.clear_guest_override(config=config)\n        # Reload and notify user\n        self.reload_backend(config)\n        pn.state.notifications.success(\n            f\"Guest override flags cleared&lt;br&gt;{num_rows_deleted} rows deleted\",\n            duration=config.panel.notifications.duration,\n        )\n\n    self.clear_flags_button.on_click(\n        lambda e: clear_flags_button_callback(self)\n    )\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.exit_backend","title":"exit_backend","text":"<pre><code>exit_backend() -&gt; None\n</code></pre> <p>Return to main homepage.</p> Source code in <code>dlunch/gui.py</code> <pre><code>def exit_backend(self) -&gt; None:\n    \"\"\"Return to main homepage.\"\"\"\n    # Edit pathname to force exit\n    pn.state.location.pathname = (\n        pn.state.location.pathname.split(\"/\")[0] + \"/\"\n    )\n    pn.state.location.reload = True\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.force_logout","title":"force_logout","text":"<pre><code>force_logout() -&gt; None\n</code></pre> <p>Redirect the browser to the logout endpoint</p> Source code in <code>dlunch/gui.py</code> <pre><code>def force_logout(self) -&gt; None:\n    \"\"\"Redirect the browser to the logout endpoint\"\"\"\n    _force_logout()\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendInterface.reload_backend","title":"reload_backend","text":"<pre><code>reload_backend(config: DictConfig) -&gt; None\n</code></pre> <p>Reload backend by updating user lists and privileges. Read also flags from <code>flags</code> table.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required Source code in <code>dlunch/gui.py</code> <pre><code>def reload_backend(self, config: DictConfig) -&gt; None:\n    \"\"\"Reload backend by updating user lists and privileges.\n    Read also flags from `flags` table.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n    \"\"\"\n    # Users and guests lists\n    self.users_tabulator.value = (\n        self.auth_context.list_users_guests_and_privileges()\n    )\n    # Flags table content\n    df_flags = models.Flags.read_as_df(\n        config=config,\n        index_col=\"id\",\n    )\n    self.flags_content.value = df_flags\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendPasswordRenewer","title":"BackendPasswordRenewer","text":"<p>               Bases: <code>Parameterized</code></p> <p>Param class used inside the backend to create the widget that collect info to renew users password.</p> <p>It has more options compared to the standard <code>PasswordRenewer</code>.</p> <p>This widget is used only if basic authentication is active.</p> <p>Methods:</p> Name Description <code>__str__</code> <p>String representation of this object.</p> <p>Attributes:</p> Name Type Description <code>admin</code> <code>Boolean</code> <p>Admin flag (true if admin).</p> <code>guest</code> <code>Boolean</code> <p>Guest flag (true if guest).</p> <code>new_password</code> <code>String</code> <p>New password.</p> <code>repeat_new_password</code> <code>String</code> <p>Repeat the new password. This field tests if the new password is as intended.</p> <code>user</code> <code>String</code> <p>Username.</p> Source code in <code>dlunch/gui.py</code> <pre><code>class BackendPasswordRenewer(param.Parameterized):\n    \"\"\"Param class used inside the backend to create the widget that collect info to renew users password.\n\n    It has more options compared to the standard `PasswordRenewer`.\n\n    This widget is used only if basic authentication is active.\"\"\"\n\n    user: param.String = param.String(\n        default=\"\",\n        doc=\"username for password update (use 'guest' for guest user)\",\n    )\n    \"\"\"Username.\"\"\"\n    new_password: param.String = param.String(default=\"\")\n    \"\"\"New password.\"\"\"\n    repeat_new_password: param.String = param.String(default=\"\")\n    \"\"\"Repeat the new password. This field tests if the new password is as intended.\"\"\"\n    admin: param.Boolean = param.Boolean(\n        default=False, doc=\"add admin privileges\"\n    )\n    \"\"\"Admin flag (true if admin).\"\"\"\n    guest: param.Boolean = param.Boolean(\n        default=False,\n        doc=\"guest account (don't add user to privileged users' table)\",\n    )\n    \"\"\"Guest flag (true if guest).\n\n    User credentials are added to `credentials` table, but the user is not listed in `privileged_users` table.\"\"\"\n\n    def __str__(self):\n        \"\"\"String representation of this object.\n\n        Returns:\n            (str): string representation.\n        \"\"\"\n        return \"BackendPasswordRenewer\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendPasswordRenewer.admin","title":"admin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>admin: Boolean = Boolean(\n    default=False, doc=\"add admin privileges\"\n)\n</code></pre> <p>Admin flag (true if admin).</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendPasswordRenewer.guest","title":"guest  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>guest: Boolean = Boolean(\n    default=False,\n    doc=\"guest account (don't add user to privileged users' table)\",\n)\n</code></pre> <p>Guest flag (true if guest).</p> <p>User credentials are added to <code>credentials</code> table, but the user is not listed in <code>privileged_users</code> table.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendPasswordRenewer.new_password","title":"new_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>new_password: String = String(default='')\n</code></pre> <p>New password.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendPasswordRenewer.repeat_new_password","title":"repeat_new_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repeat_new_password: String = String(default='')\n</code></pre> <p>Repeat the new password. This field tests if the new password is as intended.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendPasswordRenewer.user","title":"user  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user: String = String(\n    default=\"\",\n    doc=\"username for password update (use 'guest' for guest user)\",\n)\n</code></pre> <p>Username.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendPasswordRenewer.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>String representation of this object.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/gui.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of this object.\n\n    Returns:\n        (str): string representation.\n    \"\"\"\n    return \"BackendPasswordRenewer\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendUserEraser","title":"BackendUserEraser","text":"<p>               Bases: <code>Parameterized</code></p> <p>Param class used inside the backend to create the widget that delete users.</p> <p>Users are deleted from both <code>credentials</code> and <code>privileged_user</code> tables.</p> <p>Methods:</p> Name Description <code>__str__</code> <p>String representation of this object.</p> <p>Attributes:</p> Name Type Description <code>user</code> <code>String</code> <p>User to be deleted.</p> Source code in <code>dlunch/gui.py</code> <pre><code>class BackendUserEraser(param.Parameterized):\n    \"\"\"Param class used inside the backend to create the widget that delete users.\n\n    Users are deleted from both `credentials` and `privileged_user` tables.\"\"\"\n\n    user: param.String = param.String(default=\"\", doc=\"user to be deleted\")\n    \"\"\"User to be deleted.\"\"\"\n\n    def __str__(self):\n        \"\"\"String representation of this object.\n\n        Returns:\n            (str): string representation.\n        \"\"\"\n        return \"BackendUserEraser\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendUserEraser.user","title":"user  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user: String = String(default='', doc='user to be deleted')\n</code></pre> <p>User to be deleted.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.BackendUserEraser.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>String representation of this object.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/gui.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of this object.\n\n    Returns:\n        (str): string representation.\n    \"\"\"\n    return \"BackendUserEraser\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface","title":"GraphicInterface","text":"<p>Class with widgets for the main graphic interface.</p> <p>All widgets are instantiated at class initialization.</p> <p>Class methods handle specific operations that may be repeated multiple time after class instantiation.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <code>waiter</code> <code>Waiter</code> <p>Waiter object with methods to handle user requests.</p> required <code>app</code> <code>Template</code> <p>App panel template (see <code>Panel docs &lt;https://panel.holoviz.org/how_to/templates/index.html&gt;</code>__).</p> required <code>person</code> <code>Person</code> <p>Object with user data and preferences for the lunch order.</p> required <code>auth_user</code> <code>AuthUser</code> <p>AuthUser object with authenticated user data.</p> required <code>guest_password</code> <code>str</code> <p>guest password to show in password tab. Used only if basic authentication is active. Defaults to empty string (<code>\"\"</code>).</p> <code>''</code> <p>Methods:</p> Name Description <code>__init__</code> <code>build_order_table</code> <p>Build <code>Tabulator</code> object to display placed orders.</p> <code>build_stats_and_info_text</code> <p>Build text used for statistics under the <code>stats</code> tab, and info under the <code>user</code> tab.</p> <code>build_time_label</code> <p>Build HTML field to display the time label.</p> <code>force_logout</code> <p>Redirect the browser to the logout endpoint</p> <code>load_sidebar_tabs</code> <p>Append tabs to the app template sidebar.</p> <code>open_backend</code> <p>Redirect the browser to the backend endpoint</p> <p>Attributes:</p> Name Type Description <code>additional_items_details</code> <code>auth_context</code> <code>backend_button</code> <code>build_menu_button</code> <code>buttons_flexbox</code> <code>change_order_time_takeaway_button</code> <code>dataframe</code> <code>delete_order_button</code> <code>download_button</code> <code>error_message</code> <code>file_widget</code> <code>guest_override_alert</code> <code>guest_password_widget</code> <code>guest_username_widget</code> <code>header_object</code> <code>header_row</code> <code>logout_button</code> <code>main_header_row</code> <code>menu_flexbox</code> <code>no_menu_col</code> <code>no_menu_image</code> <code>no_menu_image_attribution</code> <code>no_more_order_alert</code> <code>password_widget</code> <code>person_widget</code> <code>quote</code> <code>refresh_button</code> <code>reload_on_guest_override</code> <code>reload_on_no_more_order</code> <code>res_col</code> <code>results_divider</code> <code>send_order_button</code> <code>sidebar_download_orders_col</code> <code>sidebar_menu_upload_col</code> <code>sidebar_password</code> <code>sidebar_person_column</code> <code>sidebar_stats_col</code> <code>sidebar_tabs</code> <code>stats_widget</code> <code>submit_password_button</code> <code>takeaway_alert_sign</code> <code>takeaway_alert_text</code> <code>time_col</code> <code>time_col_title</code> <code>toggle_guest_override_button</code> <code>toggle_no_more_order_button</code> Source code in <code>dlunch/gui.py</code> <pre><code>class GraphicInterface:\n    \"\"\"Class with widgets for the main graphic interface.\n\n    All widgets are instantiated at class initialization.\n\n    Class methods handle specific operations that may be repeated multiple time after class instantiation.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n        waiter (core.Waiter): Waiter object with methods to handle user requests.\n        app (pn.Template): App panel template (see `Panel docs &lt;https://panel.holoviz.org/how_to/templates/index.html&gt;`__).\n        person (Person): Object with user data and preferences for the lunch order.\n        auth_user (AuthUser): AuthUser object with authenticated user data.\n        guest_password (str, optional): guest password to show in password tab. Used only if basic authentication is active.\n            Defaults to empty string (`\"\"`).\n    \"\"\"\n\n    def __init__(\n        self,\n        config: DictConfig,\n        waiter: core.Waiter,\n        app: pn.Template,\n        person: Person,\n        auth_user: AuthUser,\n        guest_password: str = \"\",\n    ):\n        # CONTEXT VARIABLES ---------------------------------------------------\n        # Store authentication context\n        self.auth_context = auth_user.auth_context\n\n        # HEADER SECTION ------------------------------------------------------\n        # WIDGET\n        # Create PNG pane with app icon\n        self.header_object = instantiate(config.panel.gui.header_object)\n\n        # BUTTONS\n        # Backend button\n        self.backend_button = pnw.Button(\n            name=\"\",\n            button_type=\"primary\",\n            button_style=\"solid\",\n            width=header_button_width,\n            height=generic_button_height,\n            icon=\"adjustments\",\n            icon_size=\"2em\",\n        )\n        # Guest override toggle button (if pressed the user act as a guest)\n        self.toggle_guest_override_button = pnw.Toggle(\n            button_type=\"primary\",\n            button_style=\"solid\",\n            width=header_button_width,\n            height=generic_button_height,\n            icon=\"user-bolt\",\n            icon_size=\"2em\",\n            stylesheets=[config.panel.gui.css_files.guest_override_path],\n        )\n        # Logout button\n        self.logout_button = pnw.Button(\n            name=\"\",\n            button_type=\"primary\",\n            button_style=\"solid\",\n            width=header_button_width,\n            height=generic_button_height,\n            icon=\"door-exit\",\n            icon_size=\"2em\",\n        )\n\n        # ROW\n        # Create column for person data (add logout button only if auth is active)\n        self.header_row = pn.Row(\n            height=header_row_height,\n            sizing_mode=\"stretch_width\",\n        )\n        # Append a graphic element to the left side of header\n        if config.panel.gui.header_object:\n            self.header_row.append(self.header_object)\n        # Append a controls to the right side of header\n        if self.auth_context.is_auth_active():\n            self.header_row.append(pn.HSpacer())\n            # Backend only for admin\n            if auth_user.is_admin():\n                self.header_row.append(self.backend_button)\n            # Guest override only for non guests\n            if not auth_user.is_guest(allow_override=False):\n                self.header_row.append(self.toggle_guest_override_button)\n            self.header_row.append(self.logout_button)\n            self.header_row.append(\n                pn.pane.HTML(\n                    styles=dict(background=\"white\"), width=2, height=45\n                )\n            )\n\n        # CALLBACKS\n        # Backend callback\n        self.backend_button.on_click(lambda e: self.open_backend())\n\n        # Guest override callback\n        @pn.depends(self.toggle_guest_override_button, watch=True)\n        def reload_on_guest_override_callback(\n            toggle: pnw.ToggleIcon, reload: bool = True\n        ):\n            # Update global variable that control guest override\n            # Only non guest can store this value in 'flags' table (guest users\n            # are always guests, there is no use in sorting a flag for them)\n            if not auth_user.is_guest(allow_override=False):\n                waiter.database_connector.set_flag(\n                    id=f\"{auth_user.name}_guest_override\",\n                    value=toggle,\n                )\n            # Show banner if override is active\n            self.guest_override_alert.visible = toggle\n            # Simply reload the menu when the toggle button value changes\n            if reload:\n                waiter.reload_menu(\n                    None,\n                    self,\n                )\n\n        # Add callback to attribute\n        self.reload_on_guest_override = reload_on_guest_override_callback\n\n        # Logout callback\n        self.logout_button.on_click(lambda e: self.force_logout())\n\n        # MAIN SECTION --------------------------------------------------------\n        # Elements required for build the main section of the web app\n\n        # TEXTS\n        # Quote of the day\n        self.quote = pn.pane.Markdown(\n            f\"\"\"\n            _{df_quote.quote.iloc[0]}_\n\n            **{df_quote.author.iloc[0]}**\n            \"\"\"\n        )\n        # Time column title\n        self.time_col_title = pn.pane.Markdown(\n            config.panel.time_column_text,\n            sizing_mode=\"stretch_width\",\n            styles={\"text-align\": \"center\"},\n        )\n        # \"no more order\" message\n        self.no_more_order_alert = pn.pane.HTML(\n            \"\"\"\n            &lt;div class=\"no-more-order-flag\"&gt;\n                &lt;div class=\"icon-container\"&gt;\n                    &lt;svg class=\"flashing-animation\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-alert-circle-filled\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\n                        &lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M12 2c5.523 0 10 4.477 10 10a10 10 0 0 1 -19.995 .324l-.005 -.324l.004 -.28c.148 -5.393 4.566 -9.72 9.996 -9.72zm.01 13l-.127 .007a1 1 0 0 0 0 1.986l.117 .007l.127 -.007a1 1 0 0 0 0 -1.986l-.117 -.007zm-.01 -8a1 1 0 0 0 -.993 .883l-.007 .117v4l.007 .117a1 1 0 0 0 1.986 0l.007 -.117v-4l-.007 -.117a1 1 0 0 0 -.993 -.883z\" stroke-width=\"0\" fill=\"currentColor\"&gt;&lt;/path&gt;\n                    &lt;/svg&gt;\n                    &lt;span&gt;&lt;strong&gt;Oh no! You missed this train...&lt;/strong&gt;&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div&gt;\n                    Orders are closed, better luck next time.\n                &lt;/div&gt;\n            &lt;/div&gt;\n            \"\"\",\n            margin=5,\n            sizing_mode=\"stretch_width\",\n            stylesheets=[config.panel.gui.css_files.no_more_orders_path],\n        )\n        # Alert for guest override\n        self.guest_override_alert = pn.pane.HTML(\n            \"\"\"\n            &lt;div class=\"guest-override-flag\"&gt;\n                &lt;div class=\"icon-container\"&gt;\n                    &lt;svg class=\"flashing-animation\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-radioactive-filled\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/&gt;\n                        &lt;path d=\"M21 11a1 1 0 0 1 1 1a10 10 0 0 1 -5 8.656a1 1 0 0 1 -1.302 -.268l-.064 -.098l-3 -5.19a.995 .995 0 0 1 -.133 -.542l.01 -.11l.023 -.106l.034 -.106l.046 -.1l.056 -.094l.067 -.089a.994 .994 0 0 1 .165 -.155l.098 -.064a2 2 0 0 0 .993 -1.57l.007 -.163a1 1 0 0 1 .883 -.994l.117 -.007h6z\" stroke-width=\"0\" fill=\"currentColor\" /&gt;\n                        &lt;path d=\"M7 3.344a10 10 0 0 1 10 0a1 1 0 0 1 .418 1.262l-.052 .104l-3 5.19l-.064 .098a.994 .994 0 0 1 -.155 .165l-.089 .067a1 1 0 0 1 -.195 .102l-.105 .034l-.107 .022a1.003 1.003 0 0 1 -.547 -.07l-.104 -.052a2 2 0 0 0 -1.842 -.082l-.158 .082a1 1 0 0 1 -1.302 -.268l-.064 -.098l-3 -5.19a1 1 0 0 1 .366 -1.366z\" stroke-width=\"0\" fill=\"currentColor\" /&gt;\n                        &lt;path d=\"M9 11a1 1 0 0 1 .993 .884l.007 .117a2 2 0 0 0 .861 1.645l.237 .152a.994 .994 0 0 1 .165 .155l.067 .089l.056 .095l.045 .099c.014 .036 .026 .07 .035 .106l.022 .107l.011 .11a.994 .994 0 0 1 -.08 .437l-.053 .104l-3 5.19a1 1 0 0 1 -1.366 .366a10 10 0 0 1 -5 -8.656a1 1 0 0 1 .883 -.993l.117 -.007h6z\" stroke-width=\"0\" fill=\"currentColor\" /&gt;\n                    &lt;/svg&gt;\n                    &lt;span&gt;&lt;strong&gt;Watch out! You are a guest now...&lt;/strong&gt;&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div&gt;\n                    Guest override is active.\n                &lt;/div&gt;\n            &lt;/div&gt;\n            \"\"\",\n            margin=5,\n            sizing_mode=\"stretch_width\",\n            stylesheets=[config.panel.gui.css_files.guest_override_path],\n        )\n        # Takeaway alert\n        self.takeaway_alert_sign = f\"&lt;span {config.panel.gui.takeaway_alert_icon_options}&gt;{config.panel.gui.takeaway_svg_icon}&lt;/span&gt;\"\n        self.takeaway_alert_text = f\"&lt;span {config.panel.gui.takeaway_alert_text_options}&gt;{config.panel.gui.takeaway_id}&lt;/span&gt; \"\n        # No menu image attribution\n        self.no_menu_image_attribution = pn.pane.HTML(\n            \"\"\"\n            &lt;i&gt;\n                Image by\n                &lt;a\n                    href=\"https://www.freepik.com/free-vector/tiny-cooks-making-spaghetti-dinner-isolated-flat-illustration_11235909.htm\"\n                    referrerpolicy=\"no-referrer\"\n                    rel=\"external\"\n                    target=\"_blank\"\n                &gt;\n                    pch.vector\n                &lt;/a&gt;\n                on Freepik\n            &lt;/i&gt;\n            \"\"\",\n            align=\"end\",\n            styles={\n                \"color\": \"darkgray\",\n                \"font-size\": \"10px\",\n                \"font-weight\": \"light\",\n            },\n        )\n\n        # WIDGETS\n        # JPG shown when no menu is available\n        self.no_menu_image = pn.pane.JPG(\n            config.panel.gui.no_menu_image_path, alt_text=\"no menu\"\n        )\n        # Create dataframe instance\n        self.dataframe = pnw.Tabulator(\n            name=\"Order\",\n            widths={config.panel.gui.note_column_name: 180},\n            selectable=False,\n            stylesheets=[config.panel.gui.css_files.custom_tabulator_path],\n        )\n\n        # BUTTONS\n        # Create refresh button\n        self.refresh_button = pnw.Button(\n            name=\"\",\n            button_style=\"outline\",\n            button_type=\"light\",\n            width=45,\n            height=generic_button_height,\n            icon=\"reload\",\n            icon_size=\"2em\",\n        )\n        # Create send button\n        self.send_order_button = pnw.Button(\n            name=\"Send Order\",\n            button_type=\"success\",\n            height=generic_button_height,\n            icon=\"circle-check-filled\",\n            icon_size=\"2em\",\n            sizing_mode=\"stretch_width\",\n        )\n        # Create toggle button that stop orders (used in time column)\n        # Initialized to False, but checked on app creation\n        self.toggle_no_more_order_button = pnw.Toggle(\n            name=\"Stop Orders\",\n            button_style=\"outline\",\n            button_type=\"warning\",\n            height=generic_button_height,\n            icon=\"hand-stop\",\n            icon_size=\"2em\",\n            sizing_mode=\"stretch_width\",\n        )\n        # Create change time\n        self.change_order_time_takeaway_button = pnw.Button(\n            name=\"Change Time/Takeaway\",\n            button_type=\"primary\",\n            button_style=\"outline\",\n            height=generic_button_height,\n            icon=\"clock-edit\",\n            icon_size=\"2em\",\n            sizing_mode=\"stretch_width\",\n        )\n        # Create delete order\n        self.delete_order_button = pnw.Button(\n            name=\"Delete Order\",\n            button_type=\"danger\",\n            height=generic_button_height,\n            icon=\"trash-filled\",\n            icon_size=\"2em\",\n            sizing_mode=\"stretch_width\",\n        )\n\n        # ROWS\n        self.main_header_row = pn.Row(\n            \"# Menu\",\n            pn.layout.HSpacer(),\n            self.refresh_button,\n        )\n\n        # COLUMNS\n        # Create column shown when no menu is available\n        self.no_menu_col = pn.Column(\n            self.no_menu_image,\n            self.no_menu_image_attribution,\n            sizing_mode=\"stretch_width\",\n            min_width=main_area_min_width,\n        )\n        # Create column for lunch time labels\n        self.time_col = pn.Column(width=time_col_width)\n        # Create column for resulting menus\n        self.res_col = pn.Column(\n            sizing_mode=\"stretch_width\", min_width=main_area_min_width\n        )\n\n        # FLEXBOXES\n        self.menu_flexbox = pn.FlexBox(\n            *[\n                self.dataframe,\n                pn.Spacer(width=time_col_spacer_width),\n                self.time_col,\n            ],\n            min_width=main_area_min_width,\n        )\n        self.buttons_flexbox = pn.FlexBox(\n            *[\n                self.send_order_button,\n                self.toggle_no_more_order_button,\n                self.change_order_time_takeaway_button,\n                self.delete_order_button,\n            ],\n            flex_wrap=\"nowrap\",\n            min_width=main_area_min_width,\n            sizing_mode=\"stretch_width\",\n        )\n        self.results_divider = pn.layout.Divider(\n            sizing_mode=\"stretch_width\", min_width=main_area_min_width\n        )\n\n        # CALLBACKS\n        # Callback on every \"toggle\" action\n        @pn.depends(self.toggle_no_more_order_button, watch=True)\n        def reload_on_no_more_order_callback(\n            toggle: pnw.Toggle, reload: bool = True\n        ):\n            # Update global variable\n            waiter.database_connector.set_flag(\n                id=\"no_more_orders\", value=toggle\n            )\n\n            # Show \"no more order\" text\n            self.no_more_order_alert.visible = toggle\n\n            # Deactivate send, delete and change order buttons\n            self.send_order_button.disabled = toggle\n            self.delete_order_button.disabled = toggle\n            self.change_order_time_takeaway_button.disabled = toggle\n\n            # Simply reload the menu when the toggle button value changes\n            if reload:\n                waiter.reload_menu(\n                    None,\n                    self,\n                )\n\n        # Add callback to attribute\n        self.reload_on_no_more_order = reload_on_no_more_order_callback\n\n        # Refresh button callback\n        self.refresh_button.on_click(\n            lambda e: waiter.reload_menu(\n                e,\n                self,\n            )\n        )\n        # Send order button callback\n        self.send_order_button.on_click(\n            lambda e: waiter.send_order(\n                e,\n                app,\n                person,\n                self,\n            )\n        )\n        # Delete order button callback\n        self.delete_order_button.on_click(\n            lambda e: waiter.delete_order(\n                e,\n                app,\n                self,\n            )\n        )\n        # Change order time button callback\n        self.change_order_time_takeaway_button.on_click(\n            lambda e: waiter.change_order_time_takeaway(\n                e,\n                person,\n                self,\n            )\n        )\n\n        # MODAL WINDOW --------------------------------------------------------\n        # Error message\n        self.error_message = pn.pane.HTML(\n            styles={\"color\": \"red\", \"font-weight\": \"bold\"},\n            sizing_mode=\"stretch_width\",\n        )\n        self.error_message.visible = False\n\n        # SIDEBAR -------------------------------------------------------------\n        # TEXTS\n        # Foldable additional item details dropdown menu\n        jinja_template = jinja2.Environment(\n            loader=jinja2.BaseLoader\n        ).from_string(config.panel.gui.additional_item_details_template)\n        self.additional_items_details = pn.pane.HTML(\n            jinja_template.render(\n                items=config.panel.additional_items_to_concat\n            ),\n            width=sidebar_content_width,\n        )\n\n        # WIDGET\n        # Person data\n        self.person_widget = pn.Param(\n            person.param,\n            widgets={\n                \"guest\": pnw.RadioButtonGroup(\n                    options=OmegaConf.to_container(\n                        config.panel.guest_types, resolve=True\n                    ),\n                    button_type=\"primary\",\n                    button_style=\"outline\",\n                ),\n                \"username\": pnw.TextInput(\n                    value=person.username,\n                    value_input=person.username,\n                    description=person.param.username.doc,\n                ),\n            },\n            width=sidebar_content_width,\n        )\n        # File upload\n        self.file_widget = pnw.FileInput(\n            accept=\".png,.jpg,.jpeg,.xlsx\", sizing_mode=\"stretch_width\"\n        )\n        # Stats table\n        # Create stats table (non-editable)\n        self.stats_widget = pnw.Tabulator(\n            name=\"Statistics\",\n            hidden_columns=[\"index\"],\n            width=sidebar_content_width - 20,\n            layout=\"fit_columns\",\n            stylesheets=[\n                config.panel.gui.css_files.custom_tabulator_path,\n                config.panel.gui.css_files.stats_tabulator_path,\n            ],\n        )\n        # Password renewer\n        self.password_widget = pn.Param(\n            PasswordRenewer().param,\n            widgets={\n                \"old_password\": pnw.PasswordInput(\n                    name=\"Old password\", placeholder=\"Old Password\"\n                ),\n                \"new_password\": pnw.PasswordInput(\n                    name=\"New password\", placeholder=\"New Password\"\n                ),\n                \"repeat_new_password\": pnw.PasswordInput(\n                    name=\"Repeat new password\",\n                    placeholder=\"Repeat New Password\",\n                ),\n            },\n            name=\"Change password\",\n            width=sidebar_content_width,\n        )\n        # Guest password text\n        self.guest_username_widget = pnw.TextInput(\n            name=\"Username\",\n            placeholder=\"If empty reload this page.\",\n            value=\"guest\",\n        )\n        self.guest_password_widget = pnw.PasswordInput(\n            name=\"Password\",\n            placeholder=\"If empty reload this page.\",\n            value=guest_password,\n        )\n        # Turn off guest user if no password is set (empty string)\n        if not guest_password:\n            self.guest_username_widget.value = \"\"\n            self.guest_username_widget.disabled = True\n            self.guest_username_widget.placeholder = \"NOT ACTIVE\"\n            self.guest_password_widget.value = \"\"\n            self.guest_password_widget.disabled = True\n            self.guest_password_widget.placeholder = \"NOT ACTIVE\"\n\n        # BUTTONS\n        # Create menu button\n        self.build_menu_button = pnw.Button(\n            name=\"Build Menu\",\n            button_type=\"primary\",\n            sizing_mode=\"stretch_width\",\n            icon=\"tools-kitchen-2\",\n            icon_size=\"2em\",\n        )\n        # Download button and callback\n        self.download_button = pn.widgets.FileDownload(\n            callback=lambda: waiter.download_dataframe(self),\n            filename=config.panel.file_name + \".xlsx\",\n            sizing_mode=\"stretch_width\",\n            icon=\"download\",\n            icon_size=\"2em\",\n        )\n        # Password button\n        self.submit_password_button = pnw.Button(\n            name=\"Submit\",\n            button_type=\"success\",\n            button_style=\"outline\",\n            height=generic_button_height,\n            icon=\"key\",\n            icon_size=\"2em\",\n            sizing_mode=\"stretch_width\",\n        )\n\n        # COLUMNS\n        # Create column for person data\n        self.sidebar_person_column = pn.Column(\n            person_text,\n            self.person_widget,\n            pn.Spacer(height=5),\n            self.additional_items_details,\n            name=\"User\",\n            width=sidebar_content_width,\n        )\n        # Leave an empty widget for the 'other info' section\n        self.sidebar_person_column.append(\n            pn.pane.HTML(),\n        )\n\n        # Create column for uploading image/Excel with the menu\n        self.sidebar_menu_upload_col = pn.Column(\n            upload_text,\n            self.file_widget,\n            self.build_menu_button,\n            name=\"Menu Upload\",\n            width=sidebar_content_width,\n        )\n        # Create column for downloading Excel with orders\n        self.sidebar_download_orders_col = pn.Column(\n            download_text,\n            self.download_button,\n            name=\"Download Orders\",\n            width=sidebar_content_width,\n        )\n        # Create column for statistics\n        self.sidebar_stats_col = pn.Column(\n            name=\"Stats\", width=sidebar_content_width\n        )\n\n        self.sidebar_password = pn.Column(\n            config.panel.gui.psw_text,\n            self.password_widget,\n            self.submit_password_button,\n            pn.Spacer(height=5),\n            pn.layout.Divider(),\n            guest_user_text,\n            self.guest_username_widget,\n            self.guest_password_widget,\n            name=\"Password\",\n            width=sidebar_content_width,\n        )\n\n        # TABS\n        # The person widget is defined in the app factory function because\n        # lunch times are configurable\n        self.sidebar_tabs = pn.Tabs(\n            width=sidebar_content_width,\n        )\n        # Reload tabs according to auth_user.is_guest results and guest_override\n        # flag (no need to cleans, tabs are already empty)\n        self.load_sidebar_tabs(auth_user=auth_user, clear_before_loading=False)\n\n        # CALLBACKS\n        # Build menu button callback\n        self.build_menu_button.on_click(\n            lambda e: waiter.build_menu(\n                e,\n                app,\n                self,\n            )\n        )\n        # Submit password button callback\n        self.submit_password_button.on_click(\n            lambda e: self.auth_context.submit_password(gi=self)\n        )\n\n    # UTILITY METHODS ---------------------------------------------------------\n    # NAVBAR\n    def open_backend(self) -&gt; None:\n        \"\"\"Redirect the browser to the backend endpoint\"\"\"\n        # Edit pathname to open backend\n        pn.state.location.pathname = (\n            pn.state.location.pathname.split(\"/\")[0] + \"/backend\"\n        )\n        pn.state.location.reload = True\n\n    def force_logout(self) -&gt; None:\n        \"\"\"Redirect the browser to the logout endpoint\"\"\"\n        _force_logout()\n\n    # MAIN SECTION\n    def build_order_table(\n        self,\n        config: DictConfig,\n        df: pd.DataFrame,\n        time: str,\n        guests_lists: dict = {},\n    ) -&gt; pnw.Tabulator:\n        \"\"\"Build `Tabulator` object to display placed orders.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n            df (pd.DataFrame): Table with orders. It has columns for each user that placed an order, total and a note columns.\n            time (str): Lunch time.\n            guests_lists (dict, optional): Dictionary with lists of users dived by guest type.\n                Keys of the dictionary are the type of guest listed.\n                Defaults to empty dictionary (`{}`).\n\n        Returns:\n            pnw.Tabulator: Panel `Tabulator` object representing placed orders.\n        \"\"\"\n        # Add guest icon to users' id\n        columns_with_guests_icons = df.columns.to_series()\n        for guest_type, guests_list in guests_lists.items():\n            columns_with_guests_icons[\n                columns_with_guests_icons.isin(guests_list)\n            ] += f\" {config.panel.gui.guest_icons[guest_type]}\"\n        df.columns = columns_with_guests_icons.to_list()\n        # Create table widget\n        orders_table_widget = pnw.Tabulator(\n            name=time,\n            value=df,\n            frozen_columns=[0],\n            layout=\"fit_data_table\",\n            stylesheets=[config.panel.gui.css_files.custom_tabulator_path],\n        )\n        # Make the table non-editable\n        orders_table_widget.editors = {c: None for c in df.columns}\n        return orders_table_widget\n\n    def build_time_label(\n        self,\n        time: str,\n        diners_n: str,\n        separator: str = \" &amp;#10072; \",\n        emoji: str = \"&amp;#127829;\",\n        per_icon: str = \" &amp;#10006; \",\n        is_takeaway: bool = False,\n        takeaway_alert_sign: str = \"TAKEAWAY\",\n        css_classes: list = [],\n        stylesheets: list = [],\n        **kwargs,\n    ) -&gt; pn.pane.HTML:\n        \"\"\"Build HTML field to display the time label.\n\n        This function is used to display labels that summarize an order.\n\n        Those are shown on the side of the menu table as well as labels above each order table.\n\n        Args:\n            time (str): Lunch time.\n            diners_n (str): Number of people that placed an order.\n            separator (str, optional): Separator between lunch time and order data. Defaults to \" &amp;#10072; \".\n            emoji (str, optional): Emoji used as number lunch symbol. Defaults to \"&amp;#127829;\".\n            per_icon (str, optional): icon used between the lunch emoji and the number of people that placed an order.\n                Usually a multiply operator.\n                Defaults to \" &amp;#10006; \".\n            is_takeaway (bool, optional): takeaway flag (true if the order is to takeaway). Defaults to False.\n            takeaway_alert_sign (str, optional): warning text to highlight that the order is to takeaway. Defaults to \"TAKEAWAY\".\n            css_classes (list, optional): CSS classes to assign to the resulting HTML pane. Defaults to [].\n            stylesheets (list, optional): Stylesheets to assign to the resulting HTML pane\n                (see `Panel docs &lt;https://panel.holoviz.org/how_to/styling/apply_css.html&gt;`__). Defaults to [].\n\n        Returns:\n            pn.pane.HTML: HTML pane representing a label with order summary.\n        \"\"\"\n        # If takeaway add alert sign\n        if is_takeaway:\n            takeaway = f\"{separator}{takeaway_alert_sign}\"\n        else:\n            takeaway = \"\"\n        # Time label pane\n        classes_str = \" \".join(css_classes)\n        time_label = pn.pane.HTML(\n            f'&lt;span class=\"{classes_str}\"&gt;{time}{separator}{emoji}{per_icon}{diners_n}{takeaway}&lt;/span&gt;',\n            stylesheets=stylesheets,\n            **kwargs,\n        )\n\n        return time_label\n\n    # SIDEBAR SECTION\n    def load_sidebar_tabs(\n        self, auth_user: AuthUser, clear_before_loading: bool = True\n    ) -&gt; None:\n        \"\"\"Append tabs to the app template sidebar.\n\n        The flag `clear_before_loading` is set to true only during first instantiation, because the sidebar is empty at first.\n        Use the default value during normal operation to avoid tabs duplication.\n\n        Args:\n            auth_user (AuthUser): AuthUser object with authenticated user data.\n            clear_before_loading (bool, optional): Set to true to remove all tabs before appending the new ones. Defaults to True.\n        \"\"\"\n        # Clean tabs\n        if clear_before_loading:\n            self.sidebar_tabs.clear()\n        # Append User tab\n        self.sidebar_tabs.append(self.sidebar_person_column)\n        # Append upload, download and stats only for non-guest\n        # Append password only for non-guest users if auth is active\n        if not auth_user.is_guest(allow_override=False):\n            self.sidebar_tabs.append(self.sidebar_menu_upload_col)\n            self.sidebar_tabs.append(self.sidebar_download_orders_col)\n            self.sidebar_tabs.append(self.sidebar_stats_col)\n            if self.auth_context.is_basic_auth_active():\n                self.sidebar_tabs.append(self.sidebar_password)\n\n    def build_stats_and_info_text(\n        self,\n        auth_user: AuthUser,\n        df_stats: pd.DataFrame,\n        version: str,\n        host_name: str,\n        stylesheets: list = [],\n    ) -&gt; dict:\n        \"\"\"Build text used for statistics under the `stats` tab, and info under the `user` tab.\n\n        This functions needs Data-Lunch version and the name of the hosting machine to populate the info section.\n\n        Args:\n            auth_user (AuthUser): AuthUser object with authenticated user data.\n            df_stats (pd.DataFrame): dataframe with statistics.\n            user (str): username.\n            version (str): Data-Lunch version.\n            host_name (str): host name.\n            stylesheets (list, optional): Stylesheets to assign to the resulting HTML pane\n                (see `Panel docs &lt;https://panel.holoviz.org/how_to/styling/apply_css.html&gt;`__). Defaults to [].\n\n        Returns:\n            dict: _description_\n        \"\"\"\n        # Stats top text\n        stats = pn.pane.HTML(\n            f\"\"\"\n            &lt;h3&gt;Statistics&lt;/h3&gt;\n            &lt;div&gt;\n                Grumbling stomachs fed:&lt;br&gt;\n                &lt;span id=\"stats-locals\"&gt;Locals&amp;nbsp;&amp;nbsp;{df_stats[df_stats[\"Guest\"] == \"NotAGuest\"]['Hungry People'].sum()}&lt;/span&gt;&lt;br&gt;\n                &lt;span id=\"stats-guests\"&gt;Guests&amp;nbsp;&amp;nbsp;{df_stats[df_stats[\"Guest\"] != \"NotAGuest\"]['Hungry People'].sum()}&lt;/span&gt;&lt;br&gt;\n                =================&lt;br&gt;\n                &lt;strong&gt;TOTAL&amp;nbsp;&amp;nbsp;{df_stats['Hungry People'].sum()}&lt;/strong&gt;&lt;br&gt;\n                &lt;br&gt;\n            &lt;/div&gt;\n            &lt;div&gt;\n                &lt;i&gt;See the table for details&lt;/i&gt;\n            &lt;/div&gt;\n            \"\"\",\n            stylesheets=stylesheets,\n        )\n        # Define user group\n        if auth_user.is_guest(allow_override=False):\n            user_group = \"guest\"\n        elif auth_user.is_admin():\n            user_group = \"admin\"\n        else:\n            user_group = \"user\"\n        # Other info\n        other_info = pn.pane.HTML(\n            f\"\"\"\n            &lt;details&gt;\n                &lt;summary&gt;&lt;strong&gt;Other Info&lt;/strong&gt;&lt;/summary&gt;\n                &lt;div class=\"icon-container\"&gt;\n                    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-user-square\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/&gt;\n                        &lt;path d=\"M9 10a3 3 0 1 0 6 0a3 3 0 0 0 -6 0\" /&gt;\n                        &lt;path d=\"M6 21v-1a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v1\" /&gt;\n                        &lt;path d=\"M3 5a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-14z\" /&gt;\n                    &lt;/svg&gt;\n                    &lt;span&gt;\n                        &lt;strong&gt;User:&lt;/strong&gt; &lt;i&gt;{auth_user.name}&lt;/i&gt;\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div class=\"icon-container\"&gt;\n                    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-users-group\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/&gt;\n                        &lt;path d=\"M10 13a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\" /&gt;\n                        &lt;path d=\"M8 21v-1a2 2 0 0 1 2 -2h4a2 2 0 0 1 2 2v1\" /&gt;\n                        &lt;path d=\"M15 5a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\" /&gt;\n                        &lt;path d=\"M17 10h2a2 2 0 0 1 2 2v1\" /&gt;\n                        &lt;path d=\"M5 5a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\" /&gt;\n                        &lt;path d=\"M3 13v-1a2 2 0 0 1 2 -2h2\" /&gt;\n                    &lt;/svg&gt;\n                    &lt;span&gt;\n                        &lt;strong&gt;Group:&lt;/strong&gt; &lt;i&gt;{user_group}&lt;/i&gt;\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div class=\"icon-container\"&gt;\n                    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-pizza\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/&gt;\n                        &lt;path d=\"M12 21.5c-3.04 0 -5.952 -.714 -8.5 -1.983l8.5 -16.517l8.5 16.517a19.09 19.09 0 0 1 -8.5 1.983z\" /&gt;\n                        &lt;path d=\"M5.38 15.866a14.94 14.94 0 0 0 6.815 1.634a14.944 14.944 0 0 0 6.502 -1.479\" /&gt;\n                        &lt;path d=\"M13 11.01v-.01\" /&gt;\n                        &lt;path d=\"M11 14v-.01\" /&gt;\n                    &lt;/svg&gt;\n                    &lt;span&gt;\n                        &lt;strong&gt;Data-Lunch:&lt;/strong&gt; &lt;i&gt;v{version}&lt;/i&gt;\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div class=\"icon-container\"&gt;\n                    &lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-cpu\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\n                        &lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M5 5m0 1a1 1 0 0 1 1 -1h12a1 1 0 0 1 1 1v12a1 1 0 0 1 -1 1h-12a1 1 0 0 1 -1 -1z\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M9 9h6v6h-6z\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M3 10h2\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M3 14h2\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M10 3v2\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M14 3v2\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M21 10h-2\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M21 14h-2\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M14 21v-2\"&gt;&lt;/path&gt;\n                        &lt;path d=\"M10 21v-2\"&gt;&lt;/path&gt;\n                    &lt;/svg&gt;\n                    &lt;span&gt;\n                        &lt;strong&gt;Host:&lt;/strong&gt; &lt;i&gt;{host_name}&lt;/i&gt;\n                    &lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/details&gt;\n            \"\"\",\n            sizing_mode=\"stretch_width\",\n            stylesheets=stylesheets,\n        )\n\n        return {\"stats\": stats, \"info\": other_info}\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.additional_items_details","title":"additional_items_details  <code>instance-attribute</code>","text":"<pre><code>additional_items_details = HTML(\n    render(items=additional_items_to_concat),\n    width=sidebar_content_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.auth_context","title":"auth_context  <code>instance-attribute</code>","text":"<pre><code>auth_context = auth_context\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.backend_button","title":"backend_button  <code>instance-attribute</code>","text":"<pre><code>backend_button = Button(\n    name=\"\",\n    button_type=\"primary\",\n    button_style=\"solid\",\n    width=header_button_width,\n    height=generic_button_height,\n    icon=\"adjustments\",\n    icon_size=\"2em\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.build_menu_button","title":"build_menu_button  <code>instance-attribute</code>","text":"<pre><code>build_menu_button = Button(\n    name=\"Build Menu\",\n    button_type=\"primary\",\n    sizing_mode=\"stretch_width\",\n    icon=\"tools-kitchen-2\",\n    icon_size=\"2em\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.buttons_flexbox","title":"buttons_flexbox  <code>instance-attribute</code>","text":"<pre><code>buttons_flexbox = FlexBox(\n    *[\n        send_order_button,\n        toggle_no_more_order_button,\n        change_order_time_takeaway_button,\n        delete_order_button,\n    ],\n    flex_wrap=\"nowrap\",\n    min_width=main_area_min_width,\n    sizing_mode=\"stretch_width\"\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.change_order_time_takeaway_button","title":"change_order_time_takeaway_button  <code>instance-attribute</code>","text":"<pre><code>change_order_time_takeaway_button = Button(\n    name=\"Change Time/Takeaway\",\n    button_type=\"primary\",\n    button_style=\"outline\",\n    height=generic_button_height,\n    icon=\"clock-edit\",\n    icon_size=\"2em\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.dataframe","title":"dataframe  <code>instance-attribute</code>","text":"<pre><code>dataframe = Tabulator(\n    name=\"Order\",\n    widths={note_column_name: 180},\n    selectable=False,\n    stylesheets=[custom_tabulator_path],\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.delete_order_button","title":"delete_order_button  <code>instance-attribute</code>","text":"<pre><code>delete_order_button = Button(\n    name=\"Delete Order\",\n    button_type=\"danger\",\n    height=generic_button_height,\n    icon=\"trash-filled\",\n    icon_size=\"2em\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.download_button","title":"download_button  <code>instance-attribute</code>","text":"<pre><code>download_button = FileDownload(\n    callback=lambda: download_dataframe(self),\n    filename=file_name + \".xlsx\",\n    sizing_mode=\"stretch_width\",\n    icon=\"download\",\n    icon_size=\"2em\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.error_message","title":"error_message  <code>instance-attribute</code>","text":"<pre><code>error_message = HTML(\n    styles={\"color\": \"red\", \"font-weight\": \"bold\"},\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.file_widget","title":"file_widget  <code>instance-attribute</code>","text":"<pre><code>file_widget = FileInput(\n    accept=\".png,.jpg,.jpeg,.xlsx\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.guest_override_alert","title":"guest_override_alert  <code>instance-attribute</code>","text":"<pre><code>guest_override_alert = HTML(\n    '\\n            &lt;div class=\"guest-override-flag\"&gt;\\n                &lt;div class=\"icon-container\"&gt;\\n                    &lt;svg class=\"flashing-animation\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-radioactive-filled\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/&gt;\\n                        &lt;path d=\"M21 11a1 1 0 0 1 1 1a10 10 0 0 1 -5 8.656a1 1 0 0 1 -1.302 -.268l-.064 -.098l-3 -5.19a.995 .995 0 0 1 -.133 -.542l.01 -.11l.023 -.106l.034 -.106l.046 -.1l.056 -.094l.067 -.089a.994 .994 0 0 1 .165 -.155l.098 -.064a2 2 0 0 0 .993 -1.57l.007 -.163a1 1 0 0 1 .883 -.994l.117 -.007h6z\" stroke-width=\"0\" fill=\"currentColor\" /&gt;\\n                        &lt;path d=\"M7 3.344a10 10 0 0 1 10 0a1 1 0 0 1 .418 1.262l-.052 .104l-3 5.19l-.064 .098a.994 .994 0 0 1 -.155 .165l-.089 .067a1 1 0 0 1 -.195 .102l-.105 .034l-.107 .022a1.003 1.003 0 0 1 -.547 -.07l-.104 -.052a2 2 0 0 0 -1.842 -.082l-.158 .082a1 1 0 0 1 -1.302 -.268l-.064 -.098l-3 -5.19a1 1 0 0 1 .366 -1.366z\" stroke-width=\"0\" fill=\"currentColor\" /&gt;\\n                        &lt;path d=\"M9 11a1 1 0 0 1 .993 .884l.007 .117a2 2 0 0 0 .861 1.645l.237 .152a.994 .994 0 0 1 .165 .155l.067 .089l.056 .095l.045 .099c.014 .036 .026 .07 .035 .106l.022 .107l.011 .11a.994 .994 0 0 1 -.08 .437l-.053 .104l-3 5.19a1 1 0 0 1 -1.366 .366a10 10 0 0 1 -5 -8.656a1 1 0 0 1 .883 -.993l.117 -.007h6z\" stroke-width=\"0\" fill=\"currentColor\" /&gt;\\n                    &lt;/svg&gt;\\n                    &lt;span&gt;&lt;strong&gt;Watch out! You are a guest now...&lt;/strong&gt;&lt;/span&gt;\\n                &lt;/div&gt;\\n                &lt;div&gt;\\n                    Guest override is active.\\n                &lt;/div&gt;\\n            &lt;/div&gt;\\n            ',\n    margin=5,\n    sizing_mode=\"stretch_width\",\n    stylesheets=[guest_override_path],\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.guest_password_widget","title":"guest_password_widget  <code>instance-attribute</code>","text":"<pre><code>guest_password_widget = PasswordInput(\n    name=\"Password\",\n    placeholder=\"If empty reload this page.\",\n    value=guest_password,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.guest_username_widget","title":"guest_username_widget  <code>instance-attribute</code>","text":"<pre><code>guest_username_widget = TextInput(\n    name=\"Username\",\n    placeholder=\"If empty reload this page.\",\n    value=\"guest\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.header_object","title":"header_object  <code>instance-attribute</code>","text":"<pre><code>header_object = instantiate(header_object)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.header_row","title":"header_row  <code>instance-attribute</code>","text":"<pre><code>header_row = Row(\n    height=header_row_height, sizing_mode=\"stretch_width\"\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.logout_button","title":"logout_button  <code>instance-attribute</code>","text":"<pre><code>logout_button = Button(\n    name=\"\",\n    button_type=\"primary\",\n    button_style=\"solid\",\n    width=header_button_width,\n    height=generic_button_height,\n    icon=\"door-exit\",\n    icon_size=\"2em\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.main_header_row","title":"main_header_row  <code>instance-attribute</code>","text":"<pre><code>main_header_row = Row('# Menu', HSpacer(), refresh_button)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.menu_flexbox","title":"menu_flexbox  <code>instance-attribute</code>","text":"<pre><code>menu_flexbox = FlexBox(\n    *[\n        dataframe,\n        Spacer(width=time_col_spacer_width),\n        time_col,\n    ],\n    min_width=main_area_min_width\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.no_menu_col","title":"no_menu_col  <code>instance-attribute</code>","text":"<pre><code>no_menu_col = Column(\n    no_menu_image,\n    no_menu_image_attribution,\n    sizing_mode=\"stretch_width\",\n    min_width=main_area_min_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.no_menu_image","title":"no_menu_image  <code>instance-attribute</code>","text":"<pre><code>no_menu_image = JPG(no_menu_image_path, alt_text='no menu')\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.no_menu_image_attribution","title":"no_menu_image_attribution  <code>instance-attribute</code>","text":"<pre><code>no_menu_image_attribution = HTML(\n    '\\n            &lt;i&gt;\\n                Image by\\n                &lt;a\\n                    href=\"https://www.freepik.com/free-vector/tiny-cooks-making-spaghetti-dinner-isolated-flat-illustration_11235909.htm\"\\n                    referrerpolicy=\"no-referrer\"\\n                    rel=\"external\"\\n                    target=\"_blank\"\\n                &gt;\\n                    pch.vector\\n                &lt;/a&gt;\\n                on Freepik\\n            &lt;/i&gt;\\n            ',\n    align=\"end\",\n    styles={\n        \"color\": \"darkgray\",\n        \"font-size\": \"10px\",\n        \"font-weight\": \"light\",\n    },\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.no_more_order_alert","title":"no_more_order_alert  <code>instance-attribute</code>","text":"<pre><code>no_more_order_alert = HTML(\n    '\\n            &lt;div class=\"no-more-order-flag\"&gt;\\n                &lt;div class=\"icon-container\"&gt;\\n                    &lt;svg class=\"flashing-animation\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-alert-circle-filled\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\\n                        &lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"&gt;&lt;/path&gt;\\n                        &lt;path d=\"M12 2c5.523 0 10 4.477 10 10a10 10 0 0 1 -19.995 .324l-.005 -.324l.004 -.28c.148 -5.393 4.566 -9.72 9.996 -9.72zm.01 13l-.127 .007a1 1 0 0 0 0 1.986l.117 .007l.127 -.007a1 1 0 0 0 0 -1.986l-.117 -.007zm-.01 -8a1 1 0 0 0 -.993 .883l-.007 .117v4l.007 .117a1 1 0 0 0 1.986 0l.007 -.117v-4l-.007 -.117a1 1 0 0 0 -.993 -.883z\" stroke-width=\"0\" fill=\"currentColor\"&gt;&lt;/path&gt;\\n                    &lt;/svg&gt;\\n                    &lt;span&gt;&lt;strong&gt;Oh no! You missed this train...&lt;/strong&gt;&lt;/span&gt;\\n                &lt;/div&gt;\\n                &lt;div&gt;\\n                    Orders are closed, better luck next time.\\n                &lt;/div&gt;\\n            &lt;/div&gt;\\n            ',\n    margin=5,\n    sizing_mode=\"stretch_width\",\n    stylesheets=[no_more_orders_path],\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.password_widget","title":"password_widget  <code>instance-attribute</code>","text":"<pre><code>password_widget = Param(\n    param,\n    widgets={\n        \"old_password\": PasswordInput(\n            name=\"Old password\", placeholder=\"Old Password\"\n        ),\n        \"new_password\": PasswordInput(\n            name=\"New password\", placeholder=\"New Password\"\n        ),\n        \"repeat_new_password\": PasswordInput(\n            name=\"Repeat new password\",\n            placeholder=\"Repeat New Password\",\n        ),\n    },\n    name=\"Change password\",\n    width=sidebar_content_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.person_widget","title":"person_widget  <code>instance-attribute</code>","text":"<pre><code>person_widget = Param(\n    param,\n    widgets={\n        \"guest\": RadioButtonGroup(\n            options=to_container(guest_types, resolve=True),\n            button_type=\"primary\",\n            button_style=\"outline\",\n        ),\n        \"username\": TextInput(\n            value=username,\n            value_input=username,\n            description=doc,\n        ),\n    },\n    width=sidebar_content_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.quote","title":"quote  <code>instance-attribute</code>","text":"<pre><code>quote = Markdown(f'\n            _{iloc[0]}_\n\n            **{iloc[0]}**\n            ')\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.refresh_button","title":"refresh_button  <code>instance-attribute</code>","text":"<pre><code>refresh_button = Button(\n    name=\"\",\n    button_style=\"outline\",\n    button_type=\"light\",\n    width=45,\n    height=generic_button_height,\n    icon=\"reload\",\n    icon_size=\"2em\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.reload_on_guest_override","title":"reload_on_guest_override  <code>instance-attribute</code>","text":"<pre><code>reload_on_guest_override = reload_on_guest_override_callback\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.reload_on_no_more_order","title":"reload_on_no_more_order  <code>instance-attribute</code>","text":"<pre><code>reload_on_no_more_order = reload_on_no_more_order_callback\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.res_col","title":"res_col  <code>instance-attribute</code>","text":"<pre><code>res_col = Column(\n    sizing_mode=\"stretch_width\",\n    min_width=main_area_min_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.results_divider","title":"results_divider  <code>instance-attribute</code>","text":"<pre><code>results_divider = Divider(\n    sizing_mode=\"stretch_width\",\n    min_width=main_area_min_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.send_order_button","title":"send_order_button  <code>instance-attribute</code>","text":"<pre><code>send_order_button = Button(\n    name=\"Send Order\",\n    button_type=\"success\",\n    height=generic_button_height,\n    icon=\"circle-check-filled\",\n    icon_size=\"2em\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.sidebar_download_orders_col","title":"sidebar_download_orders_col  <code>instance-attribute</code>","text":"<pre><code>sidebar_download_orders_col = Column(\n    download_text,\n    download_button,\n    name=\"Download Orders\",\n    width=sidebar_content_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.sidebar_menu_upload_col","title":"sidebar_menu_upload_col  <code>instance-attribute</code>","text":"<pre><code>sidebar_menu_upload_col = Column(\n    upload_text,\n    file_widget,\n    build_menu_button,\n    name=\"Menu Upload\",\n    width=sidebar_content_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.sidebar_password","title":"sidebar_password  <code>instance-attribute</code>","text":"<pre><code>sidebar_password = Column(\n    psw_text,\n    password_widget,\n    submit_password_button,\n    Spacer(height=5),\n    Divider(),\n    guest_user_text,\n    guest_username_widget,\n    guest_password_widget,\n    name=\"Password\",\n    width=sidebar_content_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.sidebar_person_column","title":"sidebar_person_column  <code>instance-attribute</code>","text":"<pre><code>sidebar_person_column = Column(\n    person_text,\n    person_widget,\n    Spacer(height=5),\n    additional_items_details,\n    name=\"User\",\n    width=sidebar_content_width,\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.sidebar_stats_col","title":"sidebar_stats_col  <code>instance-attribute</code>","text":"<pre><code>sidebar_stats_col = Column(\n    name=\"Stats\", width=sidebar_content_width\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.sidebar_tabs","title":"sidebar_tabs  <code>instance-attribute</code>","text":"<pre><code>sidebar_tabs = Tabs(width=sidebar_content_width)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.stats_widget","title":"stats_widget  <code>instance-attribute</code>","text":"<pre><code>stats_widget = Tabulator(\n    name=\"Statistics\",\n    hidden_columns=[\"index\"],\n    width=sidebar_content_width - 20,\n    layout=\"fit_columns\",\n    stylesheets=[\n        custom_tabulator_path,\n        stats_tabulator_path,\n    ],\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.submit_password_button","title":"submit_password_button  <code>instance-attribute</code>","text":"<pre><code>submit_password_button = Button(\n    name=\"Submit\",\n    button_type=\"success\",\n    button_style=\"outline\",\n    height=generic_button_height,\n    icon=\"key\",\n    icon_size=\"2em\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.takeaway_alert_sign","title":"takeaway_alert_sign  <code>instance-attribute</code>","text":"<pre><code>takeaway_alert_sign = f\"&lt;span {takeaway_alert_icon_options}&gt;{takeaway_svg_icon}&lt;/span&gt;\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.takeaway_alert_text","title":"takeaway_alert_text  <code>instance-attribute</code>","text":"<pre><code>takeaway_alert_text = f\"&lt;span {takeaway_alert_text_options}&gt;{takeaway_id}&lt;/span&gt; \"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.time_col","title":"time_col  <code>instance-attribute</code>","text":"<pre><code>time_col = Column(width=time_col_width)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.time_col_title","title":"time_col_title  <code>instance-attribute</code>","text":"<pre><code>time_col_title = Markdown(\n    time_column_text,\n    sizing_mode=\"stretch_width\",\n    styles={\"text-align\": \"center\"},\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.toggle_guest_override_button","title":"toggle_guest_override_button  <code>instance-attribute</code>","text":"<pre><code>toggle_guest_override_button = Toggle(\n    button_type=\"primary\",\n    button_style=\"solid\",\n    width=header_button_width,\n    height=generic_button_height,\n    icon=\"user-bolt\",\n    icon_size=\"2em\",\n    stylesheets=[guest_override_path],\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.toggle_no_more_order_button","title":"toggle_no_more_order_button  <code>instance-attribute</code>","text":"<pre><code>toggle_no_more_order_button = Toggle(\n    name=\"Stop Orders\",\n    button_style=\"outline\",\n    button_type=\"warning\",\n    height=generic_button_height,\n    icon=\"hand-stop\",\n    icon_size=\"2em\",\n    sizing_mode=\"stretch_width\",\n)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.__init__","title":"__init__","text":"<pre><code>__init__(\n    config: DictConfig,\n    waiter: Waiter,\n    app: Template,\n    person: Person,\n    auth_user: AuthUser,\n    guest_password: str = \"\",\n)\n</code></pre> Source code in <code>dlunch/gui.py</code> <pre><code>def __init__(\n    self,\n    config: DictConfig,\n    waiter: core.Waiter,\n    app: pn.Template,\n    person: Person,\n    auth_user: AuthUser,\n    guest_password: str = \"\",\n):\n    # CONTEXT VARIABLES ---------------------------------------------------\n    # Store authentication context\n    self.auth_context = auth_user.auth_context\n\n    # HEADER SECTION ------------------------------------------------------\n    # WIDGET\n    # Create PNG pane with app icon\n    self.header_object = instantiate(config.panel.gui.header_object)\n\n    # BUTTONS\n    # Backend button\n    self.backend_button = pnw.Button(\n        name=\"\",\n        button_type=\"primary\",\n        button_style=\"solid\",\n        width=header_button_width,\n        height=generic_button_height,\n        icon=\"adjustments\",\n        icon_size=\"2em\",\n    )\n    # Guest override toggle button (if pressed the user act as a guest)\n    self.toggle_guest_override_button = pnw.Toggle(\n        button_type=\"primary\",\n        button_style=\"solid\",\n        width=header_button_width,\n        height=generic_button_height,\n        icon=\"user-bolt\",\n        icon_size=\"2em\",\n        stylesheets=[config.panel.gui.css_files.guest_override_path],\n    )\n    # Logout button\n    self.logout_button = pnw.Button(\n        name=\"\",\n        button_type=\"primary\",\n        button_style=\"solid\",\n        width=header_button_width,\n        height=generic_button_height,\n        icon=\"door-exit\",\n        icon_size=\"2em\",\n    )\n\n    # ROW\n    # Create column for person data (add logout button only if auth is active)\n    self.header_row = pn.Row(\n        height=header_row_height,\n        sizing_mode=\"stretch_width\",\n    )\n    # Append a graphic element to the left side of header\n    if config.panel.gui.header_object:\n        self.header_row.append(self.header_object)\n    # Append a controls to the right side of header\n    if self.auth_context.is_auth_active():\n        self.header_row.append(pn.HSpacer())\n        # Backend only for admin\n        if auth_user.is_admin():\n            self.header_row.append(self.backend_button)\n        # Guest override only for non guests\n        if not auth_user.is_guest(allow_override=False):\n            self.header_row.append(self.toggle_guest_override_button)\n        self.header_row.append(self.logout_button)\n        self.header_row.append(\n            pn.pane.HTML(\n                styles=dict(background=\"white\"), width=2, height=45\n            )\n        )\n\n    # CALLBACKS\n    # Backend callback\n    self.backend_button.on_click(lambda e: self.open_backend())\n\n    # Guest override callback\n    @pn.depends(self.toggle_guest_override_button, watch=True)\n    def reload_on_guest_override_callback(\n        toggle: pnw.ToggleIcon, reload: bool = True\n    ):\n        # Update global variable that control guest override\n        # Only non guest can store this value in 'flags' table (guest users\n        # are always guests, there is no use in sorting a flag for them)\n        if not auth_user.is_guest(allow_override=False):\n            waiter.database_connector.set_flag(\n                id=f\"{auth_user.name}_guest_override\",\n                value=toggle,\n            )\n        # Show banner if override is active\n        self.guest_override_alert.visible = toggle\n        # Simply reload the menu when the toggle button value changes\n        if reload:\n            waiter.reload_menu(\n                None,\n                self,\n            )\n\n    # Add callback to attribute\n    self.reload_on_guest_override = reload_on_guest_override_callback\n\n    # Logout callback\n    self.logout_button.on_click(lambda e: self.force_logout())\n\n    # MAIN SECTION --------------------------------------------------------\n    # Elements required for build the main section of the web app\n\n    # TEXTS\n    # Quote of the day\n    self.quote = pn.pane.Markdown(\n        f\"\"\"\n        _{df_quote.quote.iloc[0]}_\n\n        **{df_quote.author.iloc[0]}**\n        \"\"\"\n    )\n    # Time column title\n    self.time_col_title = pn.pane.Markdown(\n        config.panel.time_column_text,\n        sizing_mode=\"stretch_width\",\n        styles={\"text-align\": \"center\"},\n    )\n    # \"no more order\" message\n    self.no_more_order_alert = pn.pane.HTML(\n        \"\"\"\n        &lt;div class=\"no-more-order-flag\"&gt;\n            &lt;div class=\"icon-container\"&gt;\n                &lt;svg class=\"flashing-animation\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-alert-circle-filled\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\n                    &lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M12 2c5.523 0 10 4.477 10 10a10 10 0 0 1 -19.995 .324l-.005 -.324l.004 -.28c.148 -5.393 4.566 -9.72 9.996 -9.72zm.01 13l-.127 .007a1 1 0 0 0 0 1.986l.117 .007l.127 -.007a1 1 0 0 0 0 -1.986l-.117 -.007zm-.01 -8a1 1 0 0 0 -.993 .883l-.007 .117v4l.007 .117a1 1 0 0 0 1.986 0l.007 -.117v-4l-.007 -.117a1 1 0 0 0 -.993 -.883z\" stroke-width=\"0\" fill=\"currentColor\"&gt;&lt;/path&gt;\n                &lt;/svg&gt;\n                &lt;span&gt;&lt;strong&gt;Oh no! You missed this train...&lt;/strong&gt;&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div&gt;\n                Orders are closed, better luck next time.\n            &lt;/div&gt;\n        &lt;/div&gt;\n        \"\"\",\n        margin=5,\n        sizing_mode=\"stretch_width\",\n        stylesheets=[config.panel.gui.css_files.no_more_orders_path],\n    )\n    # Alert for guest override\n    self.guest_override_alert = pn.pane.HTML(\n        \"\"\"\n        &lt;div class=\"guest-override-flag\"&gt;\n            &lt;div class=\"icon-container\"&gt;\n                &lt;svg class=\"flashing-animation\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-radioactive-filled\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/&gt;\n                    &lt;path d=\"M21 11a1 1 0 0 1 1 1a10 10 0 0 1 -5 8.656a1 1 0 0 1 -1.302 -.268l-.064 -.098l-3 -5.19a.995 .995 0 0 1 -.133 -.542l.01 -.11l.023 -.106l.034 -.106l.046 -.1l.056 -.094l.067 -.089a.994 .994 0 0 1 .165 -.155l.098 -.064a2 2 0 0 0 .993 -1.57l.007 -.163a1 1 0 0 1 .883 -.994l.117 -.007h6z\" stroke-width=\"0\" fill=\"currentColor\" /&gt;\n                    &lt;path d=\"M7 3.344a10 10 0 0 1 10 0a1 1 0 0 1 .418 1.262l-.052 .104l-3 5.19l-.064 .098a.994 .994 0 0 1 -.155 .165l-.089 .067a1 1 0 0 1 -.195 .102l-.105 .034l-.107 .022a1.003 1.003 0 0 1 -.547 -.07l-.104 -.052a2 2 0 0 0 -1.842 -.082l-.158 .082a1 1 0 0 1 -1.302 -.268l-.064 -.098l-3 -5.19a1 1 0 0 1 .366 -1.366z\" stroke-width=\"0\" fill=\"currentColor\" /&gt;\n                    &lt;path d=\"M9 11a1 1 0 0 1 .993 .884l.007 .117a2 2 0 0 0 .861 1.645l.237 .152a.994 .994 0 0 1 .165 .155l.067 .089l.056 .095l.045 .099c.014 .036 .026 .07 .035 .106l.022 .107l.011 .11a.994 .994 0 0 1 -.08 .437l-.053 .104l-3 5.19a1 1 0 0 1 -1.366 .366a10 10 0 0 1 -5 -8.656a1 1 0 0 1 .883 -.993l.117 -.007h6z\" stroke-width=\"0\" fill=\"currentColor\" /&gt;\n                &lt;/svg&gt;\n                &lt;span&gt;&lt;strong&gt;Watch out! You are a guest now...&lt;/strong&gt;&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div&gt;\n                Guest override is active.\n            &lt;/div&gt;\n        &lt;/div&gt;\n        \"\"\",\n        margin=5,\n        sizing_mode=\"stretch_width\",\n        stylesheets=[config.panel.gui.css_files.guest_override_path],\n    )\n    # Takeaway alert\n    self.takeaway_alert_sign = f\"&lt;span {config.panel.gui.takeaway_alert_icon_options}&gt;{config.panel.gui.takeaway_svg_icon}&lt;/span&gt;\"\n    self.takeaway_alert_text = f\"&lt;span {config.panel.gui.takeaway_alert_text_options}&gt;{config.panel.gui.takeaway_id}&lt;/span&gt; \"\n    # No menu image attribution\n    self.no_menu_image_attribution = pn.pane.HTML(\n        \"\"\"\n        &lt;i&gt;\n            Image by\n            &lt;a\n                href=\"https://www.freepik.com/free-vector/tiny-cooks-making-spaghetti-dinner-isolated-flat-illustration_11235909.htm\"\n                referrerpolicy=\"no-referrer\"\n                rel=\"external\"\n                target=\"_blank\"\n            &gt;\n                pch.vector\n            &lt;/a&gt;\n            on Freepik\n        &lt;/i&gt;\n        \"\"\",\n        align=\"end\",\n        styles={\n            \"color\": \"darkgray\",\n            \"font-size\": \"10px\",\n            \"font-weight\": \"light\",\n        },\n    )\n\n    # WIDGETS\n    # JPG shown when no menu is available\n    self.no_menu_image = pn.pane.JPG(\n        config.panel.gui.no_menu_image_path, alt_text=\"no menu\"\n    )\n    # Create dataframe instance\n    self.dataframe = pnw.Tabulator(\n        name=\"Order\",\n        widths={config.panel.gui.note_column_name: 180},\n        selectable=False,\n        stylesheets=[config.panel.gui.css_files.custom_tabulator_path],\n    )\n\n    # BUTTONS\n    # Create refresh button\n    self.refresh_button = pnw.Button(\n        name=\"\",\n        button_style=\"outline\",\n        button_type=\"light\",\n        width=45,\n        height=generic_button_height,\n        icon=\"reload\",\n        icon_size=\"2em\",\n    )\n    # Create send button\n    self.send_order_button = pnw.Button(\n        name=\"Send Order\",\n        button_type=\"success\",\n        height=generic_button_height,\n        icon=\"circle-check-filled\",\n        icon_size=\"2em\",\n        sizing_mode=\"stretch_width\",\n    )\n    # Create toggle button that stop orders (used in time column)\n    # Initialized to False, but checked on app creation\n    self.toggle_no_more_order_button = pnw.Toggle(\n        name=\"Stop Orders\",\n        button_style=\"outline\",\n        button_type=\"warning\",\n        height=generic_button_height,\n        icon=\"hand-stop\",\n        icon_size=\"2em\",\n        sizing_mode=\"stretch_width\",\n    )\n    # Create change time\n    self.change_order_time_takeaway_button = pnw.Button(\n        name=\"Change Time/Takeaway\",\n        button_type=\"primary\",\n        button_style=\"outline\",\n        height=generic_button_height,\n        icon=\"clock-edit\",\n        icon_size=\"2em\",\n        sizing_mode=\"stretch_width\",\n    )\n    # Create delete order\n    self.delete_order_button = pnw.Button(\n        name=\"Delete Order\",\n        button_type=\"danger\",\n        height=generic_button_height,\n        icon=\"trash-filled\",\n        icon_size=\"2em\",\n        sizing_mode=\"stretch_width\",\n    )\n\n    # ROWS\n    self.main_header_row = pn.Row(\n        \"# Menu\",\n        pn.layout.HSpacer(),\n        self.refresh_button,\n    )\n\n    # COLUMNS\n    # Create column shown when no menu is available\n    self.no_menu_col = pn.Column(\n        self.no_menu_image,\n        self.no_menu_image_attribution,\n        sizing_mode=\"stretch_width\",\n        min_width=main_area_min_width,\n    )\n    # Create column for lunch time labels\n    self.time_col = pn.Column(width=time_col_width)\n    # Create column for resulting menus\n    self.res_col = pn.Column(\n        sizing_mode=\"stretch_width\", min_width=main_area_min_width\n    )\n\n    # FLEXBOXES\n    self.menu_flexbox = pn.FlexBox(\n        *[\n            self.dataframe,\n            pn.Spacer(width=time_col_spacer_width),\n            self.time_col,\n        ],\n        min_width=main_area_min_width,\n    )\n    self.buttons_flexbox = pn.FlexBox(\n        *[\n            self.send_order_button,\n            self.toggle_no_more_order_button,\n            self.change_order_time_takeaway_button,\n            self.delete_order_button,\n        ],\n        flex_wrap=\"nowrap\",\n        min_width=main_area_min_width,\n        sizing_mode=\"stretch_width\",\n    )\n    self.results_divider = pn.layout.Divider(\n        sizing_mode=\"stretch_width\", min_width=main_area_min_width\n    )\n\n    # CALLBACKS\n    # Callback on every \"toggle\" action\n    @pn.depends(self.toggle_no_more_order_button, watch=True)\n    def reload_on_no_more_order_callback(\n        toggle: pnw.Toggle, reload: bool = True\n    ):\n        # Update global variable\n        waiter.database_connector.set_flag(\n            id=\"no_more_orders\", value=toggle\n        )\n\n        # Show \"no more order\" text\n        self.no_more_order_alert.visible = toggle\n\n        # Deactivate send, delete and change order buttons\n        self.send_order_button.disabled = toggle\n        self.delete_order_button.disabled = toggle\n        self.change_order_time_takeaway_button.disabled = toggle\n\n        # Simply reload the menu when the toggle button value changes\n        if reload:\n            waiter.reload_menu(\n                None,\n                self,\n            )\n\n    # Add callback to attribute\n    self.reload_on_no_more_order = reload_on_no_more_order_callback\n\n    # Refresh button callback\n    self.refresh_button.on_click(\n        lambda e: waiter.reload_menu(\n            e,\n            self,\n        )\n    )\n    # Send order button callback\n    self.send_order_button.on_click(\n        lambda e: waiter.send_order(\n            e,\n            app,\n            person,\n            self,\n        )\n    )\n    # Delete order button callback\n    self.delete_order_button.on_click(\n        lambda e: waiter.delete_order(\n            e,\n            app,\n            self,\n        )\n    )\n    # Change order time button callback\n    self.change_order_time_takeaway_button.on_click(\n        lambda e: waiter.change_order_time_takeaway(\n            e,\n            person,\n            self,\n        )\n    )\n\n    # MODAL WINDOW --------------------------------------------------------\n    # Error message\n    self.error_message = pn.pane.HTML(\n        styles={\"color\": \"red\", \"font-weight\": \"bold\"},\n        sizing_mode=\"stretch_width\",\n    )\n    self.error_message.visible = False\n\n    # SIDEBAR -------------------------------------------------------------\n    # TEXTS\n    # Foldable additional item details dropdown menu\n    jinja_template = jinja2.Environment(\n        loader=jinja2.BaseLoader\n    ).from_string(config.panel.gui.additional_item_details_template)\n    self.additional_items_details = pn.pane.HTML(\n        jinja_template.render(\n            items=config.panel.additional_items_to_concat\n        ),\n        width=sidebar_content_width,\n    )\n\n    # WIDGET\n    # Person data\n    self.person_widget = pn.Param(\n        person.param,\n        widgets={\n            \"guest\": pnw.RadioButtonGroup(\n                options=OmegaConf.to_container(\n                    config.panel.guest_types, resolve=True\n                ),\n                button_type=\"primary\",\n                button_style=\"outline\",\n            ),\n            \"username\": pnw.TextInput(\n                value=person.username,\n                value_input=person.username,\n                description=person.param.username.doc,\n            ),\n        },\n        width=sidebar_content_width,\n    )\n    # File upload\n    self.file_widget = pnw.FileInput(\n        accept=\".png,.jpg,.jpeg,.xlsx\", sizing_mode=\"stretch_width\"\n    )\n    # Stats table\n    # Create stats table (non-editable)\n    self.stats_widget = pnw.Tabulator(\n        name=\"Statistics\",\n        hidden_columns=[\"index\"],\n        width=sidebar_content_width - 20,\n        layout=\"fit_columns\",\n        stylesheets=[\n            config.panel.gui.css_files.custom_tabulator_path,\n            config.panel.gui.css_files.stats_tabulator_path,\n        ],\n    )\n    # Password renewer\n    self.password_widget = pn.Param(\n        PasswordRenewer().param,\n        widgets={\n            \"old_password\": pnw.PasswordInput(\n                name=\"Old password\", placeholder=\"Old Password\"\n            ),\n            \"new_password\": pnw.PasswordInput(\n                name=\"New password\", placeholder=\"New Password\"\n            ),\n            \"repeat_new_password\": pnw.PasswordInput(\n                name=\"Repeat new password\",\n                placeholder=\"Repeat New Password\",\n            ),\n        },\n        name=\"Change password\",\n        width=sidebar_content_width,\n    )\n    # Guest password text\n    self.guest_username_widget = pnw.TextInput(\n        name=\"Username\",\n        placeholder=\"If empty reload this page.\",\n        value=\"guest\",\n    )\n    self.guest_password_widget = pnw.PasswordInput(\n        name=\"Password\",\n        placeholder=\"If empty reload this page.\",\n        value=guest_password,\n    )\n    # Turn off guest user if no password is set (empty string)\n    if not guest_password:\n        self.guest_username_widget.value = \"\"\n        self.guest_username_widget.disabled = True\n        self.guest_username_widget.placeholder = \"NOT ACTIVE\"\n        self.guest_password_widget.value = \"\"\n        self.guest_password_widget.disabled = True\n        self.guest_password_widget.placeholder = \"NOT ACTIVE\"\n\n    # BUTTONS\n    # Create menu button\n    self.build_menu_button = pnw.Button(\n        name=\"Build Menu\",\n        button_type=\"primary\",\n        sizing_mode=\"stretch_width\",\n        icon=\"tools-kitchen-2\",\n        icon_size=\"2em\",\n    )\n    # Download button and callback\n    self.download_button = pn.widgets.FileDownload(\n        callback=lambda: waiter.download_dataframe(self),\n        filename=config.panel.file_name + \".xlsx\",\n        sizing_mode=\"stretch_width\",\n        icon=\"download\",\n        icon_size=\"2em\",\n    )\n    # Password button\n    self.submit_password_button = pnw.Button(\n        name=\"Submit\",\n        button_type=\"success\",\n        button_style=\"outline\",\n        height=generic_button_height,\n        icon=\"key\",\n        icon_size=\"2em\",\n        sizing_mode=\"stretch_width\",\n    )\n\n    # COLUMNS\n    # Create column for person data\n    self.sidebar_person_column = pn.Column(\n        person_text,\n        self.person_widget,\n        pn.Spacer(height=5),\n        self.additional_items_details,\n        name=\"User\",\n        width=sidebar_content_width,\n    )\n    # Leave an empty widget for the 'other info' section\n    self.sidebar_person_column.append(\n        pn.pane.HTML(),\n    )\n\n    # Create column for uploading image/Excel with the menu\n    self.sidebar_menu_upload_col = pn.Column(\n        upload_text,\n        self.file_widget,\n        self.build_menu_button,\n        name=\"Menu Upload\",\n        width=sidebar_content_width,\n    )\n    # Create column for downloading Excel with orders\n    self.sidebar_download_orders_col = pn.Column(\n        download_text,\n        self.download_button,\n        name=\"Download Orders\",\n        width=sidebar_content_width,\n    )\n    # Create column for statistics\n    self.sidebar_stats_col = pn.Column(\n        name=\"Stats\", width=sidebar_content_width\n    )\n\n    self.sidebar_password = pn.Column(\n        config.panel.gui.psw_text,\n        self.password_widget,\n        self.submit_password_button,\n        pn.Spacer(height=5),\n        pn.layout.Divider(),\n        guest_user_text,\n        self.guest_username_widget,\n        self.guest_password_widget,\n        name=\"Password\",\n        width=sidebar_content_width,\n    )\n\n    # TABS\n    # The person widget is defined in the app factory function because\n    # lunch times are configurable\n    self.sidebar_tabs = pn.Tabs(\n        width=sidebar_content_width,\n    )\n    # Reload tabs according to auth_user.is_guest results and guest_override\n    # flag (no need to cleans, tabs are already empty)\n    self.load_sidebar_tabs(auth_user=auth_user, clear_before_loading=False)\n\n    # CALLBACKS\n    # Build menu button callback\n    self.build_menu_button.on_click(\n        lambda e: waiter.build_menu(\n            e,\n            app,\n            self,\n        )\n    )\n    # Submit password button callback\n    self.submit_password_button.on_click(\n        lambda e: self.auth_context.submit_password(gi=self)\n    )\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.build_order_table","title":"build_order_table","text":"<pre><code>build_order_table(\n    config: DictConfig,\n    df: DataFrame,\n    time: str,\n    guests_lists: dict = {},\n) -&gt; Tabulator\n</code></pre> <p>Build <code>Tabulator</code> object to display placed orders.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <code>df</code> <code>DataFrame</code> <p>Table with orders. It has columns for each user that placed an order, total and a note columns.</p> required <code>time</code> <code>str</code> <p>Lunch time.</p> required <code>guests_lists</code> <code>dict</code> <p>Dictionary with lists of users dived by guest type. Keys of the dictionary are the type of guest listed. Defaults to empty dictionary (<code>{}</code>).</p> <code>{}</code> <p>Returns:</p> Type Description <code>Tabulator</code> <p>Panel <code>Tabulator</code> object representing placed orders.</p> Source code in <code>dlunch/gui.py</code> <pre><code>def build_order_table(\n    self,\n    config: DictConfig,\n    df: pd.DataFrame,\n    time: str,\n    guests_lists: dict = {},\n) -&gt; pnw.Tabulator:\n    \"\"\"Build `Tabulator` object to display placed orders.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n        df (pd.DataFrame): Table with orders. It has columns for each user that placed an order, total and a note columns.\n        time (str): Lunch time.\n        guests_lists (dict, optional): Dictionary with lists of users dived by guest type.\n            Keys of the dictionary are the type of guest listed.\n            Defaults to empty dictionary (`{}`).\n\n    Returns:\n        pnw.Tabulator: Panel `Tabulator` object representing placed orders.\n    \"\"\"\n    # Add guest icon to users' id\n    columns_with_guests_icons = df.columns.to_series()\n    for guest_type, guests_list in guests_lists.items():\n        columns_with_guests_icons[\n            columns_with_guests_icons.isin(guests_list)\n        ] += f\" {config.panel.gui.guest_icons[guest_type]}\"\n    df.columns = columns_with_guests_icons.to_list()\n    # Create table widget\n    orders_table_widget = pnw.Tabulator(\n        name=time,\n        value=df,\n        frozen_columns=[0],\n        layout=\"fit_data_table\",\n        stylesheets=[config.panel.gui.css_files.custom_tabulator_path],\n    )\n    # Make the table non-editable\n    orders_table_widget.editors = {c: None for c in df.columns}\n    return orders_table_widget\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.build_stats_and_info_text","title":"build_stats_and_info_text","text":"<pre><code>build_stats_and_info_text(\n    auth_user: AuthUser,\n    df_stats: DataFrame,\n    version: str,\n    host_name: str,\n    stylesheets: list = [],\n) -&gt; dict\n</code></pre> <p>Build text used for statistics under the <code>stats</code> tab, and info under the <code>user</code> tab.</p> <p>This functions needs Data-Lunch version and the name of the hosting machine to populate the info section.</p> <p>Parameters:</p> Name Type Description Default <code>auth_user</code> <code>AuthUser</code> <p>AuthUser object with authenticated user data.</p> required <code>df_stats</code> <code>DataFrame</code> <p>dataframe with statistics.</p> required <code>user</code> <code>str</code> <p>username.</p> required <code>version</code> <code>str</code> <p>Data-Lunch version.</p> required <code>host_name</code> <code>str</code> <p>host name.</p> required <code>stylesheets</code> <code>list</code> <p>Stylesheets to assign to the resulting HTML pane (see <code>Panel docs &lt;https://panel.holoviz.org/how_to/styling/apply_css.html&gt;</code>__). Defaults to [].</p> <code>[]</code> <p>Returns:</p> Type Description <code>dict</code> <p>description</p> Source code in <code>dlunch/gui.py</code> <pre><code>def build_stats_and_info_text(\n    self,\n    auth_user: AuthUser,\n    df_stats: pd.DataFrame,\n    version: str,\n    host_name: str,\n    stylesheets: list = [],\n) -&gt; dict:\n    \"\"\"Build text used for statistics under the `stats` tab, and info under the `user` tab.\n\n    This functions needs Data-Lunch version and the name of the hosting machine to populate the info section.\n\n    Args:\n        auth_user (AuthUser): AuthUser object with authenticated user data.\n        df_stats (pd.DataFrame): dataframe with statistics.\n        user (str): username.\n        version (str): Data-Lunch version.\n        host_name (str): host name.\n        stylesheets (list, optional): Stylesheets to assign to the resulting HTML pane\n            (see `Panel docs &lt;https://panel.holoviz.org/how_to/styling/apply_css.html&gt;`__). Defaults to [].\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    # Stats top text\n    stats = pn.pane.HTML(\n        f\"\"\"\n        &lt;h3&gt;Statistics&lt;/h3&gt;\n        &lt;div&gt;\n            Grumbling stomachs fed:&lt;br&gt;\n            &lt;span id=\"stats-locals\"&gt;Locals&amp;nbsp;&amp;nbsp;{df_stats[df_stats[\"Guest\"] == \"NotAGuest\"]['Hungry People'].sum()}&lt;/span&gt;&lt;br&gt;\n            &lt;span id=\"stats-guests\"&gt;Guests&amp;nbsp;&amp;nbsp;{df_stats[df_stats[\"Guest\"] != \"NotAGuest\"]['Hungry People'].sum()}&lt;/span&gt;&lt;br&gt;\n            =================&lt;br&gt;\n            &lt;strong&gt;TOTAL&amp;nbsp;&amp;nbsp;{df_stats['Hungry People'].sum()}&lt;/strong&gt;&lt;br&gt;\n            &lt;br&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;i&gt;See the table for details&lt;/i&gt;\n        &lt;/div&gt;\n        \"\"\",\n        stylesheets=stylesheets,\n    )\n    # Define user group\n    if auth_user.is_guest(allow_override=False):\n        user_group = \"guest\"\n    elif auth_user.is_admin():\n        user_group = \"admin\"\n    else:\n        user_group = \"user\"\n    # Other info\n    other_info = pn.pane.HTML(\n        f\"\"\"\n        &lt;details&gt;\n            &lt;summary&gt;&lt;strong&gt;Other Info&lt;/strong&gt;&lt;/summary&gt;\n            &lt;div class=\"icon-container\"&gt;\n                &lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-user-square\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/&gt;\n                    &lt;path d=\"M9 10a3 3 0 1 0 6 0a3 3 0 0 0 -6 0\" /&gt;\n                    &lt;path d=\"M6 21v-1a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v1\" /&gt;\n                    &lt;path d=\"M3 5a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-14z\" /&gt;\n                &lt;/svg&gt;\n                &lt;span&gt;\n                    &lt;strong&gt;User:&lt;/strong&gt; &lt;i&gt;{auth_user.name}&lt;/i&gt;\n                &lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"icon-container\"&gt;\n                &lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-users-group\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/&gt;\n                    &lt;path d=\"M10 13a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\" /&gt;\n                    &lt;path d=\"M8 21v-1a2 2 0 0 1 2 -2h4a2 2 0 0 1 2 2v1\" /&gt;\n                    &lt;path d=\"M15 5a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\" /&gt;\n                    &lt;path d=\"M17 10h2a2 2 0 0 1 2 2v1\" /&gt;\n                    &lt;path d=\"M5 5a2 2 0 1 0 4 0a2 2 0 0 0 -4 0\" /&gt;\n                    &lt;path d=\"M3 13v-1a2 2 0 0 1 2 -2h2\" /&gt;\n                &lt;/svg&gt;\n                &lt;span&gt;\n                    &lt;strong&gt;Group:&lt;/strong&gt; &lt;i&gt;{user_group}&lt;/i&gt;\n                &lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"icon-container\"&gt;\n                &lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-pizza\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/&gt;\n                    &lt;path d=\"M12 21.5c-3.04 0 -5.952 -.714 -8.5 -1.983l8.5 -16.517l8.5 16.517a19.09 19.09 0 0 1 -8.5 1.983z\" /&gt;\n                    &lt;path d=\"M5.38 15.866a14.94 14.94 0 0 0 6.815 1.634a14.944 14.944 0 0 0 6.502 -1.479\" /&gt;\n                    &lt;path d=\"M13 11.01v-.01\" /&gt;\n                    &lt;path d=\"M11 14v-.01\" /&gt;\n                &lt;/svg&gt;\n                &lt;span&gt;\n                    &lt;strong&gt;Data-Lunch:&lt;/strong&gt; &lt;i&gt;v{version}&lt;/i&gt;\n                &lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"icon-container\"&gt;\n                &lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-cpu\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\n                    &lt;path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M5 5m0 1a1 1 0 0 1 1 -1h12a1 1 0 0 1 1 1v12a1 1 0 0 1 -1 1h-12a1 1 0 0 1 -1 -1z\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M9 9h6v6h-6z\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M3 10h2\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M3 14h2\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M10 3v2\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M14 3v2\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M21 10h-2\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M21 14h-2\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M14 21v-2\"&gt;&lt;/path&gt;\n                    &lt;path d=\"M10 21v-2\"&gt;&lt;/path&gt;\n                &lt;/svg&gt;\n                &lt;span&gt;\n                    &lt;strong&gt;Host:&lt;/strong&gt; &lt;i&gt;{host_name}&lt;/i&gt;\n                &lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/details&gt;\n        \"\"\",\n        sizing_mode=\"stretch_width\",\n        stylesheets=stylesheets,\n    )\n\n    return {\"stats\": stats, \"info\": other_info}\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.build_time_label","title":"build_time_label","text":"<pre><code>build_time_label(\n    time: str,\n    diners_n: str,\n    separator: str = \" &amp;#10072; \",\n    emoji: str = \"&amp;#127829;\",\n    per_icon: str = \" &amp;#10006; \",\n    is_takeaway: bool = False,\n    takeaway_alert_sign: str = \"TAKEAWAY\",\n    css_classes: list = [],\n    stylesheets: list = [],\n    **kwargs\n) -&gt; HTML\n</code></pre> <p>Build HTML field to display the time label.</p> <p>This function is used to display labels that summarize an order.</p> <p>Those are shown on the side of the menu table as well as labels above each order table.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>str</code> <p>Lunch time.</p> required <code>diners_n</code> <code>str</code> <p>Number of people that placed an order.</p> required <code>separator</code> <code>str</code> <p>Separator between lunch time and order data. Defaults to \" \u2758 \".</p> <code>' &amp;#10072; '</code> <code>emoji</code> <code>str</code> <p>Emoji used as number lunch symbol. Defaults to \"\ud83c\udf55\".</p> <code>'&amp;#127829;'</code> <code>per_icon</code> <code>str</code> <p>icon used between the lunch emoji and the number of people that placed an order. Usually a multiply operator. Defaults to \" \u2716 \".</p> <code>' &amp;#10006; '</code> <code>is_takeaway</code> <code>bool</code> <p>takeaway flag (true if the order is to takeaway). Defaults to False.</p> <code>False</code> <code>takeaway_alert_sign</code> <code>str</code> <p>warning text to highlight that the order is to takeaway. Defaults to \"TAKEAWAY\".</p> <code>'TAKEAWAY'</code> <code>css_classes</code> <code>list</code> <p>CSS classes to assign to the resulting HTML pane. Defaults to [].</p> <code>[]</code> <code>stylesheets</code> <code>list</code> <p>Stylesheets to assign to the resulting HTML pane (see <code>Panel docs &lt;https://panel.holoviz.org/how_to/styling/apply_css.html&gt;</code>__). Defaults to [].</p> <code>[]</code> <p>Returns:</p> Type Description <code>HTML</code> <p>HTML pane representing a label with order summary.</p> Source code in <code>dlunch/gui.py</code> <pre><code>def build_time_label(\n    self,\n    time: str,\n    diners_n: str,\n    separator: str = \" &amp;#10072; \",\n    emoji: str = \"&amp;#127829;\",\n    per_icon: str = \" &amp;#10006; \",\n    is_takeaway: bool = False,\n    takeaway_alert_sign: str = \"TAKEAWAY\",\n    css_classes: list = [],\n    stylesheets: list = [],\n    **kwargs,\n) -&gt; pn.pane.HTML:\n    \"\"\"Build HTML field to display the time label.\n\n    This function is used to display labels that summarize an order.\n\n    Those are shown on the side of the menu table as well as labels above each order table.\n\n    Args:\n        time (str): Lunch time.\n        diners_n (str): Number of people that placed an order.\n        separator (str, optional): Separator between lunch time and order data. Defaults to \" &amp;#10072; \".\n        emoji (str, optional): Emoji used as number lunch symbol. Defaults to \"&amp;#127829;\".\n        per_icon (str, optional): icon used between the lunch emoji and the number of people that placed an order.\n            Usually a multiply operator.\n            Defaults to \" &amp;#10006; \".\n        is_takeaway (bool, optional): takeaway flag (true if the order is to takeaway). Defaults to False.\n        takeaway_alert_sign (str, optional): warning text to highlight that the order is to takeaway. Defaults to \"TAKEAWAY\".\n        css_classes (list, optional): CSS classes to assign to the resulting HTML pane. Defaults to [].\n        stylesheets (list, optional): Stylesheets to assign to the resulting HTML pane\n            (see `Panel docs &lt;https://panel.holoviz.org/how_to/styling/apply_css.html&gt;`__). Defaults to [].\n\n    Returns:\n        pn.pane.HTML: HTML pane representing a label with order summary.\n    \"\"\"\n    # If takeaway add alert sign\n    if is_takeaway:\n        takeaway = f\"{separator}{takeaway_alert_sign}\"\n    else:\n        takeaway = \"\"\n    # Time label pane\n    classes_str = \" \".join(css_classes)\n    time_label = pn.pane.HTML(\n        f'&lt;span class=\"{classes_str}\"&gt;{time}{separator}{emoji}{per_icon}{diners_n}{takeaway}&lt;/span&gt;',\n        stylesheets=stylesheets,\n        **kwargs,\n    )\n\n    return time_label\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.force_logout","title":"force_logout","text":"<pre><code>force_logout() -&gt; None\n</code></pre> <p>Redirect the browser to the logout endpoint</p> Source code in <code>dlunch/gui.py</code> <pre><code>def force_logout(self) -&gt; None:\n    \"\"\"Redirect the browser to the logout endpoint\"\"\"\n    _force_logout()\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.load_sidebar_tabs","title":"load_sidebar_tabs","text":"<pre><code>load_sidebar_tabs(\n    auth_user: AuthUser, clear_before_loading: bool = True\n) -&gt; None\n</code></pre> <p>Append tabs to the app template sidebar.</p> <p>The flag <code>clear_before_loading</code> is set to true only during first instantiation, because the sidebar is empty at first. Use the default value during normal operation to avoid tabs duplication.</p> <p>Parameters:</p> Name Type Description Default <code>auth_user</code> <code>AuthUser</code> <p>AuthUser object with authenticated user data.</p> required <code>clear_before_loading</code> <code>bool</code> <p>Set to true to remove all tabs before appending the new ones. Defaults to True.</p> <code>True</code> Source code in <code>dlunch/gui.py</code> <pre><code>def load_sidebar_tabs(\n    self, auth_user: AuthUser, clear_before_loading: bool = True\n) -&gt; None:\n    \"\"\"Append tabs to the app template sidebar.\n\n    The flag `clear_before_loading` is set to true only during first instantiation, because the sidebar is empty at first.\n    Use the default value during normal operation to avoid tabs duplication.\n\n    Args:\n        auth_user (AuthUser): AuthUser object with authenticated user data.\n        clear_before_loading (bool, optional): Set to true to remove all tabs before appending the new ones. Defaults to True.\n    \"\"\"\n    # Clean tabs\n    if clear_before_loading:\n        self.sidebar_tabs.clear()\n    # Append User tab\n    self.sidebar_tabs.append(self.sidebar_person_column)\n    # Append upload, download and stats only for non-guest\n    # Append password only for non-guest users if auth is active\n    if not auth_user.is_guest(allow_override=False):\n        self.sidebar_tabs.append(self.sidebar_menu_upload_col)\n        self.sidebar_tabs.append(self.sidebar_download_orders_col)\n        self.sidebar_tabs.append(self.sidebar_stats_col)\n        if self.auth_context.is_basic_auth_active():\n            self.sidebar_tabs.append(self.sidebar_password)\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.GraphicInterface.open_backend","title":"open_backend","text":"<pre><code>open_backend() -&gt; None\n</code></pre> <p>Redirect the browser to the backend endpoint</p> Source code in <code>dlunch/gui.py</code> <pre><code>def open_backend(self) -&gt; None:\n    \"\"\"Redirect the browser to the backend endpoint\"\"\"\n    # Edit pathname to open backend\n    pn.state.location.pathname = (\n        pn.state.location.pathname.split(\"/\")[0] + \"/backend\"\n    )\n    pn.state.location.reload = True\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.PasswordRenewer","title":"PasswordRenewer","text":"<p>               Bases: <code>Parameterized</code></p> <p>Param class used to create the widget that collect info to renew users password.</p> <p>This widget is used only if basic authentication is active.</p> <p>Methods:</p> Name Description <code>__str__</code> <p>String representation of this object.</p> <p>Attributes:</p> Name Type Description <code>new_password</code> <code>String</code> <p>New password.</p> <code>old_password</code> <code>String</code> <p>Old password.</p> <code>repeat_new_password</code> <code>String</code> <p>Repeat the new password. This field tests if the new password is as intended.</p> Source code in <code>dlunch/gui.py</code> <pre><code>class PasswordRenewer(param.Parameterized):\n    \"\"\"Param class used to create the widget that collect info to renew users password.\n\n    This widget is used only if basic authentication is active.\"\"\"\n\n    old_password: param.String = param.String(default=\"\")\n    \"\"\"Old password.\"\"\"\n    new_password: param.String = param.String(default=\"\")\n    \"\"\"New password.\"\"\"\n    repeat_new_password: param.String = param.String(default=\"\")\n    \"\"\"Repeat the new password. This field tests if the new password is as intended.\"\"\"\n\n    def __str__(self):\n        \"\"\"String representation of this object.\n\n        Returns:\n            (str): string representation.\n        \"\"\"\n        return \"PasswordRenewer\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.PasswordRenewer.new_password","title":"new_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>new_password: String = String(default='')\n</code></pre> <p>New password.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.PasswordRenewer.old_password","title":"old_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>old_password: String = String(default='')\n</code></pre> <p>Old password.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.PasswordRenewer.repeat_new_password","title":"repeat_new_password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repeat_new_password: String = String(default='')\n</code></pre> <p>Repeat the new password. This field tests if the new password is as intended.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.PasswordRenewer.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>String representation of this object.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/gui.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of this object.\n\n    Returns:\n        (str): string representation.\n    \"\"\"\n    return \"PasswordRenewer\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.Person","title":"Person","text":"<p>               Bases: <code>Parameterized</code></p> <p>Param class that define user data and lunch preferences for its order.</p> <p><code>username</code> is automatically set for privileged users. It's left empty for guest users.</p> <p><code>lunch_time</code> and <code>guest</code> available value are set when instantiation happens. Check <code>panel.lunch_times_options</code> and <code>panel.guest_types</code> config keys.</p> <p>Methods:</p> Name Description <code>__init__</code> <code>__str__</code> <p>String representation of this object.</p> <p>Attributes:</p> Name Type Description <code>guest</code> <code>ObjectSelector</code> <p>List of available guest types.</p> <code>lunch_time</code> <code>ObjectSelector</code> <p>List of available lunch times.</p> <code>takeaway</code> <code>Boolean</code> <p>Takeaway flag (true if takeaway).</p> <code>username</code> <code>String</code> <p>Username</p> Source code in <code>dlunch/gui.py</code> <pre><code>class Person(param.Parameterized):\n    \"\"\"Param class that define user data and lunch preferences for its order.\n\n    `username` is automatically set for privileged users. It's left empty for guest users.\n\n    `lunch_time` and `guest` available value are set when instantiation happens.\n    Check `panel.lunch_times_options` and `panel.guest_types` config keys.\n    \"\"\"\n\n    username: param.String = param.String(default=\"\", doc=\"your name\")\n    \"\"\"Username\"\"\"\n    lunch_time: param.ObjectSelector = param.ObjectSelector(\n        default=\"12:30\", doc=\"choose your lunch time\", objects=[\"12:30\"]\n    )\n    \"\"\"List of available lunch times.\"\"\"\n    guest: param.ObjectSelector = param.ObjectSelector(\n        default=\"Guest\", doc=\"select guest type\", objects=[\"Guest\"]\n    )\n    \"\"\"List of available guest types.\"\"\"\n    takeaway: param.Boolean = param.Boolean(\n        default=False, doc=\"tick to order a takeaway meal\"\n    )\n    \"\"\"Takeaway flag (true if takeaway).\"\"\"\n\n    def __init__(self, config: OmegaConf, **params):\n        super().__init__(**params)\n        # Set lunch times from config\n        self.param.lunch_time.objects = config.panel.lunch_times_options\n        # Set guest type from config\n        self.param.guest.objects = config.panel.guest_types\n        self.param.guest.default = config.panel.guest_types[0]\n        self.guest = config.panel.guest_types[0]\n        # Check user (a username is already set for privileged users)\n        auth_user = AuthUser(config=config)\n        if not auth_user.is_guest(allow_override=False) and (\n            auth_user.name is not None\n        ):\n            self.username = auth_user.name\n\n    def __str__(self):\n        \"\"\"String representation of this object.\n\n        Returns:\n            (str): string representation.\n        \"\"\"\n        return f\"PERSON:{self.name}\"\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.Person.guest","title":"guest  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>guest: ObjectSelector = guest_types[0]\n</code></pre> <p>List of available guest types.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.Person.lunch_time","title":"lunch_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lunch_time: ObjectSelector = ObjectSelector(\n    default=\"12:30\",\n    doc=\"choose your lunch time\",\n    objects=[\"12:30\"],\n)\n</code></pre> <p>List of available lunch times.</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.Person.takeaway","title":"takeaway  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>takeaway: Boolean = Boolean(\n    default=False, doc=\"tick to order a takeaway meal\"\n)\n</code></pre> <p>Takeaway flag (true if takeaway).</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.Person.username","title":"username  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>username: String = String(default='', doc='your name')\n</code></pre> <p>Username</p>"},{"location":"reference/dlunch/gui/#dlunch.gui.Person.__init__","title":"__init__","text":"<pre><code>__init__(config: OmegaConf, **params)\n</code></pre> Source code in <code>dlunch/gui.py</code> <pre><code>def __init__(self, config: OmegaConf, **params):\n    super().__init__(**params)\n    # Set lunch times from config\n    self.param.lunch_time.objects = config.panel.lunch_times_options\n    # Set guest type from config\n    self.param.guest.objects = config.panel.guest_types\n    self.param.guest.default = config.panel.guest_types[0]\n    self.guest = config.panel.guest_types[0]\n    # Check user (a username is already set for privileged users)\n    auth_user = AuthUser(config=config)\n    if not auth_user.is_guest(allow_override=False) and (\n        auth_user.name is not None\n    ):\n        self.username = auth_user.name\n</code></pre>"},{"location":"reference/dlunch/gui/#dlunch.gui.Person.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>String representation of this object.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/gui.py</code> <pre><code>def __str__(self):\n    \"\"\"String representation of this object.\n\n    Returns:\n        (str): string representation.\n    \"\"\"\n    return f\"PERSON:{self.name}\"\n</code></pre>"},{"location":"reference/dlunch/models/","title":"models","text":"<p>Module with database tables definitions.</p> <p>Helper classes and utility functions for data management are defined here.</p> <p>Classes:</p> Name Description <code>CommonTable</code> <p>Abstract table with common methods.</p> <code>Credentials</code> <p>Table with users credentials, used only if basic authentication is active.</p> <code>DatabaseConnector</code> <p>Class for handling database connections and operations.</p> <code>Encrypted</code> <p>Allows storing and retrieving password hashes using PasswordHash.</p> <code>Flags</code> <p>Table with global flags used by Data-Lunch.</p> <code>Menu</code> <p>Table with menu items.</p> <code>Orders</code> <p>Table with items that belongs to an order.</p> <code>Password</code> <p>Allows storing and retrieving password hashes using PasswordHash.</p> <code>PrivilegedUsers</code> <p>Table with user that have privileges (normal users and admin).</p> <code>Stats</code> <p>Table with number of users that ate a lunch, grouped by guest type.</p> <code>Users</code> <p>Table with users that placed an order.</p> <p>Functions:</p> Name Description <code>set_sqlite_pragma</code> <p>Force foreign key constraints for sqlite connections.</p> <p>Attributes:</p> Name Type Description <code>Data</code> <code>DeclarativeMeta</code> <p>SQLAlchemy declarative base.</p> <code>SCHEMA</code> <code>str</code> <p>Schema name from environment (may be overridden by configuration files).</p> <code>log</code> <code>Logger</code> <p>Module logger.</p> <code>metadata_obj</code> <code>MetaData</code> <p>Database metadata (SQLAlchemy).</p>"},{"location":"reference/dlunch/models/#dlunch.models.Data","title":"Data  <code>module-attribute</code>","text":"<pre><code>Data: DeclarativeMeta = declarative_base(\n    metadata=metadata_obj\n)\n</code></pre> <p>SQLAlchemy declarative base.</p>"},{"location":"reference/dlunch/models/#dlunch.models.SCHEMA","title":"SCHEMA  <code>module-attribute</code>","text":"<pre><code>SCHEMA: str = get('DATA_LUNCH_DB_SCHEMA', None)\n</code></pre> <p>Schema name from environment (may be overridden by configuration files).</p>"},{"location":"reference/dlunch/models/#dlunch.models.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log: Logger = getLogger(__name__)\n</code></pre> <p>Module logger.</p>"},{"location":"reference/dlunch/models/#dlunch.models.metadata_obj","title":"metadata_obj  <code>module-attribute</code>","text":"<pre><code>metadata_obj: MetaData = MetaData(schema=SCHEMA)\n</code></pre> <p>Database metadata (SQLAlchemy).</p>"},{"location":"reference/dlunch/models/#dlunch.models.CommonTable","title":"CommonTable","text":"<p>               Bases: <code>Data</code></p> <p>Abstract table with common methods.</p> <p>Methods:</p> Name Description <code>clear</code> <p>Clear table and return deleted rows.</p> <code>read_as_df</code> <p>Read table as pandas DataFrame.</p> <code>write_from_df</code> <p>Write table from pandas DataFrame.</p> <p>Attributes:</p> Name Type Description <code>__abstract__</code> <p>Abstract table flag.</p> Source code in <code>dlunch/models.py</code> <pre><code>class CommonTable(Data):\n    \"\"\"Abstract table with common methods.\"\"\"\n\n    __abstract__ = True\n    \"\"\"Abstract table flag.\"\"\"\n\n    @classmethod\n    def clear(self, config: DictConfig) -&gt; int:\n        \"\"\"Clear table and return deleted rows.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n\n        Returns:\n            int: deleted rows.\n        \"\"\"\n        session = DatabaseConnector(config=config).create_session()\n        with session:\n            # Clean table\n            num_rows_deleted = session.execute(delete(self))\n            session.commit()\n            log.info(\n                f\"deleted {num_rows_deleted.rowcount} rows from table '{self.__tablename__}'\"\n            )\n        return num_rows_deleted.rowcount\n\n    @classmethod\n    def read_as_df(self, config: DictConfig, **kwargs) -&gt; pd.DataFrame:\n        \"\"\"Read table as pandas DataFrame.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n\n        Returns:\n            pd.DataFrame: dataframe with table content.\n        \"\"\"\n        df = pd.read_sql_table(\n            table_name=self.__tablename__,\n            con=DatabaseConnector(config=config).create_engine(),\n            schema=config.db.get(\"schema\", SCHEMA),\n            **kwargs,\n        )\n        return df\n\n    @classmethod\n    def write_from_df(\n        self, config: DictConfig, df: pd.DataFrame, index: bool = True\n    ) -&gt; int:\n        \"\"\"Write table from pandas DataFrame.\n\n        If a record already exists in the table, it will be updated.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n            df (pd.DataFrame): dataframe with table content.\n            index (bool): write index as a column. Use False to ignore index. Defaults to True.\n\n        Returns:\n            int: number of rows written.\n        \"\"\"\n\n        session = DatabaseConnector(config=config).create_session()\n        # Convert the dataframe to a dictionary of records\n        drop_index = not index\n        records_dict = df.reset_index(drop=drop_index).to_dict(\n            orient=\"records\"\n        )\n\n        with session:\n            # Add rows\n            for record in records_dict:\n                # Convert the tuple to dict and expand to avoid errors\n                new_record = self(**record)\n                DatabaseConnector.session_add_with_upsert(\n                    session=session,\n                    constraint=f\"{self.__tablename__}_pkey\",\n                    new_record=new_record,\n                )\n\n            # Commit only at the end\n            session.commit()\n\n        return len(df)\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.CommonTable.__abstract__","title":"__abstract__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__abstract__ = True\n</code></pre> <p>Abstract table flag.</p>"},{"location":"reference/dlunch/models/#dlunch.models.CommonTable.clear","title":"clear  <code>classmethod</code>","text":"<pre><code>clear(config: DictConfig) -&gt; int\n</code></pre> <p>Clear table and return deleted rows.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <p>Returns:</p> Type Description <code>int</code> <p>deleted rows.</p> Source code in <code>dlunch/models.py</code> <pre><code>@classmethod\ndef clear(self, config: DictConfig) -&gt; int:\n    \"\"\"Clear table and return deleted rows.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n\n    Returns:\n        int: deleted rows.\n    \"\"\"\n    session = DatabaseConnector(config=config).create_session()\n    with session:\n        # Clean table\n        num_rows_deleted = session.execute(delete(self))\n        session.commit()\n        log.info(\n            f\"deleted {num_rows_deleted.rowcount} rows from table '{self.__tablename__}'\"\n        )\n    return num_rows_deleted.rowcount\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.CommonTable.read_as_df","title":"read_as_df  <code>classmethod</code>","text":"<pre><code>read_as_df(config: DictConfig, **kwargs) -&gt; DataFrame\n</code></pre> <p>Read table as pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>dataframe with table content.</p> Source code in <code>dlunch/models.py</code> <pre><code>@classmethod\ndef read_as_df(self, config: DictConfig, **kwargs) -&gt; pd.DataFrame:\n    \"\"\"Read table as pandas DataFrame.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n\n    Returns:\n        pd.DataFrame: dataframe with table content.\n    \"\"\"\n    df = pd.read_sql_table(\n        table_name=self.__tablename__,\n        con=DatabaseConnector(config=config).create_engine(),\n        schema=config.db.get(\"schema\", SCHEMA),\n        **kwargs,\n    )\n    return df\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.CommonTable.write_from_df","title":"write_from_df  <code>classmethod</code>","text":"<pre><code>write_from_df(\n    config: DictConfig, df: DataFrame, index: bool = True\n) -&gt; int\n</code></pre> <p>Write table from pandas DataFrame.</p> <p>If a record already exists in the table, it will be updated.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <code>df</code> <code>DataFrame</code> <p>dataframe with table content.</p> required <code>index</code> <code>bool</code> <p>write index as a column. Use False to ignore index. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>int</code> <p>number of rows written.</p> Source code in <code>dlunch/models.py</code> <pre><code>@classmethod\ndef write_from_df(\n    self, config: DictConfig, df: pd.DataFrame, index: bool = True\n) -&gt; int:\n    \"\"\"Write table from pandas DataFrame.\n\n    If a record already exists in the table, it will be updated.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n        df (pd.DataFrame): dataframe with table content.\n        index (bool): write index as a column. Use False to ignore index. Defaults to True.\n\n    Returns:\n        int: number of rows written.\n    \"\"\"\n\n    session = DatabaseConnector(config=config).create_session()\n    # Convert the dataframe to a dictionary of records\n    drop_index = not index\n    records_dict = df.reset_index(drop=drop_index).to_dict(\n        orient=\"records\"\n    )\n\n    with session:\n        # Add rows\n        for record in records_dict:\n            # Convert the tuple to dict and expand to avoid errors\n            new_record = self(**record)\n            DatabaseConnector.session_add_with_upsert(\n                session=session,\n                constraint=f\"{self.__tablename__}_pkey\",\n                new_record=new_record,\n            )\n\n        # Commit only at the end\n        session.commit()\n\n    return len(df)\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Credentials","title":"Credentials","text":"<p>               Bases: <code>CommonTable</code></p> <p>Table with users credentials, used only if basic authentication is active.</p> <p>Methods:</p> Name Description <code>__repr__</code> <p>Simple object representation.</p> <p>Attributes:</p> Name Type Description <code>__tablename__</code> <p>Name of the table.</p> <code>password_encrypted</code> <p>Encryped password.</p> <code>password_hash</code> <p>Hashed password.</p> <code>user</code> <p>Username.</p> Source code in <code>dlunch/models.py</code> <pre><code>class Credentials(CommonTable):\n    \"\"\"Table with users credentials, used only if basic authentication is active.\"\"\"\n\n    __tablename__ = \"credentials\"\n    \"\"\"Name of the table.\"\"\"\n    user = Column(\n        String(100),\n        primary_key=True,\n        sqlite_on_conflict_primary_key=\"REPLACE\",\n    )\n    \"\"\"Username.\"\"\"\n    password_hash = Column(Password(150), unique=False, nullable=False)\n    \"\"\"Hashed password.\"\"\"\n    password_encrypted = Column(\n        Encrypted(150),\n        unique=False,\n        nullable=True,\n        default=None,\n        server_default=None,\n    )\n    \"\"\"Encryped password.\n\n    Used only if basic authentication and guest users are both active.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Simple object representation.\n\n        Returns:\n            str: string representation.\n        \"\"\"\n        return f\"&lt;CREDENTIAL:{self.user}&gt;\"\n\n    @validates(\"password_hash\")\n    def _validate_password(\n        self, key: str, password: str\n    ) -&gt; auth.PasswordHash | None:\n        \"\"\"Function that validate password input.\n\n        It converts string to auth.PasswordHash if necessary.\n\n        Args:\n            key (str): validated attribute name.\n            password (str): hashed password to be validated.\n\n        Returns:\n            auth.PasswordHash | None: validated hashed password.\n        \"\"\"\n        return getattr(type(self), key).type.validator(password)\n\n    @validates(\"password_encrypted\")\n    def _validate_encrypted(\n        self, key: str, password: str\n    ) -&gt; auth.PasswordEncrypt | None:\n        \"\"\"Function that validate encrypted input.\n\n        It converts string to auth.PasswordEncrypt if necessary.\n\n        Args:\n            key (str): validated attribute name.\n            password (str): encrypted password to be validated.\n\n        Returns:\n            auth.PasswordEncrypt | None: validated encrypted password.\n        \"\"\"\n        return getattr(type(self), key).type.validator(password)\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Credentials.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'credentials'\n</code></pre> <p>Name of the table.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Credentials.password_encrypted","title":"password_encrypted  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password_encrypted = Column(\n    Encrypted(150),\n    unique=False,\n    nullable=True,\n    default=None,\n    server_default=None,\n)\n</code></pre> <p>Encryped password.</p> <p>Used only if basic authentication and guest users are both active.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Credentials.password_hash","title":"password_hash  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password_hash = Column(\n    Password(150), unique=False, nullable=False\n)\n</code></pre> <p>Hashed password.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Credentials.user","title":"user  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user = Column(\n    String(100),\n    primary_key=True,\n    sqlite_on_conflict_primary_key=\"REPLACE\",\n)\n</code></pre> <p>Username.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Credentials.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Simple object representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Simple object representation.\n\n    Returns:\n        str: string representation.\n    \"\"\"\n    return f\"&lt;CREDENTIAL:{self.user}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector","title":"DatabaseConnector","text":"<p>Class for handling database connections and operations.</p> <p>Methods:</p> Name Description <code>__init__</code> <code>create_database</code> <p>Function to create the database through SQLAlchemy models.</p> <code>create_engine</code> <p>Factory function for SQLAlchemy engine.</p> <code>create_session</code> <p>Factory function for database session.</p> <code>get_db_dialect</code> <p>Return database type (postgresql, sqlite, etc.) based on the database object passed as input.</p> <code>get_flag</code> <p>Get the value of a flag.</p> <code>read_sql_query</code> <p>Read a SQL query as pandas DataFrame.</p> <code>session_add_with_upsert</code> <p>Use an upsert statement for postgresql to add a new record to a table,</p> <code>set_flag</code> <p>Set a key,value pair inside <code>flag</code> table.</p> <p>Attributes:</p> Name Type Description <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> Source code in <code>dlunch/models.py</code> <pre><code>class DatabaseConnector:\n    \"\"\"Class for handling database connections and operations.\"\"\"\n\n    def __init__(self, config: DictConfig):\n        self.config: DictConfig = config\n        \"\"\"Hydra configuration dictionary.\"\"\"\n\n    @staticmethod\n    def get_db_dialect(\n        db_obj: Session | ConnectionSqlite | ConnectionPostgresql,\n    ) -&gt; str:\n        \"\"\"Return database type (postgresql, sqlite, etc.) based on the database object passed as input.\n        If a session is passed, the database type is set based on an internal map (see `models._DBTYPE_MAP`).\n\n        Args:\n            db_obj (Session | ConnectionSqlite | ConnectionPostgresql): session or connection object.\n\n        Raises:\n            TypeError: db_obj shall be a session or a connection object.\n\n        Returns:\n            str: database dialect.\n        \"\"\"\n        if isinstance(db_obj, Session):\n            dialect = db_obj.bind.dialect.name\n        elif isinstance(db_obj, ConnectionSqlite) or isinstance(\n            db_obj, ConnectionPostgresql\n        ):\n            module = db_obj.__class__.__module__.split(\".\", 1)[0]\n            dialect = _MODULE_TO_DIALECT_MAP[module]\n        else:\n            raise TypeError(\"db_obj should be a session or connection object\")\n\n        return dialect\n\n    @staticmethod\n    def session_add_with_upsert(\n        session: Session, constraint: str, new_record: Stats | Flags\n    ) -&gt; None:\n        \"\"\"Use an upsert statement for postgresql to add a new record to a table,\n        a simple session add otherwise.\n\n        Args:\n            session (Session): SQLAlchemy session object.\n            constraint (str): constraint used for upsert (usually the primary key)\n            new_record (Stats | Flags): table resord (valid tables are `stats` or `flags`)\n        \"\"\"\n        # Use an upsert for postgresql (for sqlite an 'on conflict replace' is set\n        # on table, so session.add is fine)\n        if DatabaseConnector.get_db_dialect(session) == \"postgresql\":\n            insert_statement = postgresql_upsert(new_record.__table__).values(\n                {\n                    column.name: getattr(new_record, column.name)\n                    for column in new_record.__table__.c\n                    if getattr(new_record, column.name, None) is not None\n                }\n            )\n            upsert_statement = insert_statement.on_conflict_do_update(\n                constraint=constraint,\n                set_={\n                    column.name: getattr(\n                        insert_statement.excluded, column.name\n                    )\n                    for column in insert_statement.excluded\n                },\n            )\n            session.execute(upsert_statement)\n        else:\n            session.add(new_record)\n\n    @staticmethod\n    def read_sql_query(session: Session, query: str) -&gt; pd.DataFrame:\n        \"\"\"Read a SQL query as pandas DataFrame.\n\n        Args:\n            session (Session): SQLAlchemy session object.\n            query (str): SQL query.\n\n        Returns:\n            pd.DataFrame: dataframe with query result.\n        \"\"\"\n        results = session.execute(text(query))\n        columns = results.keys()\n        # Pass columns to build dataframe with correct columns names even if\n        # the query returns no rows\n        df = pd.DataFrame(results.all(), columns=columns)\n\n        return df\n\n    def create_engine(self) -&gt; Engine:\n        \"\"\"Factory function for SQLAlchemy engine.\n\n        Returns:\n            Engine: SQLAlchemy engine.\n        \"\"\"\n        engine = hydra.utils.instantiate(self.config.db.engine)\n\n        # Change schema with change_execution_options\n        # If schema exist in config.db it will override the schema selected through\n        # the environment variable\n        if \"schema\" in self.config.db:\n            engine.update_execution_options(\n                schema_translate_map={SCHEMA: self.config.db.schema}\n            )\n\n        return engine\n\n    def create_session(self) -&gt; Session:\n        \"\"\"Factory function for database session.\n\n        Returns:\n            Session: SQLAlchemy session.\n        \"\"\"\n        engine = self.create_engine()\n        session = Session(engine)\n\n        return session\n\n    def create_database(self, add_basic_auth_users=False) -&gt; None:\n        \"\"\"Function to create the database through SQLAlchemy models.\n\n        Args:\n            add_basic_auth_users (bool, optional): set to true to add admin and guest users.\n                These users are of interest only if 'basic authentication' is selected.\n                Defaults to False.\n        \"\"\"\n        # Create directory if missing\n        log.debug(\"create 'shared_data' folder\")\n        pathlib.Path(self.config.db.shared_data_folder).mkdir(exist_ok=True)\n\n        # In case the database is not ready use a retry mechanism\n        @tenacity.retry(\n            retry=tenacity.retry_if_exception_type(OperationalError),\n            wait=tenacity.wait_fixed(self.config.db.create_retries.wait),\n            stop=(\n                tenacity.stop_after_delay(\n                    self.config.db.create_retries.stop.delay\n                )\n                | tenacity.stop_after_attempt(\n                    self.config.db.create_retries.stop.attempts\n                )\n            ),\n        )\n        def _create_database_with_retries(config: DictConfig) -&gt; None:\n            engine = self.create_engine()\n            Data.metadata.create_all(engine)\n\n        # Create tables\n        log.debug(\n            f\"attempt database creation: {self.config.db.attempt_creation}\"\n        )\n        if self.config.db.attempt_creation:\n            _create_database_with_retries(self.config)\n\n            # Retries stats\n            log.debug(\n                f\"create database attempts: {_create_database_with_retries.retry.statistics}\"\n            )\n\n        # If requested add users for basic auth (admin and guest)\n        if add_basic_auth_users:\n            log.debug(\"add basic auth standard users (if missing)\")\n            # If no user exist create the default admin\n            session = self.create_session()\n\n            with session:\n                # Check if admin exists\n                if session.get(Credentials, \"admin\") is None:\n                    # Add authorization and credentials for admin\n                    auth_user = auth.AuthUser(config=self.config, name=\"admin\")\n                    auth_user.add_privileged_user(is_admin=True)\n                    auth_user.add_user_hashed_password(password=\"admin\")\n                    log.warning(\n                        \"admin user created, remember to change the default password\"\n                    )\n                # Check if guest exists\n                if (\n                    session.get(Credentials, \"guest\") is None\n                ) and self.config.basic_auth.guest_user:\n                    # Add only credentials for guest (guest users are not included\n                    # in privileged_users table)\n                    auth_user = auth.AuthUser(config=self.config, name=\"guest\")\n                    auth_user.add_user_hashed_password(password=\"guest\")\n                    log.warning(\n                        \"guest user created, remember to change the default password\"\n                    )\n\n    def set_flag(self, id: str, value: bool) -&gt; None:\n        \"\"\"Set a key,value pair inside `flag` table.\n\n        Args:\n            id (str): flag id (name).\n            value (bool): flag value.\n        \"\"\"\n\n        session = self.create_session()\n\n        with session:\n            # Write the selected flag (it will be overwritten if exists)\n            new_flag = Flags(id=id, value=value)\n\n            # Use an upsert for postgresql, a simple session add otherwise\n            DatabaseConnector.session_add_with_upsert(\n                session=session, constraint=\"flags_pkey\", new_record=new_flag\n            )\n\n            session.commit()\n\n    def get_flag(\n        self, id: str, value_if_missing: bool | None = None\n    ) -&gt; bool | None:\n        \"\"\"Get the value of a flag.\n        Optionally select the values to return if the flag is missing (default to None).\n\n        Args:\n            id (str): flag id (name).\n            value_if_missing (bool | None, optional): value to return if the flag does not exist. Defaults to None.\n\n        Returns:\n            bool | None: flag value.\n        \"\"\"\n\n        session = self.create_session()\n        flag = session.get(Flags, id)\n        if flag is None:\n            value = value_if_missing\n        else:\n            value = flag.value\n        return value\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config: DictConfig = config\n</code></pre> <p>Hydra configuration dictionary.</p>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.__init__","title":"__init__","text":"<pre><code>__init__(config: DictConfig)\n</code></pre> Source code in <code>dlunch/models.py</code> <pre><code>def __init__(self, config: DictConfig):\n    self.config: DictConfig = config\n    \"\"\"Hydra configuration dictionary.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.create_database","title":"create_database","text":"<pre><code>create_database(add_basic_auth_users=False) -&gt; None\n</code></pre> <p>Function to create the database through SQLAlchemy models.</p> <p>Parameters:</p> Name Type Description Default <code>add_basic_auth_users</code> <code>bool</code> <p>set to true to add admin and guest users. These users are of interest only if 'basic authentication' is selected. Defaults to False.</p> <code>False</code> Source code in <code>dlunch/models.py</code> <pre><code>def create_database(self, add_basic_auth_users=False) -&gt; None:\n    \"\"\"Function to create the database through SQLAlchemy models.\n\n    Args:\n        add_basic_auth_users (bool, optional): set to true to add admin and guest users.\n            These users are of interest only if 'basic authentication' is selected.\n            Defaults to False.\n    \"\"\"\n    # Create directory if missing\n    log.debug(\"create 'shared_data' folder\")\n    pathlib.Path(self.config.db.shared_data_folder).mkdir(exist_ok=True)\n\n    # In case the database is not ready use a retry mechanism\n    @tenacity.retry(\n        retry=tenacity.retry_if_exception_type(OperationalError),\n        wait=tenacity.wait_fixed(self.config.db.create_retries.wait),\n        stop=(\n            tenacity.stop_after_delay(\n                self.config.db.create_retries.stop.delay\n            )\n            | tenacity.stop_after_attempt(\n                self.config.db.create_retries.stop.attempts\n            )\n        ),\n    )\n    def _create_database_with_retries(config: DictConfig) -&gt; None:\n        engine = self.create_engine()\n        Data.metadata.create_all(engine)\n\n    # Create tables\n    log.debug(\n        f\"attempt database creation: {self.config.db.attempt_creation}\"\n    )\n    if self.config.db.attempt_creation:\n        _create_database_with_retries(self.config)\n\n        # Retries stats\n        log.debug(\n            f\"create database attempts: {_create_database_with_retries.retry.statistics}\"\n        )\n\n    # If requested add users for basic auth (admin and guest)\n    if add_basic_auth_users:\n        log.debug(\"add basic auth standard users (if missing)\")\n        # If no user exist create the default admin\n        session = self.create_session()\n\n        with session:\n            # Check if admin exists\n            if session.get(Credentials, \"admin\") is None:\n                # Add authorization and credentials for admin\n                auth_user = auth.AuthUser(config=self.config, name=\"admin\")\n                auth_user.add_privileged_user(is_admin=True)\n                auth_user.add_user_hashed_password(password=\"admin\")\n                log.warning(\n                    \"admin user created, remember to change the default password\"\n                )\n            # Check if guest exists\n            if (\n                session.get(Credentials, \"guest\") is None\n            ) and self.config.basic_auth.guest_user:\n                # Add only credentials for guest (guest users are not included\n                # in privileged_users table)\n                auth_user = auth.AuthUser(config=self.config, name=\"guest\")\n                auth_user.add_user_hashed_password(password=\"guest\")\n                log.warning(\n                    \"guest user created, remember to change the default password\"\n                )\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.create_engine","title":"create_engine","text":"<pre><code>create_engine() -&gt; Engine\n</code></pre> <p>Factory function for SQLAlchemy engine.</p> <p>Returns:</p> Type Description <code>Engine</code> <p>SQLAlchemy engine.</p> Source code in <code>dlunch/models.py</code> <pre><code>def create_engine(self) -&gt; Engine:\n    \"\"\"Factory function for SQLAlchemy engine.\n\n    Returns:\n        Engine: SQLAlchemy engine.\n    \"\"\"\n    engine = hydra.utils.instantiate(self.config.db.engine)\n\n    # Change schema with change_execution_options\n    # If schema exist in config.db it will override the schema selected through\n    # the environment variable\n    if \"schema\" in self.config.db:\n        engine.update_execution_options(\n            schema_translate_map={SCHEMA: self.config.db.schema}\n        )\n\n    return engine\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.create_session","title":"create_session","text":"<pre><code>create_session() -&gt; Session\n</code></pre> <p>Factory function for database session.</p> <p>Returns:</p> Type Description <code>Session</code> <p>SQLAlchemy session.</p> Source code in <code>dlunch/models.py</code> <pre><code>def create_session(self) -&gt; Session:\n    \"\"\"Factory function for database session.\n\n    Returns:\n        Session: SQLAlchemy session.\n    \"\"\"\n    engine = self.create_engine()\n    session = Session(engine)\n\n    return session\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.get_db_dialect","title":"get_db_dialect  <code>staticmethod</code>","text":"<pre><code>get_db_dialect(\n    db_obj: Session | Connection | Connection,\n) -&gt; str\n</code></pre> <p>Return database type (postgresql, sqlite, etc.) based on the database object passed as input. If a session is passed, the database type is set based on an internal map (see <code>models._DBTYPE_MAP</code>).</p> <p>Parameters:</p> Name Type Description Default <code>db_obj</code> <code>Session | Connection | Connection</code> <p>session or connection object.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>db_obj shall be a session or a connection object.</p> <p>Returns:</p> Type Description <code>str</code> <p>database dialect.</p> Source code in <code>dlunch/models.py</code> <pre><code>@staticmethod\ndef get_db_dialect(\n    db_obj: Session | ConnectionSqlite | ConnectionPostgresql,\n) -&gt; str:\n    \"\"\"Return database type (postgresql, sqlite, etc.) based on the database object passed as input.\n    If a session is passed, the database type is set based on an internal map (see `models._DBTYPE_MAP`).\n\n    Args:\n        db_obj (Session | ConnectionSqlite | ConnectionPostgresql): session or connection object.\n\n    Raises:\n        TypeError: db_obj shall be a session or a connection object.\n\n    Returns:\n        str: database dialect.\n    \"\"\"\n    if isinstance(db_obj, Session):\n        dialect = db_obj.bind.dialect.name\n    elif isinstance(db_obj, ConnectionSqlite) or isinstance(\n        db_obj, ConnectionPostgresql\n    ):\n        module = db_obj.__class__.__module__.split(\".\", 1)[0]\n        dialect = _MODULE_TO_DIALECT_MAP[module]\n    else:\n        raise TypeError(\"db_obj should be a session or connection object\")\n\n    return dialect\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.get_flag","title":"get_flag","text":"<pre><code>get_flag(\n    id: str, value_if_missing: bool | None = None\n) -&gt; bool | None\n</code></pre> <p>Get the value of a flag. Optionally select the values to return if the flag is missing (default to None).</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>flag id (name).</p> required <code>value_if_missing</code> <code>bool | None</code> <p>value to return if the flag does not exist. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool | None</code> <p>flag value.</p> Source code in <code>dlunch/models.py</code> <pre><code>def get_flag(\n    self, id: str, value_if_missing: bool | None = None\n) -&gt; bool | None:\n    \"\"\"Get the value of a flag.\n    Optionally select the values to return if the flag is missing (default to None).\n\n    Args:\n        id (str): flag id (name).\n        value_if_missing (bool | None, optional): value to return if the flag does not exist. Defaults to None.\n\n    Returns:\n        bool | None: flag value.\n    \"\"\"\n\n    session = self.create_session()\n    flag = session.get(Flags, id)\n    if flag is None:\n        value = value_if_missing\n    else:\n        value = flag.value\n    return value\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.read_sql_query","title":"read_sql_query  <code>staticmethod</code>","text":"<pre><code>read_sql_query(session: Session, query: str) -&gt; DataFrame\n</code></pre> <p>Read a SQL query as pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>SQLAlchemy session object.</p> required <code>query</code> <code>str</code> <p>SQL query.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>dataframe with query result.</p> Source code in <code>dlunch/models.py</code> <pre><code>@staticmethod\ndef read_sql_query(session: Session, query: str) -&gt; pd.DataFrame:\n    \"\"\"Read a SQL query as pandas DataFrame.\n\n    Args:\n        session (Session): SQLAlchemy session object.\n        query (str): SQL query.\n\n    Returns:\n        pd.DataFrame: dataframe with query result.\n    \"\"\"\n    results = session.execute(text(query))\n    columns = results.keys()\n    # Pass columns to build dataframe with correct columns names even if\n    # the query returns no rows\n    df = pd.DataFrame(results.all(), columns=columns)\n\n    return df\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.session_add_with_upsert","title":"session_add_with_upsert  <code>staticmethod</code>","text":"<pre><code>session_add_with_upsert(\n    session: Session,\n    constraint: str,\n    new_record: Stats | Flags,\n) -&gt; None\n</code></pre> <p>Use an upsert statement for postgresql to add a new record to a table, a simple session add otherwise.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>SQLAlchemy session object.</p> required <code>constraint</code> <code>str</code> <p>constraint used for upsert (usually the primary key)</p> required <code>new_record</code> <code>Stats | Flags</code> <p>table resord (valid tables are <code>stats</code> or <code>flags</code>)</p> required Source code in <code>dlunch/models.py</code> <pre><code>@staticmethod\ndef session_add_with_upsert(\n    session: Session, constraint: str, new_record: Stats | Flags\n) -&gt; None:\n    \"\"\"Use an upsert statement for postgresql to add a new record to a table,\n    a simple session add otherwise.\n\n    Args:\n        session (Session): SQLAlchemy session object.\n        constraint (str): constraint used for upsert (usually the primary key)\n        new_record (Stats | Flags): table resord (valid tables are `stats` or `flags`)\n    \"\"\"\n    # Use an upsert for postgresql (for sqlite an 'on conflict replace' is set\n    # on table, so session.add is fine)\n    if DatabaseConnector.get_db_dialect(session) == \"postgresql\":\n        insert_statement = postgresql_upsert(new_record.__table__).values(\n            {\n                column.name: getattr(new_record, column.name)\n                for column in new_record.__table__.c\n                if getattr(new_record, column.name, None) is not None\n            }\n        )\n        upsert_statement = insert_statement.on_conflict_do_update(\n            constraint=constraint,\n            set_={\n                column.name: getattr(\n                    insert_statement.excluded, column.name\n                )\n                for column in insert_statement.excluded\n            },\n        )\n        session.execute(upsert_statement)\n    else:\n        session.add(new_record)\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.DatabaseConnector.set_flag","title":"set_flag","text":"<pre><code>set_flag(id: str, value: bool) -&gt; None\n</code></pre> <p>Set a key,value pair inside <code>flag</code> table.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>flag id (name).</p> required <code>value</code> <code>bool</code> <p>flag value.</p> required Source code in <code>dlunch/models.py</code> <pre><code>def set_flag(self, id: str, value: bool) -&gt; None:\n    \"\"\"Set a key,value pair inside `flag` table.\n\n    Args:\n        id (str): flag id (name).\n        value (bool): flag value.\n    \"\"\"\n\n    session = self.create_session()\n\n    with session:\n        # Write the selected flag (it will be overwritten if exists)\n        new_flag = Flags(id=id, value=value)\n\n        # Use an upsert for postgresql, a simple session add otherwise\n        DatabaseConnector.session_add_with_upsert(\n            session=session, constraint=\"flags_pkey\", new_record=new_flag\n        )\n\n        session.commit()\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Encrypted","title":"Encrypted","text":"<p>               Bases: <code>TypeDecorator</code></p> <p>Allows storing and retrieving password hashes using PasswordHash.</p> <p>Methods:</p> Name Description <code>process_bind_param</code> <p>Ensure the value is a PasswordEncrypt and then return the encrypted password.</p> <code>process_result_value</code> <p>Convert the hash to a PasswordEncrypt, if it's non-NULL.</p> <code>validator</code> <p>Provides a validator/converter used by @validates.</p> <p>Attributes:</p> Name Type Description <code>impl</code> <code>String</code> <p>Base column implementation.</p> Source code in <code>dlunch/models.py</code> <pre><code>class Encrypted(TypeDecorator):\n    \"\"\"Allows storing and retrieving password hashes using PasswordHash.\"\"\"\n\n    impl: String = String\n    \"\"\"Base column implementation.\"\"\"\n\n    def process_bind_param(\n        self, value: auth.PasswordEncrypt | str | None, dialect\n    ) -&gt; str | None:\n        \"\"\"Ensure the value is a PasswordEncrypt and then return the encrypted password.\n\n        Args:\n            value (auth.PasswordEncrypt | str | None): input value (plain password or encrypted or `None` if empty)\n            dialect (Any): dialect (not used).\n\n        Returns:\n            str | None: encrypted password or `None` if empty.\n        \"\"\"\n        converted_value = self._convert(value)\n        if converted_value:\n            return converted_value.encrypted_password\n        else:\n            return None\n\n    def process_result_value(\n        self, value: str | None, dialect\n    ) -&gt; auth.PasswordEncrypt | None:\n        \"\"\"Convert the hash to a PasswordEncrypt, if it's non-NULL.\n\n        Args:\n            value (str | None): input value (plain password or encrypted or `None` if empty)\n            dialect (Any): dialect (not used).\n\n        Returns:\n            auth.PasswordEncrypt | None: encrypted password as object or `None` (if nothing is passed as value).\n        \"\"\"\n        if value is not None:\n            return auth.PasswordEncrypt(value)\n\n    def validator(\n        self, password: auth.PasswordEncrypt | str | None\n    ) -&gt; auth.PasswordEncrypt | None:\n        \"\"\"Provides a validator/converter used by @validates.\n\n        Args:\n            password (auth.PasswordEncrypt | str | None): input value (plain password or encrypted or `None` if empty)\n\n        Returns:\n            auth.PasswordEncrypt | None: encrypted password as object or `None` (if nothing is passed as value).\n        \"\"\"\n        return self._convert(password)\n\n    def _convert(\n        self, value: auth.PasswordEncrypt | str | None\n    ) -&gt; auth.PasswordEncrypt | None:\n        \"\"\"Returns a PasswordEncrypt from the given string.\n\n        PasswordEncrypt instances or None values will return unchanged.\n        Strings will be encrypted and the resulting PasswordEncrypt returned.\n        Any other input will result in a TypeError.\n\n        Args:\n            value (auth.PasswordEncrypt | str | None): input value (plain password or encrypted or `None` if empty)\n\n        Raises:\n            TypeError: unknown type.\n\n        Returns:\n            auth.PasswordEncrypt | None: encrypted password as object or `None` (if nothing is passed as value).\n        \"\"\"\n        if isinstance(value, auth.PasswordEncrypt):\n            return value\n        elif isinstance(value, str):\n            return auth.PasswordEncrypt.from_str(value)\n        elif value is not None:\n            raise TypeError(\n                f\"Cannot initialize PasswordEncrypt from type '{type(value)}'\"\n            )\n\n        # Reached only if value is None\n        return None\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Encrypted.impl","title":"impl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>impl: String = String\n</code></pre> <p>Base column implementation.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Encrypted.process_bind_param","title":"process_bind_param","text":"<pre><code>process_bind_param(\n    value: PasswordEncrypt | str | None, dialect\n) -&gt; str | None\n</code></pre> <p>Ensure the value is a PasswordEncrypt and then return the encrypted password.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>PasswordEncrypt | str | None</code> <p>input value (plain password or encrypted or <code>None</code> if empty)</p> required <code>dialect</code> <code>Any</code> <p>dialect (not used).</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>encrypted password or <code>None</code> if empty.</p> Source code in <code>dlunch/models.py</code> <pre><code>def process_bind_param(\n    self, value: auth.PasswordEncrypt | str | None, dialect\n) -&gt; str | None:\n    \"\"\"Ensure the value is a PasswordEncrypt and then return the encrypted password.\n\n    Args:\n        value (auth.PasswordEncrypt | str | None): input value (plain password or encrypted or `None` if empty)\n        dialect (Any): dialect (not used).\n\n    Returns:\n        str | None: encrypted password or `None` if empty.\n    \"\"\"\n    converted_value = self._convert(value)\n    if converted_value:\n        return converted_value.encrypted_password\n    else:\n        return None\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Encrypted.process_result_value","title":"process_result_value","text":"<pre><code>process_result_value(\n    value: str | None, dialect\n) -&gt; PasswordEncrypt | None\n</code></pre> <p>Convert the hash to a PasswordEncrypt, if it's non-NULL.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str | None</code> <p>input value (plain password or encrypted or <code>None</code> if empty)</p> required <code>dialect</code> <code>Any</code> <p>dialect (not used).</p> required <p>Returns:</p> Type Description <code>PasswordEncrypt | None</code> <p>encrypted password as object or <code>None</code> (if nothing is passed as value).</p> Source code in <code>dlunch/models.py</code> <pre><code>def process_result_value(\n    self, value: str | None, dialect\n) -&gt; auth.PasswordEncrypt | None:\n    \"\"\"Convert the hash to a PasswordEncrypt, if it's non-NULL.\n\n    Args:\n        value (str | None): input value (plain password or encrypted or `None` if empty)\n        dialect (Any): dialect (not used).\n\n    Returns:\n        auth.PasswordEncrypt | None: encrypted password as object or `None` (if nothing is passed as value).\n    \"\"\"\n    if value is not None:\n        return auth.PasswordEncrypt(value)\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Encrypted.validator","title":"validator","text":"<pre><code>validator(\n    password: PasswordEncrypt | str | None,\n) -&gt; PasswordEncrypt | None\n</code></pre> <p>Provides a validator/converter used by @validates.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>PasswordEncrypt | str | None</code> <p>input value (plain password or encrypted or <code>None</code> if empty)</p> required <p>Returns:</p> Type Description <code>PasswordEncrypt | None</code> <p>encrypted password as object or <code>None</code> (if nothing is passed as value).</p> Source code in <code>dlunch/models.py</code> <pre><code>def validator(\n    self, password: auth.PasswordEncrypt | str | None\n) -&gt; auth.PasswordEncrypt | None:\n    \"\"\"Provides a validator/converter used by @validates.\n\n    Args:\n        password (auth.PasswordEncrypt | str | None): input value (plain password or encrypted or `None` if empty)\n\n    Returns:\n        auth.PasswordEncrypt | None: encrypted password as object or `None` (if nothing is passed as value).\n    \"\"\"\n    return self._convert(password)\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Flags","title":"Flags","text":"<p>               Bases: <code>CommonTable</code></p> <p>Table with global flags used by Data-Lunch.</p> <p>'No more orders' flag and guest override flags are stored here.</p> <p>Methods:</p> Name Description <code>__repr__</code> <p>Simple object representation.</p> <code>clear_guest_override</code> <p>Clear 'guest_override' flags and return deleted rows</p> <p>Attributes:</p> Name Type Description <code>__tablename__</code> <p>Name of the table.</p> <code>id</code> <p>Flag ID (name).</p> <code>value</code> <p>Flag value.</p> Source code in <code>dlunch/models.py</code> <pre><code>class Flags(CommonTable):\n    \"\"\"Table with global flags used by Data-Lunch.\n\n    'No more orders' flag and guest override flags are stored here.\n    \"\"\"\n\n    __tablename__ = \"flags\"\n    \"\"\"Name of the table.\"\"\"\n    id = Column(\n        String(50),\n        primary_key=True,\n        nullable=False,\n        sqlite_on_conflict_primary_key=\"REPLACE\",\n    )\n    \"\"\"Flag ID (name).\"\"\"\n    value = Column(Boolean, nullable=False)\n    \"\"\"Flag value.\"\"\"\n\n    @classmethod\n    def clear_guest_override(self, config: DictConfig) -&gt; int:\n        \"\"\"Clear 'guest_override' flags and return deleted rows\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n\n        Returns:\n            int: deleted rows.\n        \"\"\"\n\n        session = DatabaseConnector(config=config).create_session()\n        with session:\n            # Clean menu\n            num_rows_deleted = session.execute(\n                delete(self).where(self.id.like(\"%_guest_override\"))\n            )\n            session.commit()\n            log.info(\n                f\"deleted {num_rows_deleted.rowcount} rows (guest override) from table '{self.__tablename__}'\"\n            )\n\n        return num_rows_deleted.rowcount\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Simple object representation.\n\n        Returns:\n            str: string representation.\n        \"\"\"\n        return f\"&lt;FLAG:{self.id} - value:{self.value}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Flags.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'flags'\n</code></pre> <p>Name of the table.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Flags.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Column(\n    String(50),\n    primary_key=True,\n    nullable=False,\n    sqlite_on_conflict_primary_key=\"REPLACE\",\n)\n</code></pre> <p>Flag ID (name).</p>"},{"location":"reference/dlunch/models/#dlunch.models.Flags.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value = Column(Boolean, nullable=False)\n</code></pre> <p>Flag value.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Flags.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Simple object representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Simple object representation.\n\n    Returns:\n        str: string representation.\n    \"\"\"\n    return f\"&lt;FLAG:{self.id} - value:{self.value}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Flags.clear_guest_override","title":"clear_guest_override  <code>classmethod</code>","text":"<pre><code>clear_guest_override(config: DictConfig) -&gt; int\n</code></pre> <p>Clear 'guest_override' flags and return deleted rows</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <p>Returns:</p> Type Description <code>int</code> <p>deleted rows.</p> Source code in <code>dlunch/models.py</code> <pre><code>@classmethod\ndef clear_guest_override(self, config: DictConfig) -&gt; int:\n    \"\"\"Clear 'guest_override' flags and return deleted rows\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n\n    Returns:\n        int: deleted rows.\n    \"\"\"\n\n    session = DatabaseConnector(config=config).create_session()\n    with session:\n        # Clean menu\n        num_rows_deleted = session.execute(\n            delete(self).where(self.id.like(\"%_guest_override\"))\n        )\n        session.commit()\n        log.info(\n            f\"deleted {num_rows_deleted.rowcount} rows (guest override) from table '{self.__tablename__}'\"\n        )\n\n    return num_rows_deleted.rowcount\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Menu","title":"Menu","text":"<p>               Bases: <code>CommonTable</code></p> <p>Table with menu items.</p> <p>Methods:</p> Name Description <code>__repr__</code> <p>Simple object representation.</p> <p>Attributes:</p> Name Type Description <code>__tablename__</code> <p>Name of the table.</p> <code>id</code> <p>Menu item ID.</p> <code>item</code> <p>Item name.</p> <code>orders</code> <p>Orders connected to each menu item.</p> Source code in <code>dlunch/models.py</code> <pre><code>class Menu(CommonTable):\n    \"\"\"Table with menu items.\"\"\"\n\n    __tablename__ = \"menu\"\n    \"\"\"Name of the table.\"\"\"\n    id = Column(Integer, Identity(start=1, cycle=True), primary_key=True)\n    \"\"\"Menu item ID.\"\"\"\n    item = Column(String(250), unique=False, nullable=False)\n    \"\"\"Item name.\"\"\"\n    orders = relationship(\n        \"Orders\",\n        back_populates=\"menu_item\",\n        cascade=\"all, delete-orphan\",\n        passive_deletes=True,\n    )\n    \"\"\"Orders connected to each menu item.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Simple object representation.\n\n        Returns:\n            str: string representation.\n        \"\"\"\n        return f\"&lt;MENU_ITEM:{self.id} - {self.item}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Menu.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'menu'\n</code></pre> <p>Name of the table.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Menu.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Column(\n    Integer, Identity(start=1, cycle=True), primary_key=True\n)\n</code></pre> <p>Menu item ID.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Menu.item","title":"item  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>item = Column(String(250), unique=False, nullable=False)\n</code></pre> <p>Item name.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Menu.orders","title":"orders  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>orders = relationship(\n    \"Orders\",\n    back_populates=\"menu_item\",\n    cascade=\"all, delete-orphan\",\n    passive_deletes=True,\n)\n</code></pre> <p>Orders connected to each menu item.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Menu.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Simple object representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Simple object representation.\n\n    Returns:\n        str: string representation.\n    \"\"\"\n    return f\"&lt;MENU_ITEM:{self.id} - {self.item}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Orders","title":"Orders","text":"<p>               Bases: <code>CommonTable</code></p> <p>Table with items that belongs to an order.</p> <p>Methods:</p> Name Description <code>__repr__</code> <p>Simple object representation.</p> <p>Attributes:</p> Name Type Description <code>__tablename__</code> <p>Name of the table.</p> <code>id</code> <p>Order ID.</p> <code>menu_item</code> <p>Menu items connected to each order (see <code>menu</code> table).</p> <code>menu_item_id</code> <p>ID of the menu item included in the order.</p> <code>note</code> <p>Note field attached to the order.</p> <code>user</code> <p>User that placed the order.</p> <code>user_record</code> <p>User connected to this order.</p> Source code in <code>dlunch/models.py</code> <pre><code>class Orders(CommonTable):\n    \"\"\"Table with items that belongs to an order.\"\"\"\n\n    __tablename__ = \"orders\"\n    \"\"\"Name of the table.\"\"\"\n    id = Column(Integer, Identity(start=1, cycle=True), primary_key=True)\n    \"\"\"Order ID.\"\"\"\n    user = Column(\n        String(100),\n        ForeignKey(\"users.id\", ondelete=\"CASCADE\"),\n        index=True,\n        nullable=False,\n    )\n    \"\"\"User that placed the order.\"\"\"\n    user_record = relationship(\"Users\", back_populates=\"orders\", uselist=False)\n    \"\"\"User connected to this order.\"\"\"\n    menu_item_id = Column(\n        Integer,\n        ForeignKey(\"menu.id\", ondelete=\"CASCADE\"),\n        nullable=False,\n    )\n    \"\"\"ID of the menu item included in the order.\"\"\"\n    menu_item = relationship(\"Menu\", back_populates=\"orders\")\n    \"\"\"Menu items connected to each order (see `menu` table).\"\"\"\n    note = Column(String(300), unique=False, nullable=True)\n    \"\"\"Note field attached to the order.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Simple object representation.\n\n        Returns:\n            str: string representation.\n        \"\"\"\n        return f\"&lt;ORDER:{self.user}, {self.menu_item.item}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Orders.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'orders'\n</code></pre> <p>Name of the table.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Orders.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Column(\n    Integer, Identity(start=1, cycle=True), primary_key=True\n)\n</code></pre> <p>Order ID.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Orders.menu_item","title":"menu_item  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>menu_item = relationship('Menu', back_populates='orders')\n</code></pre> <p>Menu items connected to each order (see <code>menu</code> table).</p>"},{"location":"reference/dlunch/models/#dlunch.models.Orders.menu_item_id","title":"menu_item_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>menu_item_id = Column(\n    Integer,\n    ForeignKey(\"menu.id\", ondelete=\"CASCADE\"),\n    nullable=False,\n)\n</code></pre> <p>ID of the menu item included in the order.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Orders.note","title":"note  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>note = Column(String(300), unique=False, nullable=True)\n</code></pre> <p>Note field attached to the order.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Orders.user","title":"user  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user = Column(\n    String(100),\n    ForeignKey(\"users.id\", ondelete=\"CASCADE\"),\n    index=True,\n    nullable=False,\n)\n</code></pre> <p>User that placed the order.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Orders.user_record","title":"user_record  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_record = relationship(\n    \"Users\", back_populates=\"orders\", uselist=False\n)\n</code></pre> <p>User connected to this order.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Orders.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Simple object representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Simple object representation.\n\n    Returns:\n        str: string representation.\n    \"\"\"\n    return f\"&lt;ORDER:{self.user}, {self.menu_item.item}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Password","title":"Password","text":"<p>               Bases: <code>TypeDecorator</code></p> <p>Allows storing and retrieving password hashes using PasswordHash.</p> <p>Methods:</p> Name Description <code>process_bind_param</code> <p>Ensure the value is a PasswordHash and then return its hash.</p> <code>process_result_value</code> <p>Convert the hash to a PasswordHash, if it's non-NULL.</p> <code>validator</code> <p>Provides a validator/converter used by @validates.</p> <p>Attributes:</p> Name Type Description <code>impl</code> <code>String</code> <p>Base column implementation.</p> Source code in <code>dlunch/models.py</code> <pre><code>class Password(TypeDecorator):\n    \"\"\"Allows storing and retrieving password hashes using PasswordHash.\"\"\"\n\n    impl: String = String\n    \"\"\"Base column implementation.\"\"\"\n\n    def process_bind_param(\n        self, value: auth.PasswordHash | str | None, dialect\n    ) -&gt; str:\n        \"\"\"Ensure the value is a PasswordHash and then return its hash.\n\n        Args:\n            value (auth.PasswordHash | str): input value (plain password or hash, or `None` if empty).\n            dialect (Any): dialect (not used).\n\n        Returns:\n            str: password hash.\n        \"\"\"\n        return self._convert(value).hashed_password\n\n    def process_result_value(\n        self, value: str | None, dialect\n    ) -&gt; auth.PasswordHash | None:\n        \"\"\"Convert the hash to a PasswordHash, if it's non-NULL.\n\n        Args:\n            value (str | None): password hash (or `None` if empty).\n            dialect (Any): dialect (not used).\n\n        Returns:\n            auth.PasswordHash | None: hashed password as object or `None` (if nothing is passed as value).\n        \"\"\"\n        if value is not None:\n            return auth.PasswordHash(value)\n\n    def validator(\n        self, password: auth.PasswordHash | str | None\n    ) -&gt; auth.PasswordHash | None:\n        \"\"\"Provides a validator/converter used by @validates.\n\n        Args:\n            password (auth.PasswordHash | str | None): input value (plain password or hash or `None` if empty).\n\n        Returns:\n            auth.PasswordHash | None: hashed password as object or `None` (if nothing is passed as value).\n        \"\"\"\n        return self._convert(password)\n\n    def _convert(\n        self, value: auth.PasswordHash | str | None\n    ) -&gt; auth.PasswordHash | None:\n        \"\"\"Returns a PasswordHash from the given string.\n\n        PasswordHash instances or None values will return unchanged.\n        Strings will be hashed and the resulting PasswordHash returned.\n        Any other input will result in a TypeError.\n\n        Args:\n            value (auth.PasswordHash | str | None): input value (plain password or hash or `None` if empty).\n\n        Raises:\n            TypeError: unknown type.\n\n        Returns:\n            auth.PasswordHash | None: hashed password as object or `None` (if nothing is passed as value).\n        \"\"\"\n        if isinstance(value, auth.PasswordHash):\n            return value\n        elif isinstance(value, str):\n            return auth.PasswordHash.from_str(value)\n        elif value is not None:\n            raise TypeError(\n                f\"Cannot initialize PasswordHash from type '{type(value)}'\"\n            )\n\n        # Reached only if value is None\n        return None\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Password.impl","title":"impl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>impl: String = String\n</code></pre> <p>Base column implementation.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Password.process_bind_param","title":"process_bind_param","text":"<pre><code>process_bind_param(\n    value: PasswordHash | str | None, dialect\n) -&gt; str\n</code></pre> <p>Ensure the value is a PasswordHash and then return its hash.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>PasswordHash | str</code> <p>input value (plain password or hash, or <code>None</code> if empty).</p> required <code>dialect</code> <code>Any</code> <p>dialect (not used).</p> required <p>Returns:</p> Type Description <code>str</code> <p>password hash.</p> Source code in <code>dlunch/models.py</code> <pre><code>def process_bind_param(\n    self, value: auth.PasswordHash | str | None, dialect\n) -&gt; str:\n    \"\"\"Ensure the value is a PasswordHash and then return its hash.\n\n    Args:\n        value (auth.PasswordHash | str): input value (plain password or hash, or `None` if empty).\n        dialect (Any): dialect (not used).\n\n    Returns:\n        str: password hash.\n    \"\"\"\n    return self._convert(value).hashed_password\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Password.process_result_value","title":"process_result_value","text":"<pre><code>process_result_value(\n    value: str | None, dialect\n) -&gt; PasswordHash | None\n</code></pre> <p>Convert the hash to a PasswordHash, if it's non-NULL.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str | None</code> <p>password hash (or <code>None</code> if empty).</p> required <code>dialect</code> <code>Any</code> <p>dialect (not used).</p> required <p>Returns:</p> Type Description <code>PasswordHash | None</code> <p>hashed password as object or <code>None</code> (if nothing is passed as value).</p> Source code in <code>dlunch/models.py</code> <pre><code>def process_result_value(\n    self, value: str | None, dialect\n) -&gt; auth.PasswordHash | None:\n    \"\"\"Convert the hash to a PasswordHash, if it's non-NULL.\n\n    Args:\n        value (str | None): password hash (or `None` if empty).\n        dialect (Any): dialect (not used).\n\n    Returns:\n        auth.PasswordHash | None: hashed password as object or `None` (if nothing is passed as value).\n    \"\"\"\n    if value is not None:\n        return auth.PasswordHash(value)\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Password.validator","title":"validator","text":"<pre><code>validator(\n    password: PasswordHash | str | None,\n) -&gt; PasswordHash | None\n</code></pre> <p>Provides a validator/converter used by @validates.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>PasswordHash | str | None</code> <p>input value (plain password or hash or <code>None</code> if empty).</p> required <p>Returns:</p> Type Description <code>PasswordHash | None</code> <p>hashed password as object or <code>None</code> (if nothing is passed as value).</p> Source code in <code>dlunch/models.py</code> <pre><code>def validator(\n    self, password: auth.PasswordHash | str | None\n) -&gt; auth.PasswordHash | None:\n    \"\"\"Provides a validator/converter used by @validates.\n\n    Args:\n        password (auth.PasswordHash | str | None): input value (plain password or hash or `None` if empty).\n\n    Returns:\n        auth.PasswordHash | None: hashed password as object or `None` (if nothing is passed as value).\n    \"\"\"\n    return self._convert(password)\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.PrivilegedUsers","title":"PrivilegedUsers","text":"<p>               Bases: <code>CommonTable</code></p> <p>Table with user that have privileges (normal users and admin).</p> <p>If enabled guests are all the authenticated users that do not belong to this table (see config key <code>auth.authorize_guest_users</code> and <code>basic_auth.guest_user</code>)</p> <p>Methods:</p> Name Description <code>__repr__</code> <p>Simple object representation.</p> <p>Attributes:</p> Name Type Description <code>__tablename__</code> <p>Name of the table.</p> <code>admin</code> <p>Admin flag (true if admin).</p> <code>user</code> <p>User name.</p> Source code in <code>dlunch/models.py</code> <pre><code>class PrivilegedUsers(CommonTable):\n    \"\"\"Table with user that have privileges (normal users and admin).\n\n    If enabled guests are all the authenticated users that do not belong to this table\n    (see config key `auth.authorize_guest_users` and `basic_auth.guest_user`)\n    \"\"\"\n\n    __tablename__ = \"privileged_users\"\n    \"\"\"Name of the table.\"\"\"\n    user = Column(\n        String(100),\n        primary_key=True,\n        sqlite_on_conflict_primary_key=\"REPLACE\",\n    )\n    \"\"\"User name.\"\"\"\n    admin = Column(\n        Boolean, nullable=False, default=False, server_default=sql_false()\n    )\n    \"\"\"Admin flag (true if admin).\"\"\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Simple object representation.\n\n        Returns:\n            str: string representation.\n        \"\"\"\n        return f\"&lt;PRIVILEGED_USER:{self.id}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.PrivilegedUsers.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'privileged_users'\n</code></pre> <p>Name of the table.</p>"},{"location":"reference/dlunch/models/#dlunch.models.PrivilegedUsers.admin","title":"admin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>admin = Column(\n    Boolean,\n    nullable=False,\n    default=False,\n    server_default=false(),\n)\n</code></pre> <p>Admin flag (true if admin).</p>"},{"location":"reference/dlunch/models/#dlunch.models.PrivilegedUsers.user","title":"user  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user = Column(\n    String(100),\n    primary_key=True,\n    sqlite_on_conflict_primary_key=\"REPLACE\",\n)\n</code></pre> <p>User name.</p>"},{"location":"reference/dlunch/models/#dlunch.models.PrivilegedUsers.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Simple object representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Simple object representation.\n\n    Returns:\n        str: string representation.\n    \"\"\"\n    return f\"&lt;PRIVILEGED_USER:{self.id}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Stats","title":"Stats","text":"<p>               Bases: <code>CommonTable</code></p> <p>Table with number of users that ate a lunch, grouped by guest type.</p> <p>Methods:</p> Name Description <code>__repr__</code> <p>Simple object representation.</p> <p>Attributes:</p> Name Type Description <code>__table_args__</code> <p>Table arguments, used to create primary key (ON CONFLICT options for composite</p> <code>__tablename__</code> <p>Name of the table.</p> <code>date</code> <p>Day to which the statistics refers to.</p> <code>guest</code> <p>Different kind of guests are identified by the value defined in config files</p> <code>hungry_people</code> <p>Number of people that ate in a certain day.</p> Source code in <code>dlunch/models.py</code> <pre><code>class Stats(CommonTable):\n    \"\"\"Table with number of users that ate a lunch, grouped by guest type.\"\"\"\n\n    # Primary key handled with __table_args__ because ON CONFLICT for composite\n    # primary key is available only with __table_args__\n    __tablename__ = \"stats\"\n    \"\"\"Name of the table.\"\"\"\n    __table_args__ = (\n        PrimaryKeyConstraint(\n            \"date\", \"guest\", name=\"stats_pkey\", sqlite_on_conflict=\"REPLACE\"\n        ),\n    )\n    \"\"\"Table arguments, used to create primary key (ON CONFLICT options for composite\n    primary key is available only with __table_args__).\"\"\"\n    date = Column(\n        Date,\n        nullable=False,\n        server_default=func.current_date(),\n    )\n    \"\"\"Day to which the statistics refers to.\"\"\"\n    guest = Column(\n        String(20),\n        nullable=True,\n        default=\"NotAGuest\",\n        server_default=\"NotAGuest\",\n    )\n    \"\"\"Different kind of guests are identified by the value defined in config files\n    (see config key `panel.guest_types`).\n    'NotAGuest' is the value used for locals.\n    \"\"\"\n    hungry_people = Column(\n        Integer, nullable=False, default=0, server_default=\"0\"\n    )\n    \"\"\"Number of people that ate in a certain day.\n    different kind of guests are identified by the value in guest column.\n    \"\"\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Simple object representation.\n\n        Returns:\n            str: string representation.\n        \"\"\"\n        return f\"&lt;STAT:{self.id} - HP:{self.hungry_people} - HG:{self.hungry_guests}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Stats.__table_args__","title":"__table_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__table_args__ = PrimaryKeyConstraint(\n    \"date\",\n    \"guest\",\n    name=\"stats_pkey\",\n    sqlite_on_conflict=\"REPLACE\",\n)\n</code></pre> <p>Table arguments, used to create primary key (ON CONFLICT options for composite primary key is available only with table_args).</p>"},{"location":"reference/dlunch/models/#dlunch.models.Stats.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'stats'\n</code></pre> <p>Name of the table.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Stats.date","title":"date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>date = Column(\n    Date, nullable=False, server_default=current_date()\n)\n</code></pre> <p>Day to which the statistics refers to.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Stats.guest","title":"guest  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>guest = Column(\n    String(20),\n    nullable=True,\n    default=\"NotAGuest\",\n    server_default=\"NotAGuest\",\n)\n</code></pre> <p>Different kind of guests are identified by the value defined in config files (see config key <code>panel.guest_types</code>). 'NotAGuest' is the value used for locals.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Stats.hungry_people","title":"hungry_people  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hungry_people = Column(\n    Integer, nullable=False, default=0, server_default=\"0\"\n)\n</code></pre> <p>Number of people that ate in a certain day. different kind of guests are identified by the value in guest column.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Stats.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Simple object representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Simple object representation.\n\n    Returns:\n        str: string representation.\n    \"\"\"\n    return f\"&lt;STAT:{self.id} - HP:{self.hungry_people} - HG:{self.hungry_guests}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Users","title":"Users","text":"<p>               Bases: <code>CommonTable</code></p> <p>Table with users that placed an order.</p> <p>Methods:</p> Name Description <code>__repr__</code> <p>Simple object representation.</p> <p>Attributes:</p> Name Type Description <code>__tablename__</code> <p>Name of the table.</p> <code>guest</code> <p>Guest flag (true if guest).</p> <code>id</code> <p>User ID.</p> <code>lunch_time</code> <p>User selected lunch time.</p> <code>orders</code> <p>Orders connected to each user.</p> <code>takeaway</code> <p>Takeaway flag (true if takeaway).</p> Source code in <code>dlunch/models.py</code> <pre><code>class Users(CommonTable):\n    \"\"\"Table with users that placed an order.\"\"\"\n\n    __tablename__ = \"users\"\n    \"\"\"Name of the table.\"\"\"\n    id = Column(\n        String(100),\n        primary_key=True,\n        nullable=False,\n    )\n    \"\"\"User ID.\"\"\"\n    guest = Column(\n        String(20),\n        nullable=False,\n        default=\"NotAGuest\",\n        server_default=\"NotAGuest\",\n    )\n    \"\"\"Guest flag (true if guest).\"\"\"\n    lunch_time = Column(String(7), index=True, nullable=False)\n    \"\"\"User selected lunch time.\"\"\"\n    takeaway = Column(\n        Boolean, nullable=False, default=False, server_default=sql_false()\n    )\n    \"\"\"Takeaway flag (true if takeaway).\"\"\"\n    orders = relationship(\n        \"Orders\",\n        back_populates=\"user_record\",\n        cascade=\"all, delete-orphan\",\n        passive_deletes=True,\n    )\n    \"\"\"Orders connected to each user.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Simple object representation.\n\n        Returns:\n            str: string representation.\n        \"\"\"\n        return f\"&lt;USER:{self.id}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.Users.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'users'\n</code></pre> <p>Name of the table.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Users.guest","title":"guest  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>guest = Column(\n    String(20),\n    nullable=False,\n    default=\"NotAGuest\",\n    server_default=\"NotAGuest\",\n)\n</code></pre> <p>Guest flag (true if guest).</p>"},{"location":"reference/dlunch/models/#dlunch.models.Users.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Column(String(100), primary_key=True, nullable=False)\n</code></pre> <p>User ID.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Users.lunch_time","title":"lunch_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lunch_time = Column(String(7), index=True, nullable=False)\n</code></pre> <p>User selected lunch time.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Users.orders","title":"orders  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>orders = relationship(\n    \"Orders\",\n    back_populates=\"user_record\",\n    cascade=\"all, delete-orphan\",\n    passive_deletes=True,\n)\n</code></pre> <p>Orders connected to each user.</p>"},{"location":"reference/dlunch/models/#dlunch.models.Users.takeaway","title":"takeaway  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>takeaway = Column(\n    Boolean,\n    nullable=False,\n    default=False,\n    server_default=false(),\n)\n</code></pre> <p>Takeaway flag (true if takeaway).</p>"},{"location":"reference/dlunch/models/#dlunch.models.Users.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Simple object representation.</p> <p>Returns:</p> Type Description <code>str</code> <p>string representation.</p> Source code in <code>dlunch/models.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Simple object representation.\n\n    Returns:\n        str: string representation.\n    \"\"\"\n    return f\"&lt;USER:{self.id}&gt;\"\n</code></pre>"},{"location":"reference/dlunch/models/#dlunch.models.set_sqlite_pragma","title":"set_sqlite_pragma","text":"<pre><code>set_sqlite_pragma(dbapi_connection, connection_record)\n</code></pre> <p>Force foreign key constraints for sqlite connections.</p> <p>Parameters:</p> Name Type Description Default <code>dbapi_connection</code> <code>Any</code> <p>connection to database. Shall have a <code>cursor</code> method.</p> required <code>connection_record</code> <code>Any</code> <p>connection record (not used).</p> required Source code in <code>dlunch/models.py</code> <pre><code>@event.listens_for(Engine, \"connect\")\ndef set_sqlite_pragma(dbapi_connection, connection_record):\n    \"\"\"Force foreign key constraints for sqlite connections.\n\n    Args:\n        dbapi_connection (Any): connection to database. Shall have a `cursor` method.\n        connection_record (Any): connection record (not used).\n    \"\"\"\n    if DatabaseConnector.get_db_dialect(dbapi_connection) == \"sqlite\":\n        cursor = dbapi_connection.cursor()\n        cursor.execute(\"PRAGMA foreign_keys=ON;\")\n        cursor.close()\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/","title":"scheduled_tasks","text":"<p>Module with functions used to execute scheduled tasks.</p> <p>See https://panel.holoviz.org/how_to/callbacks/schedule.html for details.</p> <p>Classes:</p> Name Description <code>CleanFilesDB</code> <p>Task action for cleaning temporary tables and files.</p> <code>ResetGuestPassword</code> <p>Task action for resetting guest user password.</p> <code>Task</code> <p>Generic task object.</p> <code>TaskAction</code> <p>Generic task action object.</p> <code>TaskManager</code> <p>Task manager object.</p> <code>UploadDBToGCP</code> <p>Task action for uploading database to Google Cloud Storage.</p> <p>Attributes:</p> Name Type Description <code>log</code> <code>Logger</code> <p>Module logger.</p>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log: Logger = getLogger(__name__)\n</code></pre> <p>Module logger.</p>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.CleanFilesDB","title":"CleanFilesDB","text":"<p>               Bases: <code>TaskAction</code></p> <p>Task action for cleaning temporary tables and files.</p> <p>Its scope is to build a callable that will be executed when the task is triggered.</p> <p>Methods:</p> Name Description <code>build_callable</code> <p>Build and return the scheduled callable that cleans temporary</p> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>class CleanFilesDB(TaskAction):\n    \"\"\"Task action for cleaning temporary tables and files.\n\n    Its scope is to build a callable that will be executed when the task is\n    triggered.\n    \"\"\"\n\n    def build_callable(self, config: DictConfig) -&gt; callable:\n        \"\"\"Build and return the scheduled callable that cleans temporary\n        tables and files.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n        \"\"\"\n\n        # Set waiter\n        waiter = core.Waiter(config=config)\n\n        async def action_callable() -&gt; None:\n            \"\"\"Scheduled callable that cleans temporary tables and files.\"\"\"\n            log.info(\n                f\"clean task (files and db) executed at {dt.datetime.now()}\"\n            )\n            waiter.delete_files()\n            waiter.clean_tables()\n\n        return action_callable\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.CleanFilesDB.build_callable","title":"build_callable","text":"<pre><code>build_callable(config: DictConfig) -&gt; callable\n</code></pre> <p>Build and return the scheduled callable that cleans temporary tables and files.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def build_callable(self, config: DictConfig) -&gt; callable:\n    \"\"\"Build and return the scheduled callable that cleans temporary\n    tables and files.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n    \"\"\"\n\n    # Set waiter\n    waiter = core.Waiter(config=config)\n\n    async def action_callable() -&gt; None:\n        \"\"\"Scheduled callable that cleans temporary tables and files.\"\"\"\n        log.info(\n            f\"clean task (files and db) executed at {dt.datetime.now()}\"\n        )\n        waiter.delete_files()\n        waiter.clean_tables()\n\n    return action_callable\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.ResetGuestPassword","title":"ResetGuestPassword","text":"<p>               Bases: <code>TaskAction</code></p> <p>Task action for resetting guest user password.</p> <p>Its scope is to build a callable that will be executed when the task is triggered.</p> <p>Methods:</p> Name Description <code>build_callable</code> <p>Build and return the scheduled callable that resets the guest</p> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>class ResetGuestPassword(TaskAction):\n    \"\"\"Task action for resetting guest user password.\n\n    Its scope is to build a callable that will be executed when the task is\n    triggered.\n    \"\"\"\n\n    def build_callable(self, config: DictConfig) -&gt; callable:\n        \"\"\"Build and return the scheduled callable that resets the guest\n        user password.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n        \"\"\"\n\n        # Set auth configurations\n        auth_context = auth.AuthContext(config=config)\n\n        async def action_callable() -&gt; None:\n            \"\"\"Scheduled callable that resets the guest user password.\"\"\"\n            log.info(\n                f\"reset guest user password executed at {dt.datetime.now()}\"\n            )\n            auth_context.database_connector.set_flag(\n                id=\"reset_guest_user_password\", value=True\n            )\n            auth_context.set_guest_user_password()\n\n        return action_callable\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.ResetGuestPassword.build_callable","title":"build_callable","text":"<pre><code>build_callable(config: DictConfig) -&gt; callable\n</code></pre> <p>Build and return the scheduled callable that resets the guest user password.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def build_callable(self, config: DictConfig) -&gt; callable:\n    \"\"\"Build and return the scheduled callable that resets the guest\n    user password.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n    \"\"\"\n\n    # Set auth configurations\n    auth_context = auth.AuthContext(config=config)\n\n    async def action_callable() -&gt; None:\n        \"\"\"Scheduled callable that resets the guest user password.\"\"\"\n        log.info(\n            f\"reset guest user password executed at {dt.datetime.now()}\"\n        )\n        auth_context.database_connector.set_flag(\n            id=\"reset_guest_user_password\", value=True\n        )\n        auth_context.set_guest_user_password()\n\n    return action_callable\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task","title":"Task","text":"<p>Generic task object.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Task name (used for logs).</p> required <code>enabled</code> <code>bool</code> <p>Flag that marks a task as enabled.</p> required <code>hour</code> <code>int</code> <p>Start hour (used only if also minute is not None).</p> required <code>minute</code> <code>int</code> <p>Start minute (used only if also hour is not None).</p> required <code>period</code> <code>str</code> <p>The period between executions. May be expressed as a timedelta or a string.</p> <ul> <li>Week: <code>'1w'</code></li> <li>Day: <code>'1d'</code></li> <li>Hour: <code>'1h'</code></li> <li>Minute: <code>'1m'</code></li> <li>Second: <code>'1s'</code></li> </ul> required <code>actions</code> <code>list[TaskAction]</code> <p>List of actions to be executed.</p> required <p>Methods:</p> Name Description <code>__init__</code> <code>build_callable</code> <p>Build and return a callable that executes all actions</p> <code>schedule_task</code> <p>Schedule a task execution using Panel.</p> <p>Attributes:</p> Name Type Description <code>actions</code> <code>list[TaskAction]</code> <p>List of actions to be executed.</p> <code>enabled</code> <code>bool</code> <p>Flag that marks a task as enabled.</p> <code>hour</code> <code>int</code> <p>Start hour (used only if also minute is not None).</p> <code>minute</code> <code>int</code> <p>Start minute (used only if also hour is not None).</p> <code>name</code> <code>str</code> <p>Task name (used for logs).</p> <code>period</code> <code>str</code> <p>The period between executions.</p> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>class Task:\n    \"\"\"Generic task object.\n\n    Args:\n        name (str): Task name (used for logs).\n        enabled (bool): Flag that marks a task as enabled.\n        hour (int): Start hour (used only if also minute is not None).\n        minute (int): Start minute (used only if also hour is not None).\n        period (str): The period between executions.\n            May be expressed as a timedelta or a string.\n\n            * Week: `'1w'`\n            * Day: `'1d'`\n            * Hour: `'1h'`\n            * Minute: `'1m'`\n            * Second: `'1s'`\n        actions (list[TaskAction]): List of actions to be executed.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        enabled: bool,\n        hour: int | None,\n        minute: int | None,\n        period: str,\n        actions: list[TaskAction],\n    ) -&gt; None:\n        self.name: str = name\n        \"\"\"Task name (used for logs).\"\"\"\n        self.enabled: bool = enabled\n        \"\"\"Flag that marks a task as enabled.\"\"\"\n        self.hour: int = hour\n        \"\"\"Start hour (used only if also minute is not None).\"\"\"\n        self.minute: int = minute\n        \"\"\"Start minute (used only if also hour is not None).\"\"\"\n        self.period: str = period\n        \"\"\"The period between executions.\n            May be expressed as a timedelta or a string.\n\n        * Week: `'1w'`\n        * Day: `'1d'`\n        * Hour: `'1h'`\n        * Minute: `'1m'`\n        * Second: `'1s'`\n        \"\"\"\n        self.actions: list[TaskAction] = actions\n        \"\"\"List of actions to be executed.\"\"\"\n\n    def build_callable(self, config: DictConfig) -&gt; callable:\n        \"\"\"Build and return a callable that executes all actions\n        in the task.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n        \"\"\"\n\n        task_callables = [\n            action.build_callable(config=config) for action in self.actions\n        ]\n\n        async def task_callable() -&gt; None:\n            for callable in task_callables:\n                await callable()\n\n        return task_callable\n\n    def schedule_task(self, config: DictConfig) -&gt; None:\n        \"\"\"Schedule a task execution using Panel.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n\n        If start time is not defined, the task will start immediately.\n        If hour and minute are defined, the task will start at the specified\n        time. If the time already passed, the task will start the next day.\n        \"\"\"\n        if self.enabled:\n            log.info(f\"starting task '{self.name}'\")\n            if (self.hour is not None) and (self.minute is not None):\n                start_time = dt.datetime.today().replace(\n                    hour=self.hour,\n                    minute=self.minute,\n                )\n                if start_time &lt; dt.datetime.now():\n                    start_time = start_time + dt.timedelta(days=1)\n                log.info(\n                    f\"starting time: {start_time.strftime('%Y-%m-%d %H:%M')} - period: {self.period}\"\n                )\n            else:\n                start_time = None\n                log.info(f\"starting time: now - period: {self.period}\")\n\n            # Schedule task\n            pn.state.schedule_task(\n                name=self.name,\n                callback=self.build_callable(config),\n                period=self.period,\n                at=start_time,\n            )\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task.actions","title":"actions  <code>instance-attribute</code>","text":"<pre><code>actions: list[TaskAction] = actions\n</code></pre> <p>List of actions to be executed.</p>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task.enabled","title":"enabled  <code>instance-attribute</code>","text":"<pre><code>enabled: bool = enabled\n</code></pre> <p>Flag that marks a task as enabled.</p>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task.hour","title":"hour  <code>instance-attribute</code>","text":"<pre><code>hour: int = hour\n</code></pre> <p>Start hour (used only if also minute is not None).</p>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task.minute","title":"minute  <code>instance-attribute</code>","text":"<pre><code>minute: int = minute\n</code></pre> <p>Start minute (used only if also hour is not None).</p>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str = name\n</code></pre> <p>Task name (used for logs).</p>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task.period","title":"period  <code>instance-attribute</code>","text":"<pre><code>period: str = period\n</code></pre> <p>The period between executions.     May be expressed as a timedelta or a string.</p> <ul> <li>Week: <code>'1w'</code></li> <li>Day: <code>'1d'</code></li> <li>Hour: <code>'1h'</code></li> <li>Minute: <code>'1m'</code></li> <li>Second: <code>'1s'</code></li> </ul>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str,\n    enabled: bool,\n    hour: int | None,\n    minute: int | None,\n    period: str,\n    actions: list[TaskAction],\n) -&gt; None\n</code></pre> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    enabled: bool,\n    hour: int | None,\n    minute: int | None,\n    period: str,\n    actions: list[TaskAction],\n) -&gt; None:\n    self.name: str = name\n    \"\"\"Task name (used for logs).\"\"\"\n    self.enabled: bool = enabled\n    \"\"\"Flag that marks a task as enabled.\"\"\"\n    self.hour: int = hour\n    \"\"\"Start hour (used only if also minute is not None).\"\"\"\n    self.minute: int = minute\n    \"\"\"Start minute (used only if also hour is not None).\"\"\"\n    self.period: str = period\n    \"\"\"The period between executions.\n        May be expressed as a timedelta or a string.\n\n    * Week: `'1w'`\n    * Day: `'1d'`\n    * Hour: `'1h'`\n    * Minute: `'1m'`\n    * Second: `'1s'`\n    \"\"\"\n    self.actions: list[TaskAction] = actions\n    \"\"\"List of actions to be executed.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task.build_callable","title":"build_callable","text":"<pre><code>build_callable(config: DictConfig) -&gt; callable\n</code></pre> <p>Build and return a callable that executes all actions in the task.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def build_callable(self, config: DictConfig) -&gt; callable:\n    \"\"\"Build and return a callable that executes all actions\n    in the task.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n    \"\"\"\n\n    task_callables = [\n        action.build_callable(config=config) for action in self.actions\n    ]\n\n    async def task_callable() -&gt; None:\n        for callable in task_callables:\n            await callable()\n\n    return task_callable\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.Task.schedule_task","title":"schedule_task","text":"<pre><code>schedule_task(config: DictConfig) -&gt; None\n</code></pre> <p>Schedule a task execution using Panel.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <p>If start time is not defined, the task will start immediately. If hour and minute are defined, the task will start at the specified time. If the time already passed, the task will start the next day.</p> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def schedule_task(self, config: DictConfig) -&gt; None:\n    \"\"\"Schedule a task execution using Panel.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n\n    If start time is not defined, the task will start immediately.\n    If hour and minute are defined, the task will start at the specified\n    time. If the time already passed, the task will start the next day.\n    \"\"\"\n    if self.enabled:\n        log.info(f\"starting task '{self.name}'\")\n        if (self.hour is not None) and (self.minute is not None):\n            start_time = dt.datetime.today().replace(\n                hour=self.hour,\n                minute=self.minute,\n            )\n            if start_time &lt; dt.datetime.now():\n                start_time = start_time + dt.timedelta(days=1)\n            log.info(\n                f\"starting time: {start_time.strftime('%Y-%m-%d %H:%M')} - period: {self.period}\"\n            )\n        else:\n            start_time = None\n            log.info(f\"starting time: now - period: {self.period}\")\n\n        # Schedule task\n        pn.state.schedule_task(\n            name=self.name,\n            callback=self.build_callable(config),\n            period=self.period,\n            at=start_time,\n        )\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.TaskAction","title":"TaskAction","text":"<p>Generic task action object.</p> <p>Its scope is to build a callable that will be executed when the task is triggered.</p> <p>Methods:</p> Name Description <code>build_callable</code> <p>Build and return the scheduled callable that executes a dummy</p> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>class TaskAction:\n    \"\"\"Generic task action object.\n\n    Its scope is to build a callable that will be executed when the task is\n    triggered.\n    \"\"\"\n\n    def build_callable(self, config: DictConfig) -&gt; callable:\n        \"\"\"Build and return the scheduled callable that executes a dummy\n        task action.\n\n        It just logs a message.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n        \"\"\"\n\n        async def action_callable() -&gt; None:\n            \"\"\"Scheduled callable that executes a dummy task action.\"\"\"\n            log.info(\n                f\"dummy task executed for {config.panel.gui.title.lower()}\"\n            )\n\n        return action_callable\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.TaskAction.build_callable","title":"build_callable","text":"<pre><code>build_callable(config: DictConfig) -&gt; callable\n</code></pre> <p>Build and return the scheduled callable that executes a dummy task action.</p> <p>It just logs a message.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def build_callable(self, config: DictConfig) -&gt; callable:\n    \"\"\"Build and return the scheduled callable that executes a dummy\n    task action.\n\n    It just logs a message.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n    \"\"\"\n\n    async def action_callable() -&gt; None:\n        \"\"\"Scheduled callable that executes a dummy task action.\"\"\"\n        log.info(\n            f\"dummy task executed for {config.panel.gui.title.lower()}\"\n        )\n\n    return action_callable\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.TaskManager","title":"TaskManager","text":"<p>Task manager object.</p> <p>Used to schedule all tasks given a list of tasks.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required <code>tasks</code> <code>list[Task]</code> <p>List of tasks to be scheduled.</p> required <p>Methods:</p> Name Description <code>__init__</code> <code>log_tasks</code> <p>Log all tasks defined in the collection.</p> <code>schedule_all</code> <p>Schedule all tasks in the collection.</p> <p>Attributes:</p> Name Type Description <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> <code>tasks</code> <code>list[Task]</code> <p>List of tasks to be scheduled.</p> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>class TaskManager:\n    \"\"\"Task manager object.\n\n    Used to schedule all tasks given a list of tasks.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n        tasks (list[Task]): List of tasks to be scheduled.\n    \"\"\"\n\n    def __init__(self, config: DictConfig, tasks: list[Task]) -&gt; None:\n        self.config: DictConfig = config\n        \"\"\"Hydra configuration dictionary.\"\"\"\n        self.tasks: list[Task] = tasks\n        \"\"\"List of tasks to be scheduled.\"\"\"\n\n    def log_tasks(self, enabled_only: bool = False) -&gt; None:\n        \"\"\"Log all tasks defined in the collection.\n\n        Args:\n            enabled_only (bool): If True, only enabled tasks will be listed.\n        \"\"\"\n        message = \"listing tasks\"\n        if enabled_only:\n            message += \" (enabled only)\"\n\n        # Loop over tasks and actions\n        for task in self.tasks:\n            if enabled_only and not task.enabled:\n                continue\n            message += f\"\\ntask: {task.name}\"\n            message += (\n                \"\\n\"\n                if enabled_only\n                else f\" ({'enabled' if task.enabled else 'disabled'})\\n\"\n            )\n            message += \"  actions:\"\n            for action in task.actions:\n                message += f\"\\n    {action.__class__.__name__}\"\n\n        log.info(message)\n\n    def schedule_all(self) -&gt; None:\n        \"\"\"Schedule all tasks in the collection.\"\"\"\n        for task in self.tasks:\n            task.schedule_task(self.config)\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.TaskManager.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config: DictConfig = config\n</code></pre> <p>Hydra configuration dictionary.</p>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.TaskManager.tasks","title":"tasks  <code>instance-attribute</code>","text":"<pre><code>tasks: list[Task] = tasks\n</code></pre> <p>List of tasks to be scheduled.</p>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.TaskManager.__init__","title":"__init__","text":"<pre><code>__init__(config: DictConfig, tasks: list[Task]) -&gt; None\n</code></pre> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def __init__(self, config: DictConfig, tasks: list[Task]) -&gt; None:\n    self.config: DictConfig = config\n    \"\"\"Hydra configuration dictionary.\"\"\"\n    self.tasks: list[Task] = tasks\n    \"\"\"List of tasks to be scheduled.\"\"\"\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.TaskManager.log_tasks","title":"log_tasks","text":"<pre><code>log_tasks(enabled_only: bool = False) -&gt; None\n</code></pre> <p>Log all tasks defined in the collection.</p> <p>Parameters:</p> Name Type Description Default <code>enabled_only</code> <code>bool</code> <p>If True, only enabled tasks will be listed.</p> <code>False</code> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def log_tasks(self, enabled_only: bool = False) -&gt; None:\n    \"\"\"Log all tasks defined in the collection.\n\n    Args:\n        enabled_only (bool): If True, only enabled tasks will be listed.\n    \"\"\"\n    message = \"listing tasks\"\n    if enabled_only:\n        message += \" (enabled only)\"\n\n    # Loop over tasks and actions\n    for task in self.tasks:\n        if enabled_only and not task.enabled:\n            continue\n        message += f\"\\ntask: {task.name}\"\n        message += (\n            \"\\n\"\n            if enabled_only\n            else f\" ({'enabled' if task.enabled else 'disabled'})\\n\"\n        )\n        message += \"  actions:\"\n        for action in task.actions:\n            message += f\"\\n    {action.__class__.__name__}\"\n\n    log.info(message)\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.TaskManager.schedule_all","title":"schedule_all","text":"<pre><code>schedule_all() -&gt; None\n</code></pre> <p>Schedule all tasks in the collection.</p> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def schedule_all(self) -&gt; None:\n    \"\"\"Schedule all tasks in the collection.\"\"\"\n    for task in self.tasks:\n        task.schedule_task(self.config)\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.UploadDBToGCP","title":"UploadDBToGCP","text":"<p>               Bases: <code>TaskAction</code></p> <p>Task action for uploading database to Google Cloud Storage.</p> <p>Its scope is to build a callable that will be executed when the task is triggered.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>Keyword arguments for the cloud.upload_to_gcloud function.</p> <code>{}</code> <p>Methods:</p> Name Description <code>__init__</code> <code>build_callable</code> <p>Build and return the scheduled callable that uploads the database to</p> <p>Attributes:</p> Name Type Description <code>gcp_kwargs</code> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>class UploadDBToGCP(TaskAction):\n    \"\"\"Task action for uploading database to Google Cloud Storage.\n\n    Its scope is to build a callable that will be executed when the task is\n    triggered.\n\n    Args:\n        kwargs (dict): Keyword arguments for the cloud.upload_to_gcloud function.\n    \"\"\"\n\n    def __init__(self, **kwargs) -&gt; None:\n        self.gcp_kwargs = kwargs\n\n    def build_callable(self, config: DictConfig) -&gt; callable:\n        \"\"\"Build and return the scheduled callable that uploads the database to\n        Google Cloud Storage.\n\n        Args:\n            config (DictConfig): Hydra configuration dictionary.\n        \"\"\"\n\n        async def action_callable() -&gt; None:\n            \"\"\"Scheduled callable that uploads the database to Google Cloud Storage.\"\"\"\n            log.info(\n                f\"upload database to gcp storage executed at {dt.datetime.now()}\"\n            )\n            cloud.upload_to_gcloud(**self.gcp_kwargs)\n\n        return action_callable\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.UploadDBToGCP.gcp_kwargs","title":"gcp_kwargs  <code>instance-attribute</code>","text":"<pre><code>gcp_kwargs = kwargs\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.UploadDBToGCP.__init__","title":"__init__","text":"<pre><code>__init__(**kwargs) -&gt; None\n</code></pre> Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def __init__(self, **kwargs) -&gt; None:\n    self.gcp_kwargs = kwargs\n</code></pre>"},{"location":"reference/dlunch/scheduled_tasks/#dlunch.scheduled_tasks.UploadDBToGCP.build_callable","title":"build_callable","text":"<pre><code>build_callable(config: DictConfig) -&gt; callable\n</code></pre> <p>Build and return the scheduled callable that uploads the database to Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>DictConfig</code> <p>Hydra configuration dictionary.</p> required Source code in <code>dlunch/scheduled_tasks.py</code> <pre><code>def build_callable(self, config: DictConfig) -&gt; callable:\n    \"\"\"Build and return the scheduled callable that uploads the database to\n    Google Cloud Storage.\n\n    Args:\n        config (DictConfig): Hydra configuration dictionary.\n    \"\"\"\n\n    async def action_callable() -&gt; None:\n        \"\"\"Scheduled callable that uploads the database to Google Cloud Storage.\"\"\"\n        log.info(\n            f\"upload database to gcp storage executed at {dt.datetime.now()}\"\n        )\n        cloud.upload_to_gcloud(**self.gcp_kwargs)\n\n    return action_callable\n</code></pre>"},{"location":"reference/dlunch/conf/","title":"conf","text":"<p>Package with Hydra configuration yaml files.</p> <p>The following Hydra configuration groups ae available:</p> <ul> <li><code>panel</code>: main Panel configurations (text used in menu and tables, scheduled tasks, other graphic user interface options).</li> <li><code>db</code>: database dialect (sqlite or postgresql) and specific queries, upload of db to external storage (sqlite only), db table creation at start-up.</li> <li><code>server</code>: Panel server options and server-level authentication options (basic auth or OAuth).</li> <li><code>auth</code>: main authentication and authorization options.</li> <li><code>basic_auth</code>: optional configuration group that add configurations required by basic authentication.</li> <li><code>hydra/job_logging</code>: override Hydra default logging handlers.</li> </ul>"}]}